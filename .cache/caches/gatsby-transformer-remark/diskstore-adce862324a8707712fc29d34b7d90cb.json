{"expireTime":9007200908516803000,"key":"transformer-remark-markdown-html-8383bddeaaa5539ae5f9aef54f3bb298-gatsby-remark-code-buttons-","val":"<h2><a href=\"https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/\">19. Remove Nth Node From End of List</a></h2>\n<h3>Problem:</h3>\n<p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p>\n<p><strong>Example:</strong></p>\n<pre><code>Given linked list: 1->2->3->4->5, and n = 2.\n\nAfter removing the second node from the end, the linked list becomes 1->2->3->5.\n</code></pre>\n<p><strong>Note:</strong></p>\n<p>Given <em>n</em> will always be valid.</p>\n<p><strong>Follow up:</strong></p>\n<p>Could you do this in one pass?</p>\n<h3>Solution:</h3>\n<p>Set a pointer <code>p1</code> for iterating, and <code>p2</code> which is <code>n</code> nodes behind, pointing at the (n+1)-th node from the end of list.</p>\n<p>Boundaries that should be awared of:</p>\n<ul>\n<li><code>p2</code> could be one node before <code>head</code>, which means the <code>head</code> should be removed.</li>\n<li><code>p2</code> could be larger than the length of the list (Though the description says <code>n</code> will always be valid, we take care of it anyway).</li>\n<li>It should be <code>p1.next</code> touches the end rather than <code>p1</code> because we want <code>p1</code> pointing at the last node.</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nlet removeNthFromEnd = function (head, n) {\n    let p1 = head;\n    while (p1 && n--) {\n        p1 = p1.next;\n    }\n\n    if (!p1) {\n        return n ? head : head.next;\n    }\n\n    let p2 = head;\n    while (p1.next) {\n        p1 = p1.next;\n        p2 = p2.next;\n    }\n\n    p2.next = p2.next.next;\n\n    return head;\n};`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre><code class=\"language-js\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nlet removeNthFromEnd = function (head, n) {\n    let p1 = head;\n    while (p1 &#x26;&#x26; n--) {\n        p1 = p1.next;\n    }\n\n    if (!p1) {\n        return n ? head : head.next;\n    }\n\n    let p2 = head;\n    while (p1.next) {\n        p1 = p1.next;\n        p2 = p2.next;\n    }\n\n    p2.next = p2.next.next;\n\n    return head;\n};\n</code></pre>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>"}