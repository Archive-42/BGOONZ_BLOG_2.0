{
    "expireTime": 9007200888441165000,
    "key": "transformer-remark-markdown-html-ast-8ceb45511c0a65ee351d309d39c5e039--",
    "val": {
        "type": "root",
        "children": [
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Asynchronicity in Programming Languages",
                        "position": { "start": { "line": 2, "column": 4, "offset": 4 }, "end": { "line": 2, "column": 43, "offset": 43 } }
                    }
                ],
                "position": { "start": { "line": 2, "column": 1, "offset": 1 }, "end": { "line": 2, "column": 43, "offset": 43 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "raw",
                "value": "<iframe src=\"https://web-dev-interview-prep-quiz-website.netlify.app/promises-async.html\" height=\"100%\" width=\"100%\"></iframe>",
                "position": { "start": { "line": 4, "column": 1, "offset": 45 }, "end": { "line": 4, "column": 127, "offset": 171 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Computers are asynchronous by design.",
                        "position": { "start": { "line": 6, "column": 1, "offset": 173 }, "end": { "line": 6, "column": 38, "offset": 210 } }
                    }
                ],
                "position": { "start": { "line": 6, "column": 1, "offset": 173 }, "end": { "line": 6, "column": 38, "offset": 210 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Asynchronous means that things can happen independently of the main program flow.",
                        "position": { "start": { "line": 8, "column": 1, "offset": 212 }, "end": { "line": 8, "column": 82, "offset": 293 } }
                    }
                ],
                "position": { "start": { "line": 8, "column": 1, "offset": 212 }, "end": { "line": 8, "column": 82, "offset": 293 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "In the current consumer computers, every program runs for a specific time slot and then it stops its execution to let another program continue their execution. This thing runs in a cycle so fast that it's impossible to notice. We think our computers run many programs simultaneously, but this is an illusion (except on multiprocessor machines).",
                        "position": { "start": { "line": 10, "column": 1, "offset": 295 }, "end": { "line": 10, "column": 345, "offset": 639 } }
                    }
                ],
                "position": { "start": { "line": 10, "column": 1, "offset": 295 }, "end": { "line": 10, "column": 345, "offset": 639 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Programs internally use ",
                        "position": { "start": { "line": 12, "column": 1, "offset": 641 }, "end": { "line": 12, "column": 25, "offset": 665 } }
                    },
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "interrupts",
                                "position": { "start": { "line": 12, "column": 26, "offset": 666 }, "end": { "line": 12, "column": 36, "offset": 676 } }
                            }
                        ],
                        "position": { "start": { "line": 12, "column": 25, "offset": 665 }, "end": { "line": 12, "column": 37, "offset": 677 } }
                    },
                    {
                        "type": "text",
                        "value": ", a signal that's emitted to the processor to gain the attention of the system.",
                        "position": { "start": { "line": 12, "column": 37, "offset": 677 }, "end": { "line": 12, "column": 116, "offset": 756 } }
                    }
                ],
                "position": { "start": { "line": 12, "column": 1, "offset": 641 }, "end": { "line": 12, "column": 116, "offset": 756 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "I won't go into the internals of this, but just keep in mind that it's normal for programs to be asynchronous and halt their execution until they need attention, allowing the computer to execute other things in the meantime. When a program is waiting for a response from the network, it cannot halt the processor until the request finishes.",
                        "position": { "start": { "line": 14, "column": 1, "offset": 758 }, "end": { "line": 14, "column": 341, "offset": 1098 } }
                    }
                ],
                "position": { "start": { "line": 14, "column": 1, "offset": 758 }, "end": { "line": 14, "column": 341, "offset": 1098 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Normally, programming languages are synchronous and some provide a way to manage asynchronicity in the language or through libraries. C, Java, C#, PHP, Go, Ruby, Swift, and Python are all synchronous by default. Some of them handle async by using threads, spawning a new process.",
                        "position": { "start": { "line": 16, "column": 1, "offset": 1100 }, "end": { "line": 16, "column": 280, "offset": 1379 } }
                    }
                ],
                "position": { "start": { "line": 16, "column": 1, "offset": 1100 }, "end": { "line": 16, "column": 280, "offset": 1379 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "JavaScript",
                        "position": { "start": { "line": 18, "column": 4, "offset": 1384 }, "end": { "line": 18, "column": 14, "offset": 1394 } }
                    }
                ],
                "position": { "start": { "line": 18, "column": 1, "offset": 1381 }, "end": { "line": 18, "column": 14, "offset": 1394 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "JavaScript is ",
                        "position": { "start": { "line": 20, "column": 1, "offset": 1396 }, "end": { "line": 20, "column": 15, "offset": 1410 } }
                    },
                    {
                        "type": "element",
                        "tagName": "strong",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "synchronous",
                                "position": { "start": { "line": 20, "column": 17, "offset": 1412 }, "end": { "line": 20, "column": 28, "offset": 1423 } }
                            }
                        ],
                        "position": { "start": { "line": 20, "column": 15, "offset": 1410 }, "end": { "line": 20, "column": 30, "offset": 1425 } }
                    },
                    {
                        "type": "text",
                        "value": " by default and is single threaded. This means that code cannot create new threads and run in parallel.",
                        "position": { "start": { "line": 20, "column": 30, "offset": 1425 }, "end": { "line": 20, "column": 133, "offset": 1528 } }
                    }
                ],
                "position": { "start": { "line": 20, "column": 1, "offset": 1396 }, "end": { "line": 20, "column": 133, "offset": 1528 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Lines of code are executed in series, one after another, for example:",
                        "position": { "start": { "line": 22, "column": 1, "offset": 1530 }, "end": { "line": 22, "column": 70, "offset": 1599 } }
                    }
                ],
                "position": { "start": { "line": 22, "column": 1, "offset": 1530 }, "end": { "line": 22, "column": 70, "offset": 1599 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [{ "type": "text", "value": "const a = 1;\nconst b = 2;\nconst c = a * b;\nconsole.log(c);\ndoSomething();\n" }],
                        "position": { "start": { "line": 24, "column": 1, "offset": 1601 }, "end": { "line": 30, "column": 4, "offset": 1684 } }
                    }
                ],
                "position": { "start": { "line": 24, "column": 1, "offset": 1601 }, "end": { "line": 30, "column": 4, "offset": 1684 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "But JavaScript was born inside the browser, its main job, in the beginning, was to respond to user actions, like ",
                        "position": { "start": { "line": 32, "column": 1, "offset": 1686 }, "end": { "line": 32, "column": 114, "offset": 1799 } }
                    },
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": {},
                        "children": [{ "type": "text", "value": "onClick" }],
                        "position": { "start": { "line": 32, "column": 114, "offset": 1799 }, "end": { "line": 32, "column": 123, "offset": 1808 } }
                    },
                    {
                        "type": "text",
                        "value": ", ",
                        "position": { "start": { "line": 32, "column": 123, "offset": 1808 }, "end": { "line": 32, "column": 125, "offset": 1810 } }
                    },
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": {},
                        "children": [{ "type": "text", "value": "onMouseOver" }],
                        "position": { "start": { "line": 32, "column": 125, "offset": 1810 }, "end": { "line": 32, "column": 138, "offset": 1823 } }
                    },
                    {
                        "type": "text",
                        "value": ", ",
                        "position": { "start": { "line": 32, "column": 138, "offset": 1823 }, "end": { "line": 32, "column": 140, "offset": 1825 } }
                    },
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": {},
                        "children": [{ "type": "text", "value": "onChange" }],
                        "position": { "start": { "line": 32, "column": 140, "offset": 1825 }, "end": { "line": 32, "column": 150, "offset": 1835 } }
                    },
                    {
                        "type": "text",
                        "value": ", ",
                        "position": { "start": { "line": 32, "column": 150, "offset": 1835 }, "end": { "line": 32, "column": 152, "offset": 1837 } }
                    },
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": {},
                        "children": [{ "type": "text", "value": "onSubmit" }],
                        "position": { "start": { "line": 32, "column": 152, "offset": 1837 }, "end": { "line": 32, "column": 162, "offset": 1847 } }
                    },
                    {
                        "type": "text",
                        "value": " and so on. How could it do this with a synchronous programming model?",
                        "position": { "start": { "line": 32, "column": 162, "offset": 1847 }, "end": { "line": 32, "column": 232, "offset": 1917 } }
                    }
                ],
                "position": { "start": { "line": 32, "column": 1, "offset": 1686 }, "end": { "line": 32, "column": 232, "offset": 1917 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The answer was in its environment. The ",
                        "position": { "start": { "line": 34, "column": 1, "offset": 1919 }, "end": { "line": 34, "column": 40, "offset": 1958 } }
                    },
                    {
                        "type": "element",
                        "tagName": "strong",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "browser",
                                "position": { "start": { "line": 34, "column": 42, "offset": 1960 }, "end": { "line": 34, "column": 49, "offset": 1967 } }
                            }
                        ],
                        "position": { "start": { "line": 34, "column": 40, "offset": 1958 }, "end": { "line": 34, "column": 51, "offset": 1969 } }
                    },
                    {
                        "type": "text",
                        "value": " provides a way to do it by providing a set of APIs that can handle this kind of functionality.",
                        "position": { "start": { "line": 34, "column": 51, "offset": 1969 }, "end": { "line": 34, "column": 146, "offset": 2064 } }
                    }
                ],
                "position": { "start": { "line": 34, "column": 1, "offset": 1919 }, "end": { "line": 34, "column": 146, "offset": 2064 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "More recently, Node.js introduced a non-blocking I/O environment to extend this concept to file access, network calls and so on.",
                        "position": { "start": { "line": 36, "column": 1, "offset": 2066 }, "end": { "line": 36, "column": 129, "offset": 2194 } }
                    }
                ],
                "position": { "start": { "line": 36, "column": 1, "offset": 2066 }, "end": { "line": 36, "column": 129, "offset": 2194 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Callbacks",
                        "position": { "start": { "line": 38, "column": 4, "offset": 2199 }, "end": { "line": 38, "column": 13, "offset": 2208 } }
                    }
                ],
                "position": { "start": { "line": 38, "column": 1, "offset": 2196 }, "end": { "line": 38, "column": 13, "offset": 2208 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "You can't know when a user is going to click a button. So, you ",
                        "position": { "start": { "line": 40, "column": 1, "offset": 2210 }, "end": { "line": 40, "column": 64, "offset": 2273 } }
                    },
                    {
                        "type": "element",
                        "tagName": "strong",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "define an event handler for the click event",
                                "position": { "start": { "line": 40, "column": 66, "offset": 2275 }, "end": { "line": 40, "column": 109, "offset": 2318 } }
                            }
                        ],
                        "position": { "start": { "line": 40, "column": 64, "offset": 2273 }, "end": { "line": 40, "column": 111, "offset": 2320 } }
                    },
                    {
                        "type": "text",
                        "value": ". This event handler accepts a function, which will be called when the event is triggered:",
                        "position": { "start": { "line": 40, "column": 111, "offset": 2320 }, "end": { "line": 40, "column": 201, "offset": 2410 } }
                    }
                ],
                "position": { "start": { "line": 40, "column": 1, "offset": 2210 }, "end": { "line": 40, "column": 201, "offset": 2410 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [
                            { "type": "text", "value": "document.getElementById('button').addEventListener('click', () => {\n    //item clicked\n});\n" }
                        ],
                        "position": { "start": { "line": 42, "column": 1, "offset": 2412 }, "end": { "line": 46, "column": 4, "offset": 2512 } }
                    }
                ],
                "position": { "start": { "line": 42, "column": 1, "offset": 2412 }, "end": { "line": 46, "column": 4, "offset": 2512 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "This is the so-called ",
                        "position": { "start": { "line": 48, "column": 1, "offset": 2514 }, "end": { "line": 48, "column": 23, "offset": 2536 } }
                    },
                    {
                        "type": "element",
                        "tagName": "strong",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "callback",
                                "position": { "start": { "line": 48, "column": 25, "offset": 2538 }, "end": { "line": 48, "column": 33, "offset": 2546 } }
                            }
                        ],
                        "position": { "start": { "line": 48, "column": 23, "offset": 2536 }, "end": { "line": 48, "column": 35, "offset": 2548 } }
                    },
                    {
                        "type": "text",
                        "value": ".",
                        "position": { "start": { "line": 48, "column": 35, "offset": 2548 }, "end": { "line": 48, "column": 36, "offset": 2549 } }
                    }
                ],
                "position": { "start": { "line": 48, "column": 1, "offset": 2514 }, "end": { "line": 48, "column": 36, "offset": 2549 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "A callback is a simple function that's passed as a value to another function, and will only be executed when the event happens. We can do this because JavaScript has first-class functions, which can be assigned to variables and passed around to other functions (called ",
                        "position": { "start": { "line": 50, "column": 1, "offset": 2551 }, "end": { "line": 50, "column": 270, "offset": 2820 } }
                    },
                    {
                        "type": "element",
                        "tagName": "strong",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "higher-order functions",
                                "position": { "start": { "line": 50, "column": 272, "offset": 2822 }, "end": { "line": 50, "column": 294, "offset": 2844 } }
                            }
                        ],
                        "position": { "start": { "line": 50, "column": 270, "offset": 2820 }, "end": { "line": 50, "column": 296, "offset": 2846 } }
                    },
                    {
                        "type": "text",
                        "value": ")",
                        "position": { "start": { "line": 50, "column": 296, "offset": 2846 }, "end": { "line": 50, "column": 297, "offset": 2847 } }
                    }
                ],
                "position": { "start": { "line": 50, "column": 1, "offset": 2551 }, "end": { "line": 50, "column": 297, "offset": 2847 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "It's common to wrap all your client code in a ",
                        "position": { "start": { "line": 52, "column": 1, "offset": 2849 }, "end": { "line": 52, "column": 47, "offset": 2895 } }
                    },
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": {},
                        "children": [{ "type": "text", "value": "load" }],
                        "position": { "start": { "line": 52, "column": 47, "offset": 2895 }, "end": { "line": 52, "column": 53, "offset": 2901 } }
                    },
                    {
                        "type": "text",
                        "value": " event listener on the ",
                        "position": { "start": { "line": 52, "column": 53, "offset": 2901 }, "end": { "line": 52, "column": 76, "offset": 2924 } }
                    },
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": {},
                        "children": [{ "type": "text", "value": "window" }],
                        "position": { "start": { "line": 52, "column": 76, "offset": 2924 }, "end": { "line": 52, "column": 84, "offset": 2932 } }
                    },
                    {
                        "type": "text",
                        "value": " object, which runs the callback function only when the page is ready:",
                        "position": { "start": { "line": 52, "column": 84, "offset": 2932 }, "end": { "line": 52, "column": 154, "offset": 3002 } }
                    }
                ],
                "position": { "start": { "line": 52, "column": 1, "offset": 2849 }, "end": { "line": 52, "column": 154, "offset": 3002 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [
                            { "type": "text", "value": "window.addEventListener('load', () => {\n    //window loaded\n    //do what you want\n});\n" }
                        ],
                        "position": { "start": { "line": 54, "column": 1, "offset": 3004 }, "end": { "line": 59, "column": 4, "offset": 3100 } }
                    }
                ],
                "position": { "start": { "line": 54, "column": 1, "offset": 3004 }, "end": { "line": 59, "column": 4, "offset": 3100 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Callbacks are used everywhere, not just in DOM events.",
                        "position": { "start": { "line": 61, "column": 1, "offset": 3102 }, "end": { "line": 61, "column": 55, "offset": 3156 } }
                    }
                ],
                "position": { "start": { "line": 61, "column": 1, "offset": 3102 }, "end": { "line": 61, "column": 55, "offset": 3156 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "One common example is by using timers:",
                        "position": { "start": { "line": 63, "column": 1, "offset": 3158 }, "end": { "line": 63, "column": 39, "offset": 3196 } }
                    }
                ],
                "position": { "start": { "line": 63, "column": 1, "offset": 3158 }, "end": { "line": 63, "column": 39, "offset": 3196 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [{ "type": "text", "value": "setTimeout(() => {\n    // runs after 2 seconds\n}, 2000);\n" }],
                        "position": { "start": { "line": 65, "column": 1, "offset": 3198 }, "end": { "line": 69, "column": 4, "offset": 3264 } }
                    }
                ],
                "position": { "start": { "line": 65, "column": 1, "offset": 3198 }, "end": { "line": 69, "column": 4, "offset": 3264 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "XHR requests also accept a callback, in this example by assigning a function to a property that will be called when a particular event occurs (in this case, the state of the request changes):",
                        "position": { "start": { "line": 71, "column": 1, "offset": 3266 }, "end": { "line": 71, "column": 192, "offset": 3457 } }
                    }
                ],
                "position": { "start": { "line": 71, "column": 1, "offset": 3266 }, "end": { "line": 71, "column": 192, "offset": 3457 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [
                            {
                                "type": "text",
                                "value": "const xhr = new XMLHttpRequest();\nxhr.onreadystatechange = () => {\n    if (xhr.readyState === 4) {\n        xhr.status === 200 ? console.log(xhr.responseText) : console.error('error');\n    }\n};\nxhr.open('GET', 'https://yoursite.com');\nxhr.send();\n"
                            }
                        ],
                        "position": { "start": { "line": 73, "column": 1, "offset": 3459 }, "end": { "line": 82, "column": 4, "offset": 3714 } }
                    }
                ],
                "position": { "start": { "line": 73, "column": 1, "offset": 3459 }, "end": { "line": 82, "column": 4, "offset": 3714 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Handling errors in callbacks",
                        "position": { "start": { "line": 84, "column": 4, "offset": 3719 }, "end": { "line": 84, "column": 32, "offset": 3747 } }
                    }
                ],
                "position": { "start": { "line": 84, "column": 1, "offset": 3716 }, "end": { "line": 84, "column": 32, "offset": 3747 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "How do you handle errors with callbacks? One very common strategy is to use what Node.js adopted: the first parameter in any callback function is the error object: ",
                        "position": { "start": { "line": 86, "column": 1, "offset": 3749 }, "end": { "line": 86, "column": 165, "offset": 3913 } }
                    },
                    {
                        "type": "element",
                        "tagName": "strong",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "error-first callbacks",
                                "position": { "start": { "line": 86, "column": 167, "offset": 3915 }, "end": { "line": 86, "column": 188, "offset": 3936 } }
                            }
                        ],
                        "position": { "start": { "line": 86, "column": 165, "offset": 3913 }, "end": { "line": 86, "column": 190, "offset": 3938 } }
                    }
                ],
                "position": { "start": { "line": 86, "column": 1, "offset": 3749 }, "end": { "line": 86, "column": 190, "offset": 3938 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "If there is no error, the object is ",
                        "position": { "start": { "line": 88, "column": 1, "offset": 3940 }, "end": { "line": 88, "column": 37, "offset": 3976 } }
                    },
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": {},
                        "children": [{ "type": "text", "value": "null" }],
                        "position": { "start": { "line": 88, "column": 37, "offset": 3976 }, "end": { "line": 88, "column": 43, "offset": 3982 } }
                    },
                    {
                        "type": "text",
                        "value": ". If there is an error, it contains some description of the error and other information.",
                        "position": { "start": { "line": 88, "column": 43, "offset": 3982 }, "end": { "line": 88, "column": 131, "offset": 4070 } }
                    }
                ],
                "position": { "start": { "line": 88, "column": 1, "offset": 3940 }, "end": { "line": 88, "column": 131, "offset": 4070 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [
                            {
                                "type": "text",
                                "value": "fs.readFile('/file.json', (err, data) => {\n    if (err !== null) {\n        //handle error\n        console.log(err);\n        return;\n    }\n\n    //no errors, process data\n    console.log(data);\n});\n"
                            }
                        ],
                        "position": { "start": { "line": 90, "column": 1, "offset": 4072 }, "end": { "line": 101, "column": 4, "offset": 4277 } }
                    }
                ],
                "position": { "start": { "line": 90, "column": 1, "offset": 4072 }, "end": { "line": 101, "column": 4, "offset": 4277 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The problem with callbacks",
                        "position": { "start": { "line": 103, "column": 4, "offset": 4282 }, "end": { "line": 103, "column": 30, "offset": 4308 } }
                    }
                ],
                "position": { "start": { "line": 103, "column": 1, "offset": 4279 }, "end": { "line": 103, "column": 30, "offset": 4308 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Callbacks are great for simple cases!",
                        "position": { "start": { "line": 105, "column": 1, "offset": 4310 }, "end": { "line": 105, "column": 38, "offset": 4347 } }
                    }
                ],
                "position": { "start": { "line": 105, "column": 1, "offset": 4310 }, "end": { "line": 105, "column": 38, "offset": 4347 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "However every callback adds a level of nesting, and when you have lots of callbacks, the code starts to be complicated very quickly:",
                        "position": { "start": { "line": 107, "column": 1, "offset": 4349 }, "end": { "line": 107, "column": 133, "offset": 4481 } }
                    }
                ],
                "position": { "start": { "line": 107, "column": 1, "offset": 4349 }, "end": { "line": 107, "column": 133, "offset": 4481 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [
                            {
                                "type": "text",
                                "value": "window.addEventListener('load', () => {\n    document.getElementById('button').addEventListener('click', () => {\n        setTimeout(() => {\n            items.forEach((item) => {\n                //your code here\n            });\n        }, 2000);\n    });\n});\n"
                            }
                        ],
                        "position": { "start": { "line": 109, "column": 1, "offset": 4483 }, "end": { "line": 119, "column": 4, "offset": 4748 } }
                    }
                ],
                "position": { "start": { "line": 109, "column": 1, "offset": 4483 }, "end": { "line": 119, "column": 4, "offset": 4748 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "This is just a simple 4-levels code, but I've seen much more levels of nesting and it's not fun.",
                        "position": { "start": { "line": 121, "column": 1, "offset": 4750 }, "end": { "line": 121, "column": 97, "offset": 4846 } }
                    }
                ],
                "position": { "start": { "line": 121, "column": 1, "offset": 4750 }, "end": { "line": 121, "column": 97, "offset": 4846 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "How do we solve this?",
                        "position": { "start": { "line": 123, "column": 1, "offset": 4848 }, "end": { "line": 123, "column": 22, "offset": 4869 } }
                    }
                ],
                "position": { "start": { "line": 123, "column": 1, "offset": 4848 }, "end": { "line": 123, "column": 22, "offset": 4869 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Alternatives to callbacks",
                        "position": { "start": { "line": 125, "column": 4, "offset": 4874 }, "end": { "line": 125, "column": 29, "offset": 4899 } }
                    }
                ],
                "position": { "start": { "line": 125, "column": 1, "offset": 4871 }, "end": { "line": 125, "column": 29, "offset": 4899 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Starting with ES6, JavaScript introduced several features that help us with asynchronous code that do not involve using callbacks: Promises (ES6) and Async/Await (ES2017).",
                        "position": { "start": { "line": 127, "column": 1, "offset": 4901 }, "end": { "line": 127, "column": 172, "offset": 5072 } }
                    }
                ],
                "position": { "start": { "line": 127, "column": 1, "offset": 4901 }, "end": { "line": 127, "column": 172, "offset": 5072 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "We all know that JavaScript is a ",
                        "position": { "start": { "line": 129, "column": 1, "offset": 5074 }, "end": { "line": 129, "column": 34, "offset": 5107 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 129, "column": 34, "offset": 5107 }, "end": { "line": 129, "column": 36, "offset": 5109 } }
                    },
                    {
                        "type": "text",
                        "value": "Single Threaded ",
                        "position": { "start": { "line": 129, "column": 36, "offset": 5109 }, "end": { "line": 129, "column": 52, "offset": 5125 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 129, "column": 52, "offset": 5125 }, "end": { "line": 129, "column": 54, "offset": 5127 } }
                    },
                    {
                        "type": "text",
                        "value": "language, this means, things happen one at a time. Consider the below code:",
                        "position": { "start": { "line": 129, "column": 54, "offset": 5127 }, "end": { "line": 129, "column": 129, "offset": 5202 } }
                    }
                ],
                "position": { "start": { "line": 129, "column": 1, "offset": 5074 }, "end": { "line": 129, "column": 129, "offset": 5202 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Here, the action is performed one line at a time. So, line 1 and 2 will be executed before line 3. At Line 3, we have a function call, so the actions at line 4 won't be executed until and unless the function is returned. This is called as ",
                        "position": { "start": { "line": 131, "column": 1, "offset": 5204 }, "end": { "line": 131, "column": 240, "offset": 5443 } }
                    },
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Synchronous Programming model",
                                "position": { "start": { "line": 131, "column": 241, "offset": 5444 }, "end": { "line": 131, "column": 270, "offset": 5473 } }
                            }
                        ],
                        "position": { "start": { "line": 131, "column": 240, "offset": 5443 }, "end": { "line": 131, "column": 271, "offset": 5474 } }
                    },
                    {
                        "type": "text",
                        "value": ". These type of statements are also known as ",
                        "position": { "start": { "line": 131, "column": 271, "offset": 5474 }, "end": { "line": 131, "column": 316, "offset": 5519 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 131, "column": 316, "offset": 5519 }, "end": { "line": 131, "column": 318, "offset": 5521 } }
                    },
                    {
                        "type": "text",
                        "value": "Blocking, ",
                        "position": { "start": { "line": 131, "column": 318, "offset": 5521 }, "end": { "line": 131, "column": 328, "offset": 5531 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 131, "column": 328, "offset": 5531 }, "end": { "line": 131, "column": 330, "offset": 5533 } }
                    },
                    {
                        "type": "text",
                        "value": "as no other statement will execute before the current statement is finished. This model makes use of a ",
                        "position": { "start": { "line": 131, "column": 330, "offset": 5533 }, "end": { "line": 131, "column": 433, "offset": 5636 } }
                    },
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "stack",
                                "position": { "start": { "line": 131, "column": 434, "offset": 5637 }, "end": { "line": 131, "column": 439, "offset": 5642 } }
                            }
                        ],
                        "position": { "start": { "line": 131, "column": 433, "offset": 5636 }, "end": { "line": 131, "column": 440, "offset": 5643 } }
                    },
                    {
                        "type": "text",
                        "value": " called as ",
                        "position": { "start": { "line": 131, "column": 440, "offset": 5643 }, "end": { "line": 131, "column": 451, "offset": 5654 } }
                    },
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "\"Call Stack\"",
                                "position": { "start": { "line": 131, "column": 452, "offset": 5655 }, "end": { "line": 131, "column": 464, "offset": 5667 } }
                            }
                        ],
                        "position": { "start": { "line": 131, "column": 451, "offset": 5654 }, "end": { "line": 131, "column": 465, "offset": 5668 } }
                    },
                    {
                        "type": "text",
                        "value": ".",
                        "position": { "start": { "line": 131, "column": 465, "offset": 5668 }, "end": { "line": 131, "column": 466, "offset": 5669 } }
                    }
                ],
                "position": { "start": { "line": 131, "column": 1, "offset": 5204 }, "end": { "line": 131, "column": 466, "offset": 5669 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "What is a Call Stack?",
                        "position": { "start": { "line": 133, "column": 4, "offset": 5674 }, "end": { "line": 133, "column": 25, "offset": 5695 } }
                    }
                ],
                "position": { "start": { "line": 133, "column": 1, "offset": 5671 }, "end": { "line": 133, "column": 25, "offset": 5695 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": {
                            "src": "https://miro.medium.com/freeze/max/27/1*fOsu7oCcYn-HpVREkMD8sg.gif?q=20",
                            "alt": "A GIF explaining the working of a Stack Data Structure."
                        },
                        "children": [],
                        "position": { "start": { "line": 135, "column": 1, "offset": 5697 }, "end": { "line": 135, "column": 132, "offset": 5828 } }
                    }
                ],
                "position": { "start": { "line": 135, "column": 1, "offset": 5697 }, "end": { "line": 135, "column": 132, "offset": 5828 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": {
                            "src": "https://miro.medium.com/max/360/1*fOsu7oCcYn-HpVREkMD8sg.gif",
                            "alt": "A GIF explaining the working of a Stack Data Structure."
                        },
                        "children": [],
                        "position": { "start": { "line": 137, "column": 1, "offset": 5830 }, "end": { "line": 137, "column": 121, "offset": 5950 } }
                    }
                ],
                "position": { "start": { "line": 137, "column": 1, "offset": 5830 }, "end": { "line": 137, "column": 121, "offset": 5950 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "A Stack Data Structure",
                        "position": { "start": { "line": 139, "column": 1, "offset": 5952 }, "end": { "line": 139, "column": 23, "offset": 5974 } }
                    }
                ],
                "position": { "start": { "line": 139, "column": 1, "offset": 5952 }, "end": { "line": 139, "column": 23, "offset": 5974 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "A Call Stack is a data structure which keeps the record of which statement is currently being executed. We know how a stack works, which is basically ",
                        "position": { "start": { "line": 141, "column": 1, "offset": 5976 }, "end": { "line": 141, "column": 151, "offset": 6126 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 141, "column": 151, "offset": 6126 }, "end": { "line": 141, "column": 153, "offset": 6128 } }
                    },
                    {
                        "type": "text",
                        "value": "\"Last In, First Out\" ",
                        "position": { "start": { "line": 141, "column": 153, "offset": 6128 }, "end": { "line": 141, "column": 174, "offset": 6149 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 141, "column": 174, "offset": 6149 }, "end": { "line": 141, "column": 176, "offset": 6151 } }
                    },
                    {
                        "type": "text",
                        "value": "approach i.e. the last element pushed in will be the first to be popped out.",
                        "position": { "start": { "line": 141, "column": 176, "offset": 6151 }, "end": { "line": 141, "column": 252, "offset": 6227 } }
                    }
                ],
                "position": { "start": { "line": 141, "column": 1, "offset": 5976 }, "end": { "line": 141, "column": 252, "offset": 6227 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "So, when we encounter any statement, it is pushed to the top of the stack and is executed. Once the execution is completed, it is then popped out of the stack. If one of those statement is a Function, we push it on to the top of the stack and it is popped off only when we return from the function.",
                        "position": { "start": { "line": 143, "column": 1, "offset": 6229 }, "end": { "line": 143, "column": 299, "offset": 6527 } }
                    }
                ],
                "position": { "start": { "line": 143, "column": 1, "offset": 6229 }, "end": { "line": 143, "column": 299, "offset": 6527 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Let's understand it with an example.",
                        "position": { "start": { "line": 145, "column": 1, "offset": 6529 }, "end": { "line": 145, "column": 37, "offset": 6565 } }
                    }
                ],
                "position": { "start": { "line": 145, "column": 1, "offset": 6529 }, "end": { "line": 145, "column": 37, "offset": 6565 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Output:",
                        "position": { "start": { "line": 147, "column": 1, "offset": 6567 }, "end": { "line": 147, "column": 8, "offset": 6574 } }
                    },
                    {
                        "type": "element",
                        "tagName": "br",
                        "properties": {},
                        "children": [],
                        "position": { "start": { "line": 147, "column": 8, "offset": 6574 }, "end": { "line": 148, "column": 1, "offset": 6576 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "text",
                        "value": "125",
                        "position": { "start": { "line": 148, "column": 1, "offset": 6576 }, "end": { "line": 148, "column": 4, "offset": 6579 } }
                    }
                ],
                "position": { "start": { "line": 147, "column": 1, "offset": 6567 }, "end": { "line": 148, "column": 4, "offset": 6579 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "In the beginning of the execution of the code by the engine, the call stack will be empty. Then, the following will happen:",
                        "position": { "start": { "line": 150, "column": 1, "offset": 6581 }, "end": { "line": 150, "column": 124, "offset": 6704 } }
                    }
                ],
                "position": { "start": { "line": 150, "column": 1, "offset": 6581 }, "end": { "line": 150, "column": 124, "offset": 6704 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://miro.medium.com/max/27/1*CrYp7k87He63XLd0qLYrCw.png?q=20", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 152, "column": 1, "offset": 6706 }, "end": { "line": 152, "column": 70, "offset": 6775 } }
                    }
                ],
                "position": { "start": { "line": 152, "column": 1, "offset": 6706 }, "end": { "line": 152, "column": 70, "offset": 6775 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://miro.medium.com/max/630/1*CrYp7k87He63XLd0qLYrCw.png", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 154, "column": 1, "offset": 6777 }, "end": { "line": 154, "column": 66, "offset": 6842 } }
                    }
                ],
                "position": { "start": { "line": 154, "column": 1, "offset": 6777 }, "end": { "line": 154, "column": 66, "offset": 6842 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Working of the Call Stack during program execution.",
                        "position": { "start": { "line": 156, "column": 1, "offset": 6844 }, "end": { "line": 156, "column": 52, "offset": 6895 } }
                    }
                ],
                "position": { "start": { "line": 156, "column": 1, "offset": 6844 }, "end": { "line": 156, "column": 52, "offset": 6895 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Since these all are ",
                        "position": { "start": { "line": 158, "column": 1, "offset": 6897 }, "end": { "line": 158, "column": 21, "offset": 6917 } }
                    },
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Blocking Statements",
                                "position": { "start": { "line": 158, "column": 22, "offset": 6918 }, "end": { "line": 158, "column": 41, "offset": 6937 } }
                            }
                        ],
                        "position": { "start": { "line": 158, "column": 21, "offset": 6917 }, "end": { "line": 158, "column": 42, "offset": 6938 } }
                    },
                    {
                        "type": "text",
                        "value": ", the are pushed into the stack and are popped out once they are executed. The next statement has to wait till the previous statement is popped out of the stack.",
                        "position": { "start": { "line": 158, "column": 42, "offset": 6938 }, "end": { "line": 158, "column": 203, "offset": 7099 } }
                    }
                ],
                "position": { "start": { "line": 158, "column": 1, "offset": 6897 }, "end": { "line": 158, "column": 203, "offset": 7099 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Fun Fact: The above explained process is how a stack trace is constructed. It is basically the snapshot of the stack at the time of any exception. Also, this is the same reason why the \"RangeError: Maximum call stack size exceeded\" error is also thrown. This happens when the number of function calls in the Call Stack exceeds the size of the stack.",
                                "position": { "start": { "line": 160, "column": 3, "offset": 7103 }, "end": { "line": 160, "column": 352, "offset": 7452 } }
                            }
                        ],
                        "position": { "start": { "line": 160, "column": 3, "offset": 7103 }, "end": { "line": 160, "column": 352, "offset": 7452 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 160, "column": 1, "offset": 7101 }, "end": { "line": 160, "column": 352, "offset": 7452 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "To further understand the working of a Call Stack, observe the execution of the below code:",
                        "position": { "start": { "line": 162, "column": 1, "offset": 7454 }, "end": { "line": 162, "column": 92, "offset": 7545 } }
                    }
                ],
                "position": { "start": { "line": 162, "column": 1, "offset": 7454 }, "end": { "line": 162, "column": 92, "offset": 7545 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": {
                            "src": "https://miro.medium.com/freeze/max/27/1*FB2VAMUAMVJpzxMBkGDR7Q.gif?q=20",
                            "alt": "Using animation to explain how the Call Stack actually executes the code one statement at a time."
                        },
                        "children": [],
                        "position": { "start": { "line": 164, "column": 1, "offset": 7547 }, "end": { "line": 164, "column": 174, "offset": 7720 } }
                    }
                ],
                "position": { "start": { "line": 164, "column": 1, "offset": 7547 }, "end": { "line": 164, "column": 174, "offset": 7720 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": {
                            "src": "https://miro.medium.com/max/360/1*FB2VAMUAMVJpzxMBkGDR7Q.gif",
                            "alt": "Using animation to explain how the Call Stack actually executes the code one statement at a time."
                        },
                        "children": [],
                        "position": { "start": { "line": 166, "column": 1, "offset": 7722 }, "end": { "line": 166, "column": 163, "offset": 7884 } }
                    }
                ],
                "position": { "start": { "line": 166, "column": 1, "offset": 7722 }, "end": { "line": 166, "column": 163, "offset": 7884 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Why is having Single Thread considered a problem then?",
                        "position": { "start": { "line": 168, "column": 4, "offset": 7889 }, "end": { "line": 168, "column": 58, "offset": 7943 } }
                    }
                ],
                "position": { "start": { "line": 168, "column": 1, "offset": 7886 }, "end": { "line": 168, "column": 58, "offset": 7943 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "To answer this, imagine a complex algorithm, maybe one which involves such a function which takes user's data and sends it on a network for processing. Once the data is processed then only the function returns some value and the user is allowed to proceed ahead. Keep in mind that this algorithm is running on a browser. Can you guess the problem now?",
                        "position": { "start": { "line": 170, "column": 1, "offset": 7945 }, "end": { "line": 170, "column": 352, "offset": 8296 } }
                    }
                ],
                "position": { "start": { "line": 170, "column": 1, "offset": 7945 }, "end": { "line": 170, "column": 352, "offset": 8296 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Yes, having a single thread executing this algorithm will involve ",
                        "position": { "start": { "line": 172, "column": 1, "offset": 8298 }, "end": { "line": 172, "column": 67, "offset": 8364 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 172, "column": 67, "offset": 8364 }, "end": { "line": 172, "column": 69, "offset": 8366 } }
                    },
                    {
                        "type": "text",
                        "value": "Blocking Statements. ",
                        "position": { "start": { "line": 172, "column": 69, "offset": 8366 }, "end": { "line": 172, "column": 90, "offset": 8387 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 172, "column": 90, "offset": 8387 }, "end": { "line": 172, "column": 92, "offset": 8389 } }
                    },
                    {
                        "type": "text",
                        "value": "These statements will be pushed into the Call Stack, one at a time. The next statement has to wait for the previous statement to finish to start it's own execution. So, if the Call Stack is blocked by this complex function, then the Browser will be stuck as it can't execute anything else and has to wait for the function to be popped from the call stack.",
                        "position": { "start": { "line": 172, "column": 92, "offset": 8389 }, "end": { "line": 172, "column": 447, "offset": 8744 } }
                    }
                ],
                "position": { "start": { "line": 172, "column": 1, "offset": 8298 }, "end": { "line": 172, "column": 447, "offset": 8744 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Most of the browsers will not wait for much long and will give a pop up saying that the Page is Unresponsive, asking whether you want to terminate the web page.",
                        "position": { "start": { "line": 174, "column": 1, "offset": 8746 }, "end": { "line": 174, "column": 161, "offset": 8906 } }
                    }
                ],
                "position": { "start": { "line": 174, "column": 1, "offset": 8746 }, "end": { "line": 174, "column": 161, "offset": 8906 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "What is the Solution to this problem?",
                        "position": { "start": { "line": 176, "column": 4, "offset": 8911 }, "end": { "line": 176, "column": 41, "offset": 8948 } }
                    }
                ],
                "position": { "start": { "line": 176, "column": 1, "offset": 8908 }, "end": { "line": 176, "column": 41, "offset": 8948 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The solution is simple, we need to use ",
                        "position": { "start": { "line": 178, "column": 1, "offset": 8950 }, "end": { "line": 178, "column": 40, "offset": 8989 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 178, "column": 40, "offset": 8989 }, "end": { "line": 178, "column": 42, "offset": 8991 } }
                    },
                    {
                        "type": "text",
                        "value": "Asynchronous Programming model. ",
                        "position": { "start": { "line": 178, "column": 42, "offset": 8991 }, "end": { "line": 178, "column": 74, "offset": 9023 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 178, "column": 74, "offset": 9023 }, "end": { "line": 178, "column": 76, "offset": 9025 } }
                    },
                    {
                        "type": "text",
                        "value": "When any asynchronous action is started, the rest of the program continues to execute normally. Then, as soon as the asynchronous action is completed, the program is informed about it and it accesses that particular result. In short, this model allows multiple things to happen at the same time.",
                        "position": { "start": { "line": 178, "column": 76, "offset": 9025 }, "end": { "line": 178, "column": 371, "offset": 9320 } }
                    }
                ],
                "position": { "start": { "line": 178, "column": 1, "offset": 8950 }, "end": { "line": 178, "column": 371, "offset": 9320 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "This is clear from the above explanation, that the rest of the code is not ",
                        "position": { "start": { "line": 180, "column": 1, "offset": 9322 }, "end": { "line": 180, "column": 76, "offset": 9397 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 180, "column": 76, "offset": 9397 }, "end": { "line": 180, "column": 78, "offset": 9399 } }
                    },
                    {
                        "type": "text",
                        "value": "\"blocked\" ",
                        "position": { "start": { "line": 180, "column": 78, "offset": 9399 }, "end": { "line": 180, "column": 88, "offset": 9409 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 180, "column": 88, "offset": 9409 }, "end": { "line": 180, "column": 90, "offset": 9411 } }
                    },
                    {
                        "type": "text",
                        "value": "when any asynchronous code is executed. This is the reason these statements are also known ",
                        "position": { "start": { "line": 180, "column": 90, "offset": 9411 }, "end": { "line": 180, "column": 181, "offset": 9502 } }
                    },
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "\"Non-Blocking Statements\"",
                                "position": { "start": { "line": 180, "column": 182, "offset": 9503 }, "end": { "line": 180, "column": 207, "offset": 9528 } }
                            }
                        ],
                        "position": { "start": { "line": 180, "column": 181, "offset": 9502 }, "end": { "line": 180, "column": 208, "offset": 9529 } }
                    },
                    {
                        "type": "text",
                        "value": ".",
                        "position": { "start": { "line": 180, "column": 208, "offset": 9529 }, "end": { "line": 180, "column": 209, "offset": 9530 } }
                    }
                ],
                "position": { "start": { "line": 180, "column": 1, "offset": 9322 }, "end": { "line": 180, "column": 209, "offset": 9530 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Let's try to understand how are Non-Blocking Statements executed in JavaScript",
                        "position": { "start": { "line": 182, "column": 4, "offset": 9535 }, "end": { "line": 182, "column": 82, "offset": 9613 } }
                    }
                ],
                "position": { "start": { "line": 182, "column": 1, "offset": 9532 }, "end": { "line": 182, "column": 82, "offset": 9613 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Consider the code below,",
                        "position": { "start": { "line": 184, "column": 1, "offset": 9615 }, "end": { "line": 184, "column": 25, "offset": 9639 } }
                    }
                ],
                "position": { "start": { "line": 184, "column": 1, "offset": 9615 }, "end": { "line": 184, "column": 25, "offset": 9639 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Output:",
                        "position": { "start": { "line": 186, "column": 1, "offset": 9641 }, "end": { "line": 186, "column": 8, "offset": 9648 } }
                    },
                    {
                        "type": "element",
                        "tagName": "br",
                        "properties": {},
                        "children": [],
                        "position": { "start": { "line": 186, "column": 8, "offset": 9648 }, "end": { "line": 187, "column": 1, "offset": 9650 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "text",
                        "value": "10",
                        "position": { "start": { "line": 187, "column": 1, "offset": 9650 }, "end": { "line": 187, "column": 3, "offset": 9652 } }
                    },
                    {
                        "type": "element",
                        "tagName": "br",
                        "properties": {},
                        "children": [],
                        "position": { "start": { "line": 187, "column": 3, "offset": 9652 }, "end": { "line": 188, "column": 1, "offset": 9654 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "text",
                        "value": "20",
                        "position": { "start": { "line": 188, "column": 1, "offset": 9654 }, "end": { "line": 188, "column": 3, "offset": 9656 } }
                    },
                    {
                        "type": "element",
                        "tagName": "br",
                        "properties": {},
                        "children": [],
                        "position": { "start": { "line": 188, "column": 3, "offset": 9656 }, "end": { "line": 189, "column": 1, "offset": 9658 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "text",
                        "value": "200 (after 1 second)",
                        "position": { "start": { "line": 189, "column": 1, "offset": 9658 }, "end": { "line": 189, "column": 21, "offset": 9678 } }
                    }
                ],
                "position": { "start": { "line": 186, "column": 1, "offset": 9641 }, "end": { "line": 189, "column": 21, "offset": 9678 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "How did this happen? We saw that each statement is executed one at a time using the Call Stack, and the next statement waits for the previous one to complete it's execution, right? Well, this is nothing but the magic of Asynchronous code.",
                        "position": { "start": { "line": 191, "column": 1, "offset": 9680 }, "end": { "line": 191, "column": 239, "offset": 9918 } }
                    }
                ],
                "position": { "start": { "line": 191, "column": 1, "offset": 9680 }, "end": { "line": 191, "column": 239, "offset": 9918 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "As mentioned a few paragraphs above, an Asynchronous statement is ",
                        "position": { "start": { "line": 193, "column": 1, "offset": 9920 }, "end": { "line": 193, "column": 67, "offset": 9986 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 193, "column": 67, "offset": 9986 }, "end": { "line": 193, "column": 69, "offset": 9988 } }
                    },
                    {
                        "type": "text",
                        "value": "\"Non-Blocking\". ",
                        "position": { "start": { "line": 193, "column": 69, "offset": 9988 }, "end": { "line": 193, "column": 85, "offset": 10004 } }
                    },
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "This means, this type of statements do not block the normal execution of other statements",
                                "position": { "start": { "line": 193, "column": 86, "offset": 10005 }, "end": { "line": 193, "column": 175, "offset": 10094 } }
                            }
                        ],
                        "position": { "start": { "line": 193, "column": 85, "offset": 10004 }, "end": { "line": 193, "column": 176, "offset": 10095 } }
                    },
                    {
                        "type": "text",
                        "value": ". ",
                        "position": { "start": { "line": 193, "column": 176, "offset": 10095 }, "end": { "line": 193, "column": 178, "offset": 10097 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 193, "column": 178, "offset": 10097 }, "end": { "line": 193, "column": 180, "offset": 10099 } }
                    },
                    {
                        "type": "text",
                        "value": "This clearly points to the fact that there is actually some difference in the way the Synchronous and Asynchronous statements are processed. So what's the secret behind JavaScript's Asynchronous programming? The answer to this question is ",
                        "position": { "start": { "line": 193, "column": 180, "offset": 10099 }, "end": { "line": 193, "column": 419, "offset": 10338 } }
                    },
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "\"Event Loop\".",
                                "position": { "start": { "line": 193, "column": 420, "offset": 10339 }, "end": { "line": 193, "column": 433, "offset": 10352 } }
                            }
                        ],
                        "position": { "start": { "line": 193, "column": 419, "offset": 10338 }, "end": { "line": 193, "column": 434, "offset": 10353 } }
                    }
                ],
                "position": { "start": { "line": 193, "column": 1, "offset": 9920 }, "end": { "line": 193, "column": 434, "offset": 10353 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Understanding JavaScript Event Loop",
                        "position": { "start": { "line": 195, "column": 4, "offset": 10358 }, "end": { "line": 195, "column": 39, "offset": 10393 } }
                    }
                ],
                "position": { "start": { "line": 195, "column": 1, "offset": 10355 }, "end": { "line": 195, "column": 39, "offset": 10393 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "If you are able to follow till now, this means you are aware about something known as a JavaScript Engine or Runtime. Most popular of them is Google's V8 engine (it is used inside Chrome, Node.js, etc). It consists of a Memory Heap and a Call Stack (Yes, the same Call Stack that we discussed above). But when you try to dig into the V8 code base and try to find things like ",
                        "position": { "start": { "line": 197, "column": 1, "offset": 10395 }, "end": { "line": 197, "column": 376, "offset": 10770 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 197, "column": 376, "offset": 10770 }, "end": { "line": 197, "column": 378, "offset": 10772 } }
                    },
                    {
                        "type": "text",
                        "value": "\"DOM\", \"HttpRequest\", ",
                        "position": { "start": { "line": 197, "column": 378, "offset": 10772 }, "end": { "line": 197, "column": 400, "offset": 10794 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 197, "column": 400, "offset": 10794 }, "end": { "line": 197, "column": 402, "offset": 10796 } }
                    },
                    {
                        "type": "text",
                        "value": "etc, you wont find them anywhere as they do not exist in V8. Then how is JavaScript able to handle Asynchronous operations? Just kind of statements are traditionally performed by ",
                        "position": { "start": { "line": 197, "column": 402, "offset": 10796 }, "end": { "line": 197, "column": 581, "offset": 10975 } }
                    },
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Threads",
                                "position": { "start": { "line": 197, "column": 582, "offset": 10976 }, "end": { "line": 197, "column": 589, "offset": 10983 } }
                            }
                        ],
                        "position": { "start": { "line": 197, "column": 581, "offset": 10975 }, "end": { "line": 197, "column": 590, "offset": 10984 } }
                    },
                    {
                        "type": "text",
                        "value": " in languages like ",
                        "position": { "start": { "line": 197, "column": 590, "offset": 10984 }, "end": { "line": 197, "column": 609, "offset": 11003 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 197, "column": 609, "offset": 11003 }, "end": { "line": 197, "column": 611, "offset": 11005 } }
                    },
                    {
                        "type": "text",
                        "value": "Ruby ",
                        "position": { "start": { "line": 197, "column": 611, "offset": 11005 }, "end": { "line": 197, "column": 616, "offset": 11010 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 197, "column": 616, "offset": 11010 }, "end": { "line": 197, "column": 618, "offset": 11012 } }
                    },
                    {
                        "type": "text",
                        "value": "or ",
                        "position": { "start": { "line": 197, "column": 618, "offset": 11012 }, "end": { "line": 197, "column": 621, "offset": 11015 } }
                    },
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Java",
                                "position": { "start": { "line": 197, "column": 622, "offset": 11016 }, "end": { "line": 197, "column": 626, "offset": 11020 } }
                            }
                        ],
                        "position": { "start": { "line": 197, "column": 621, "offset": 11015 }, "end": { "line": 197, "column": 627, "offset": 11021 } }
                    },
                    {
                        "type": "text",
                        "value": ".",
                        "position": { "start": { "line": 197, "column": 627, "offset": 11021 }, "end": { "line": 197, "column": 628, "offset": 11022 } }
                    }
                ],
                "position": { "start": { "line": 197, "column": 1, "offset": 10395 }, "end": { "line": 197, "column": 628, "offset": 11022 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The reason is, that the browser is more than just the runtime. To support the Runtime, the browser also provides WebAPIs, which are effectively like threads but we can't access them like normal threads, instead we can make calls to them to achieve some functionality. In case of Node.js, instead of WebAPIs, we have C++ APIs where all the threading and stuff is hidden from us at C++ side. Along with WebAPIs, there is another thing involved in this process, which is called ",
                        "position": { "start": { "line": 199, "column": 1, "offset": 11024 }, "end": { "line": 199, "column": 476, "offset": 11499 } }
                    },
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "\"Event (or Callback) Queue\"",
                                "position": { "start": { "line": 199, "column": 477, "offset": 11500 }, "end": { "line": 199, "column": 504, "offset": 11527 } }
                            }
                        ],
                        "position": { "start": { "line": 199, "column": 476, "offset": 11499 }, "end": { "line": 199, "column": 505, "offset": 11528 } }
                    },
                    {
                        "type": "text",
                        "value": ". Collectively, all these components with the help of ",
                        "position": { "start": { "line": 199, "column": 505, "offset": 11528 }, "end": { "line": 199, "column": 559, "offset": 11582 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 199, "column": 559, "offset": 11582 }, "end": { "line": 199, "column": 561, "offset": 11584 } }
                    },
                    {
                        "type": "text",
                        "value": "\"Event Loop\" ",
                        "position": { "start": { "line": 199, "column": 561, "offset": 11584 }, "end": { "line": 199, "column": 574, "offset": 11597 } }
                    },
                    {
                        "type": "text",
                        "value": "*",
                        "position": { "start": { "line": 199, "column": 574, "offset": 11597 }, "end": { "line": 199, "column": 576, "offset": 11599 } }
                    },
                    {
                        "type": "text",
                        "value": "helps JavaScript perform asynchronous opetations. Consider the below diagram:",
                        "position": { "start": { "line": 199, "column": 576, "offset": 11599 }, "end": { "line": 199, "column": 653, "offset": 11676 } }
                    }
                ],
                "position": { "start": { "line": 199, "column": 1, "offset": 11024 }, "end": { "line": 199, "column": 653, "offset": 11676 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": {
                            "src": "https://miro.medium.com/max/630/1*eiYb9y9q_dODrq3XLNEZMQ.png",
                            "alt": "A Diagram explaining the structure of the Event Loop."
                        },
                        "children": [],
                        "position": { "start": { "line": 201, "column": 1, "offset": 11678 }, "end": { "line": 201, "column": 119, "offset": 11796 } }
                    }
                ],
                "position": { "start": { "line": 201, "column": 1, "offset": 11678 }, "end": { "line": 201, "column": 119, "offset": 11796 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Event Loop in JavaScript--- ",
                        "position": { "start": { "line": 203, "column": 1, "offset": 11798 }, "end": { "line": 203, "column": 29, "offset": 11826 } }
                    },
                    {
                        "type": "element",
                        "tagName": "a",
                        "properties": { "href": "https://medium.com/@aditya.shukla278" },
                        "children": [
                            {
                                "type": "text",
                                "value": "https://medium.com/@aditya.shukla278",
                                "position": { "start": { "line": 203, "column": 30, "offset": 11827 }, "end": { "line": 203, "column": 66, "offset": 11863 } }
                            }
                        ],
                        "position": { "start": { "line": 203, "column": 29, "offset": 11826 }, "end": { "line": 203, "column": 67, "offset": 11864 } }
                    }
                ],
                "position": { "start": { "line": 203, "column": 1, "offset": 11798 }, "end": { "line": 203, "column": 67, "offset": 11864 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "ol",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Javascript Engine/Runtime: Javascript engines like Google V8, SpiderMonkey, Chakra etc. provide the JavaScript Runtime. It consists of two components, ",
                                "position": { "start": { "line": 205, "column": 5, "offset": 11870 }, "end": { "line": 205, "column": 156, "offset": 12021 } }
                            },
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Call Stack",
                                        "position": {
                                            "start": { "line": 205, "column": 157, "offset": 12022 },
                                            "end": { "line": 205, "column": 167, "offset": 12032 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 205, "column": 156, "offset": 12021 }, "end": { "line": 205, "column": 168, "offset": 12033 } }
                            },
                            {
                                "type": "text",
                                "value": " and ",
                                "position": { "start": { "line": 205, "column": 168, "offset": 12033 }, "end": { "line": 205, "column": 173, "offset": 12038 } }
                            },
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Memory Heap",
                                        "position": {
                                            "start": { "line": 205, "column": 174, "offset": 12039 },
                                            "end": { "line": 205, "column": 185, "offset": 12050 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 205, "column": 173, "offset": 12038 }, "end": { "line": 205, "column": 186, "offset": 12051 } }
                            },
                            {
                                "type": "text",
                                "value": ". The Heap is basically used to maintain object and function references which are required by call stack.",
                                "position": { "start": { "line": 205, "column": 186, "offset": 12051 }, "end": { "line": 205, "column": 291, "offset": 12156 } }
                            }
                        ],
                        "position": { "start": { "line": 205, "column": 1, "offset": 11866 }, "end": { "line": 205, "column": 291, "offset": 12156 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "WebAPIs: The Browser provides the APIs like setTimeout, setInterval, document etc. So, while executing the code if a statement with callback is pushed into the stack, that statement is directly popped out of the stack and then these APIs are responsible to add those callbacks into the ",
                                "position": { "start": { "line": 206, "column": 5, "offset": 12161 }, "end": { "line": 206, "column": 291, "offset": 12447 } }
                            },
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "event queue",
                                        "position": {
                                            "start": { "line": 206, "column": 292, "offset": 12448 },
                                            "end": { "line": 206, "column": 303, "offset": 12459 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 206, "column": 291, "offset": 12447 }, "end": { "line": 206, "column": 304, "offset": 12460 } }
                            },
                            {
                                "type": "text",
                                "value": ". For eg. ",
                                "position": { "start": { "line": 206, "column": 304, "offset": 12460 }, "end": { "line": 206, "column": 314, "offset": 12470 } }
                            },
                            {
                                "type": "element",
                                "tagName": "code",
                                "properties": {},
                                "children": [{ "type": "text", "value": "setTimeout(cb1, 2000)" }],
                                "position": { "start": { "line": 206, "column": 314, "offset": 12470 }, "end": { "line": 206, "column": 337, "offset": 12493 } }
                            },
                            {
                                "type": "text",
                                "value": " will add the callback function ",
                                "position": { "start": { "line": 206, "column": 337, "offset": 12493 }, "end": { "line": 206, "column": 369, "offset": 12525 } }
                            },
                            {
                                "type": "element",
                                "tagName": "code",
                                "properties": {},
                                "children": [{ "type": "text", "value": "cb1" }],
                                "position": { "start": { "line": 206, "column": 369, "offset": 12525 }, "end": { "line": 206, "column": 374, "offset": 12530 } }
                            },
                            {
                                "type": "text",
                                "value": " in event queue after the 2 seconds.",
                                "position": { "start": { "line": 206, "column": 374, "offset": 12530 }, "end": { "line": 206, "column": 410, "offset": 12566 } }
                            }
                        ],
                        "position": { "start": { "line": 206, "column": 1, "offset": 12157 }, "end": { "line": 206, "column": 410, "offset": 12566 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Event Queue: Event queue basically contains callback functions which are to be added back into the call stack by event loop. This is the reason they are also called as ",
                                "position": { "start": { "line": 207, "column": 5, "offset": 12571 }, "end": { "line": 207, "column": 173, "offset": 12739 } }
                            },
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "\"Callback Queue\"",
                                        "position": {
                                            "start": { "line": 207, "column": 174, "offset": 12740 },
                                            "end": { "line": 207, "column": 190, "offset": 12756 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 207, "column": 173, "offset": 12739 }, "end": { "line": 207, "column": 191, "offset": 12757 } }
                            },
                            {
                                "type": "text",
                                "value": ".",
                                "position": { "start": { "line": 207, "column": 191, "offset": 12757 }, "end": { "line": 207, "column": 192, "offset": 12758 } }
                            }
                        ],
                        "position": { "start": { "line": 207, "column": 1, "offset": 12567 }, "end": { "line": 207, "column": 192, "offset": 12758 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Event Loop: Now, the Event Queue has the callback function which is needed to be pushed back to the Call Stack, here this ",
                                "position": { "start": { "line": 208, "column": 5, "offset": 12763 }, "end": { "line": 208, "column": 127, "offset": 12885 } }
                            },
                            {
                                "type": "text",
                                "value": "*",
                                "position": { "start": { "line": 208, "column": 127, "offset": 12885 }, "end": { "line": 208, "column": 129, "offset": 12887 } }
                            },
                            {
                                "type": "text",
                                "value": "Event loop ",
                                "position": { "start": { "line": 208, "column": 129, "offset": 12887 }, "end": { "line": 208, "column": 140, "offset": 12898 } }
                            },
                            {
                                "type": "text",
                                "value": "*",
                                "position": { "start": { "line": 208, "column": 140, "offset": 12898 }, "end": { "line": 208, "column": 142, "offset": 12900 } }
                            },
                            {
                                "type": "text",
                                "value": "comes into picture. It is responsible to push the callbacks available in event queue to the call stack. Event loop pushes a callback function only when the call stack is empty.",
                                "position": { "start": { "line": 208, "column": 142, "offset": 12900 }, "end": { "line": 208, "column": 318, "offset": 13076 } }
                            }
                        ],
                        "position": { "start": { "line": 208, "column": 1, "offset": 12759 }, "end": { "line": 208, "column": 318, "offset": 13076 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 205, "column": 1, "offset": 11866 }, "end": { "line": 208, "column": 318, "offset": 13076 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "That is too much of words, I bet you must be sleepy by now. Consider the below code to understand the working of the Event Loop.",
                        "position": { "start": { "line": 210, "column": 1, "offset": 13078 }, "end": { "line": 210, "column": 129, "offset": 13206 } }
                    }
                ],
                "position": { "start": { "line": 210, "column": 1, "offset": 13078 }, "end": { "line": 210, "column": 129, "offset": 13206 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": {
                            "src": "https://miro.medium.com/freeze/max/27/1*IneExnDz3O-NAk40aY3vKQ.gif?q=20",
                            "alt": "Explaining the working of the Event Loop using Animated GIF."
                        },
                        "children": [],
                        "position": { "start": { "line": 212, "column": 1, "offset": 13208 }, "end": { "line": 212, "column": 137, "offset": 13344 } }
                    }
                ],
                "position": { "start": { "line": 212, "column": 1, "offset": 13208 }, "end": { "line": 212, "column": 137, "offset": 13344 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": {
                            "src": "https://miro.medium.com/max/630/1*IneExnDz3O-NAk40aY3vKQ.gif",
                            "alt": "Explaining the working of the Event Loop using Animated GIF."
                        },
                        "children": [],
                        "position": { "start": { "line": 214, "column": 1, "offset": 13346 }, "end": { "line": 214, "column": 126, "offset": 13471 } }
                    }
                ],
                "position": { "start": { "line": 214, "column": 1, "offset": 13346 }, "end": { "line": 214, "column": 126, "offset": 13471 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Point to be noted here: Event loop will only add the callback from the event queue to the call stack when it finds the call stack empty. If JavaScript's main thread is busy executing a long running function, it would keep the callback in the event queue. That is why it is important that we make sure that the main call stack does not have long running functions which may block it, as that time browser would not be able to respond to user events as they would be stuck in event queue.",
                                "position": { "start": { "line": 216, "column": 3, "offset": 13475 }, "end": { "line": 216, "column": 489, "offset": 13961 } }
                            }
                        ],
                        "position": { "start": { "line": 216, "column": 3, "offset": 13475 }, "end": { "line": 216, "column": 489, "offset": 13961 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 216, "column": 1, "offset": 13473 }, "end": { "line": 216, "column": 489, "offset": 13961 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://miro.medium.com/max/612/1*yfN8N5u3n2z9-dD6cxUpaw.jpeg", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 218, "column": 1, "offset": 13963 }, "end": { "line": 218, "column": 67, "offset": 14029 } }
                    }
                ],
                "position": { "start": { "line": 218, "column": 1, "offset": 13963 }, "end": { "line": 218, "column": 67, "offset": 14029 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "To Summarize the above topics ---",
                        "position": { "start": { "line": 220, "column": 4, "offset": 14034 }, "end": { "line": 220, "column": 37, "offset": 14067 } }
                    }
                ],
                "position": { "start": { "line": 220, "column": 1, "offset": 14031 }, "end": { "line": 220, "column": 37, "offset": 14067 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "ul",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "We understood that JavaScript is a ",
                                "position": { "start": { "line": 222, "column": 5, "offset": 14073 }, "end": { "line": 222, "column": 40, "offset": 14108 } }
                            },
                            {
                                "type": "text",
                                "value": "*",
                                "position": { "start": { "line": 222, "column": 40, "offset": 14108 }, "end": { "line": 222, "column": 42, "offset": 14110 } }
                            },
                            {
                                "type": "text",
                                "value": "Single Threaded ",
                                "position": { "start": { "line": 222, "column": 42, "offset": 14110 }, "end": { "line": 222, "column": 58, "offset": 14126 } }
                            },
                            {
                                "type": "text",
                                "value": "*",
                                "position": { "start": { "line": 222, "column": 58, "offset": 14126 }, "end": { "line": 222, "column": 60, "offset": 14128 } }
                            },
                            {
                                "type": "text",
                                "value": "language, which basically means that the statements are executed one at a time.",
                                "position": { "start": { "line": 222, "column": 60, "offset": 14128 }, "end": { "line": 222, "column": 139, "offset": 14207 } }
                            }
                        ],
                        "position": { "start": { "line": 222, "column": 1, "offset": 14069 }, "end": { "line": 222, "column": 139, "offset": 14207 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "These statements block the execution of the immediate next statements until they are completed executed. Because of this reason they are also known as ",
                                "position": { "start": { "line": 223, "column": 5, "offset": 14212 }, "end": { "line": 223, "column": 156, "offset": 14363 } }
                            },
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Blocking Statements.",
                                        "position": {
                                            "start": { "line": 223, "column": 157, "offset": 14364 },
                                            "end": { "line": 223, "column": 177, "offset": 14384 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 223, "column": 156, "offset": 14363 }, "end": { "line": 223, "column": 178, "offset": 14385 } }
                            }
                        ],
                        "position": { "start": { "line": 223, "column": 1, "offset": 14208 }, "end": { "line": 223, "column": 178, "offset": 14385 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "The statements are executed using a ",
                                "position": { "start": { "line": 224, "column": 5, "offset": 14390 }, "end": { "line": 224, "column": 41, "offset": 14426 } }
                            },
                            {
                                "type": "text",
                                "value": "*",
                                "position": { "start": { "line": 224, "column": 41, "offset": 14426 }, "end": { "line": 224, "column": 43, "offset": 14428 } }
                            },
                            {
                                "type": "text",
                                "value": "Call Stack. ",
                                "position": { "start": { "line": 224, "column": 43, "offset": 14428 }, "end": { "line": 224, "column": 55, "offset": 14440 } }
                            },
                            {
                                "type": "text",
                                "value": "*",
                                "position": { "start": { "line": 224, "column": 55, "offset": 14440 }, "end": { "line": 224, "column": 57, "offset": 14442 } }
                            },
                            {
                                "type": "text",
                                "value": "A statement which has to be executed, it is pushed into the stack, executed, and then popped out of the stack. All the nested/recurring function calls are stacked on top of each other.",
                                "position": { "start": { "line": 224, "column": 57, "offset": 14442 }, "end": { "line": 224, "column": 241, "offset": 14626 } }
                            }
                        ],
                        "position": { "start": { "line": 224, "column": 1, "offset": 14386 }, "end": { "line": 224, "column": 241, "offset": 14626 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "An ",
                                "position": { "start": { "line": 225, "column": 5, "offset": 14631 }, "end": { "line": 225, "column": 8, "offset": 14634 } }
                            },
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Event loop",
                                        "position": {
                                            "start": { "line": 225, "column": 9, "offset": 14635 },
                                            "end": { "line": 225, "column": 19, "offset": 14645 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 225, "column": 8, "offset": 14634 }, "end": { "line": 225, "column": 20, "offset": 14646 } }
                            },
                            {
                                "type": "text",
                                "value": " is browser's mechanism to perform ",
                                "position": { "start": { "line": 225, "column": 20, "offset": 14646 }, "end": { "line": 225, "column": 55, "offset": 14681 } }
                            },
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "non-blocking",
                                        "position": {
                                            "start": { "line": 225, "column": 56, "offset": 14682 },
                                            "end": { "line": 225, "column": 68, "offset": 14694 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 225, "column": 55, "offset": 14681 }, "end": { "line": 225, "column": 69, "offset": 14695 } }
                            },
                            {
                                "type": "text",
                                "value": " operations by providing WebAPIs (setTimeout, setInterval, etc.) which are capable of maintaining callback references in memory.",
                                "position": { "start": { "line": 225, "column": 69, "offset": 14695 }, "end": { "line": 225, "column": 197, "offset": 14823 } }
                            }
                        ],
                        "position": { "start": { "line": 225, "column": 1, "offset": 14627 }, "end": { "line": 225, "column": 197, "offset": 14823 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "The callbacks are then added to event queue.",
                                "position": { "start": { "line": 226, "column": 5, "offset": 14828 }, "end": { "line": 226, "column": 49, "offset": 14872 } }
                            }
                        ],
                        "position": { "start": { "line": 226, "column": 1, "offset": 14824 }, "end": { "line": 226, "column": 49, "offset": 14872 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Finally. the ",
                                "position": { "start": { "line": 227, "column": 5, "offset": 14877 }, "end": { "line": 227, "column": 18, "offset": 14890 } }
                            },
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Event loop",
                                        "position": {
                                            "start": { "line": 227, "column": 19, "offset": 14891 },
                                            "end": { "line": 227, "column": 29, "offset": 14901 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 227, "column": 18, "offset": 14890 }, "end": { "line": 227, "column": 30, "offset": 14902 } }
                            },
                            {
                                "type": "text",
                                "value": " pushes the callback back to the ",
                                "position": { "start": { "line": 227, "column": 30, "offset": 14902 }, "end": { "line": 227, "column": 63, "offset": 14935 } }
                            },
                            {
                                "type": "text",
                                "value": "*",
                                "position": { "start": { "line": 227, "column": 63, "offset": 14935 }, "end": { "line": 227, "column": 65, "offset": 14937 } }
                            },
                            {
                                "type": "text",
                                "value": "Call Stack ",
                                "position": { "start": { "line": 227, "column": 65, "offset": 14937 }, "end": { "line": 227, "column": 76, "offset": 14948 } }
                            },
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "from the E",
                                        "position": {
                                            "start": { "line": 227, "column": 77, "offset": 14949 },
                                            "end": { "line": 227, "column": 87, "offset": 14959 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 227, "column": 76, "offset": 14948 }, "end": { "line": 227, "column": 88, "offset": 14960 } }
                            },
                            {
                                "type": "text",
                                "value": "vent queue ",
                                "position": { "start": { "line": 227, "column": 88, "offset": 14960 }, "end": { "line": 227, "column": 99, "offset": 14971 } }
                            },
                            {
                                "type": "text",
                                "value": "*",
                                "position": { "start": { "line": 227, "column": 99, "offset": 14971 }, "end": { "line": 227, "column": 101, "offset": 14973 } }
                            },
                            {
                                "type": "text",
                                "value": "when the call stack is empty. Here the callback is executed.",
                                "position": { "start": { "line": 227, "column": 101, "offset": 14973 }, "end": { "line": 227, "column": 161, "offset": 15033 } }
                            }
                        ],
                        "position": { "start": { "line": 227, "column": 1, "offset": 14873 }, "end": { "line": 227, "column": 161, "offset": 15033 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 222, "column": 1, "offset": 14069 }, "end": { "line": 227, "column": 161, "offset": 15033 } }
            }
        ],
        "position": { "start": { "line": 1, "column": 1, "offset": 0 }, "end": { "line": 228, "column": 1, "offset": 15034 } }
    }
}
