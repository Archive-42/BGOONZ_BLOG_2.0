{
    "expireTime": 9007200888441165000,
    "key": "transformer-remark-markdown-ast-7e0db5afba64afbda8b4709fca0785ef--",
    "val": {
        "type": "root",
        "children": [
            {
                "type": "heading",
                "depth": 1,
                "children": [
                    {
                        "type": "text",
                        "value": "Fundamental Data Structures In JavaScript",
                        "position": { "start": { "line": 2, "column": 3, "offset": 3 }, "end": { "line": 2, "column": 44, "offset": 44 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 2, "column": 1, "offset": 1 }, "end": { "line": 2, "column": 44, "offset": 44 }, "indent": [] }
            },
            {
                "type": "html",
                "value": "<br>\n<br>\n<br>\n<h1>   Algorithms </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://bgoonz-branch-the-algos.vercel.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>",
                "position": {
                    "start": { "line": 4, "column": 1, "offset": 46 },
                    "end": { "line": 14, "column": 5, "offset": 495 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "html",
                "value": "<h1>  The Algos Bgoonz Branch </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://thealgorithms.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>",
                "position": {
                    "start": { "line": 16, "column": 1, "offset": 497 },
                    "end": { "line": 24, "column": 5, "offset": 939 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "html",
                "value": "<iframe  height=\"1400\" src=\"https://ds-algo-official.netlify.app/\" frameborder=\"0\" allowfullscreen style=\"zoom:0.7;\"></iframe>",
                "position": { "start": { "line": 26, "column": 1, "offset": 941 }, "end": { "line": 26, "column": 127, "offset": 1067 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Fundamental Data Structures In JavaScript",
                        "position": { "start": { "line": 28, "column": 1, "offset": 1069 }, "end": { "line": 28, "column": 42, "offset": 1110 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 28, "column": 1, "offset": 1069 }, "end": { "line": 28, "column": 42, "offset": 1110 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "Data structures in JavaScript",
                        "position": { "start": { "line": 30, "column": 4, "offset": 1115 }, "end": { "line": 30, "column": 33, "offset": 1144 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 30, "column": 1, "offset": 1112 }, "end": { "line": 30, "column": 33, "offset": 1144 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Here's a website I created to practice data structures!\n",
                        "position": { "start": { "line": 32, "column": 1, "offset": 1146 }, "end": { "line": 33, "column": 1, "offset": 1202 }, "indent": [1] }
                    },
                    {
                        "type": "link",
                        "title": null,
                        "url": "https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/",
                        "children": [
                            {
                                "type": "strong",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "directory",
                                        "position": {
                                            "start": { "line": 33, "column": 4, "offset": 1205 },
                                            "end": { "line": 33, "column": 13, "offset": 1214 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 33, "column": 2, "offset": 1203 },
                                    "end": { "line": 33, "column": 15, "offset": 1216 },
                                    "indent": []
                                }
                            },
                            {
                                "type": "text",
                                "value": "\n",
                                "position": {
                                    "start": { "line": 33, "column": 15, "offset": 1216 },
                                    "end": { "line": 34, "column": 1, "offset": 1217 },
                                    "indent": [1]
                                }
                            },
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Edit description",
                                        "position": {
                                            "start": { "line": 34, "column": 2, "offset": 1218 },
                                            "end": { "line": 34, "column": 18, "offset": 1234 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 34, "column": 1, "offset": 1217 },
                                    "end": { "line": 34, "column": 19, "offset": 1235 },
                                    "indent": []
                                }
                            },
                            {
                                "type": "text",
                                "value": "ds-algo-official-c3dw6uapg-bgoonz.vercel.app",
                                "position": {
                                    "start": { "line": 34, "column": 19, "offset": 1235 },
                                    "end": { "line": 34, "column": 63, "offset": 1279 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 33, "column": 1, "offset": 1202 },
                            "end": { "line": 34, "column": 119, "offset": 1335 },
                            "indent": [1]
                        }
                    }
                ],
                "position": { "start": { "line": 32, "column": 1, "offset": 1146 }, "end": { "line": 34, "column": 119, "offset": 1335 }, "indent": [1, 1] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Here's the repo that the website is built on:\n",
                        "position": { "start": { "line": 36, "column": 1, "offset": 1337 }, "end": { "line": 37, "column": 1, "offset": 1383 }, "indent": [1] }
                    },
                    {
                        "type": "link",
                        "title": null,
                        "url": "https://github.com/bgoonz/DS-ALGO-OFFICIAL",
                        "children": [
                            {
                                "type": "strong",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "bgoonz/DS-ALGO-OFFICIAL",
                                        "position": {
                                            "start": { "line": 37, "column": 4, "offset": 1386 },
                                            "end": { "line": 37, "column": 27, "offset": 1409 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 37, "column": 2, "offset": 1384 },
                                    "end": { "line": 37, "column": 29, "offset": 1411 },
                                    "indent": []
                                }
                            },
                            {
                                "type": "text",
                                "value": "\n",
                                "position": {
                                    "start": { "line": 37, "column": 29, "offset": 1411 },
                                    "end": { "line": 38, "column": 1, "offset": 1412 },
                                    "indent": [1]
                                }
                            },
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Navigation ####Author:Bryan Guner Big O notation is the language we use for talking about how long an algorithm takes…",
                                        "position": {
                                            "start": { "line": 38, "column": 2, "offset": 1413 },
                                            "end": { "line": 38, "column": 120, "offset": 1531 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 38, "column": 1, "offset": 1412 },
                                    "end": { "line": 38, "column": 121, "offset": 1532 },
                                    "indent": []
                                }
                            },
                            {
                                "type": "text",
                                "value": "github.com",
                                "position": {
                                    "start": { "line": 38, "column": 121, "offset": 1532 },
                                    "end": { "line": 38, "column": 131, "offset": 1542 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 37, "column": 1, "offset": 1383 },
                            "end": { "line": 38, "column": 176, "offset": 1587 },
                            "indent": [1]
                        }
                    }
                ],
                "position": { "start": { "line": 36, "column": 1, "offset": 1337 }, "end": { "line": 38, "column": 176, "offset": 1587 }, "indent": [1, 1] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "Resources (article content below):",
                        "position": { "start": { "line": 40, "column": 4, "offset": 1592 }, "end": { "line": 40, "column": 38, "offset": 1626 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 40, "column": 1, "offset": 1589 }, "end": { "line": 40, "column": 38, "offset": 1626 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 3,
                "children": [
                    {
                        "type": "text",
                        "value": "Videos",
                        "position": { "start": { "line": 42, "column": 5, "offset": 1632 }, "end": { "line": 42, "column": 11, "offset": 1638 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 42, "column": 1, "offset": 1628 }, "end": { "line": 42, "column": 11, "offset": 1638 }, "indent": [] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.youtube.com/watch?v=0IAPZzGSbME&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=2&t=0s",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Abdul Bari: YouTubeChannel for Algorithms",
                                                "position": {
                                                    "start": { "line": 44, "column": 6, "offset": 1645 },
                                                    "end": { "line": 44, "column": 47, "offset": 1686 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 44, "column": 5, "offset": 1644 },
                                            "end": { "line": 44, "column": 146, "offset": 1785 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 44, "column": 5, "offset": 1644 },
                                    "end": { "line": 44, "column": 146, "offset": 1785 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 44, "column": 1, "offset": 1640 }, "end": { "line": 44, "column": 146, "offset": 1785 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 44, "column": 1, "offset": 1640 }, "end": { "line": 44, "column": 146, "offset": 1785 }, "indent": [] }
            },
            {
                "type": "html",
                "value": "<iframe width=\"700\" height=\"515\" src=\"https://www.youtube.com/embed/0IAPZzGSbME\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "position": { "start": { "line": 46, "column": 1, "offset": 1787 }, "end": { "line": 46, "column": 249, "offset": 2035 }, "indent": [] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.youtube.com/watch?v=lxja8wBwN0k&list=PLKKfKV1b9e8ps6dD3QA5KFfHdiWj9cB1s",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Data Structures and algorithms",
                                                "position": {
                                                    "start": { "line": 48, "column": 6, "offset": 2042 },
                                                    "end": { "line": 48, "column": 36, "offset": 2072 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 48, "column": 5, "offset": 2041 },
                                            "end": { "line": 48, "column": 122, "offset": 2158 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 48, "column": 5, "offset": 2041 },
                                    "end": { "line": 48, "column": 122, "offset": 2158 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 48, "column": 1, "offset": 2037 }, "end": { "line": 48, "column": 122, "offset": 2158 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 48, "column": 1, "offset": 2037 }, "end": { "line": 48, "column": 122, "offset": 2158 }, "indent": [] }
            },
            {
                "type": "html",
                "value": "<iframe width=\"700\" height=\"515\" src=\"https://www.youtube.com/embed/lxja8wBwN0k\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "position": { "start": { "line": 50, "column": 1, "offset": 2160 }, "end": { "line": 50, "column": 249, "offset": 2408 }, "indent": [] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.youtube.com/playlist?list=PLmGElG-9wxc9Us6IK6Qy-KHlG_F3IS6Q9",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Data Structures and algorithms Course",
                                                "position": {
                                                    "start": { "line": 52, "column": 6, "offset": 2415 },
                                                    "end": { "line": 52, "column": 43, "offset": 2452 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 52, "column": 5, "offset": 2414 },
                                            "end": { "line": 52, "column": 118, "offset": 2527 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 52, "column": 5, "offset": 2414 },
                                    "end": { "line": 52, "column": 118, "offset": 2527 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 52, "column": 1, "offset": 2410 }, "end": { "line": 52, "column": 118, "offset": 2527 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 52, "column": 1, "offset": 2410 }, "end": { "line": 52, "column": 118, "offset": 2527 }, "indent": [] }
            },
            {
                "type": "html",
                "value": "<iframe width=\"700\" height=\"515\" src=\"https://www.youtube.com/embed/videoseries?list=PLmGElG-9wxc9Us6IK6Qy-KHlG_F3IS6Q9\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "position": { "start": { "line": 54, "column": 1, "offset": 2529 }, "end": { "line": 54, "column": 289, "offset": 2817 }, "indent": [] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.khanacademy.org/computing/computer-science/algorithms",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Khan Academy",
                                                "position": {
                                                    "start": { "line": 56, "column": 6, "offset": 2824 },
                                                    "end": { "line": 56, "column": 18, "offset": 2836 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 56, "column": 5, "offset": 2823 },
                                            "end": { "line": 56, "column": 86, "offset": 2904 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 56, "column": 5, "offset": 2823 },
                                    "end": { "line": 56, "column": 86, "offset": 2904 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 56, "column": 1, "offset": 2819 }, "end": { "line": 56, "column": 86, "offset": 2904 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 56, "column": 1, "offset": 2819 }, "end": { "line": 56, "column": 86, "offset": 2904 }, "indent": [] }
            },
            {
                "type": "html",
                "value": "<iframe width=\"714\" height=\"401\" src=\"https://www.youtube.com/embed/CvSOaYi89B4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "position": { "start": { "line": 58, "column": 1, "offset": 2906 }, "end": { "line": 58, "column": 249, "offset": 3154 }, "indent": [] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Data structures by mycodeschool",
                                                "position": {
                                                    "start": { "line": 60, "column": 6, "offset": 3161 },
                                                    "end": { "line": 60, "column": 37, "offset": 3192 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 60, "column": 5, "offset": 3160 },
                                            "end": { "line": 60, "column": 112, "offset": 3267 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "value": "Pre-requisite for this lesson is good understanding of pointers in C.",
                                        "position": {
                                            "start": { "line": 60, "column": 112, "offset": 3267 },
                                            "end": { "line": 60, "column": 181, "offset": 3336 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 60, "column": 5, "offset": 3160 },
                                    "end": { "line": 60, "column": 181, "offset": 3336 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 60, "column": 1, "offset": 3156 }, "end": { "line": 60, "column": 181, "offset": 3336 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 60, "column": 1, "offset": 3156 }, "end": { "line": 60, "column": 181, "offset": 3336 }, "indent": [] }
            },
            {
                "type": "html",
                "value": "<iframe width=\"700\" height=\"515\" src=\"https://www.youtube.com/embed/videoseries?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "position": { "start": { "line": 62, "column": 1, "offset": 3338 }, "end": { "line": 62, "column": 289, "offset": 3626 }, "indent": [] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.youtube.com/watch?v=HtSuA80QTyo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "MIT 6.006: Intro to Algorithms(2011)",
                                                "position": {
                                                    "start": { "line": 64, "column": 6, "offset": 3633 },
                                                    "end": { "line": 64, "column": 42, "offset": 3669 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 64, "column": 5, "offset": 3632 },
                                            "end": { "line": 64, "column": 128, "offset": 3755 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 64, "column": 5, "offset": 3632 },
                                    "end": { "line": 64, "column": 128, "offset": 3755 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 64, "column": 1, "offset": 3628 }, "end": { "line": 64, "column": 128, "offset": 3755 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 64, "column": 1, "offset": 3628 }, "end": { "line": 64, "column": 128, "offset": 3755 }, "indent": [] }
            },
            {
                "type": "html",
                "value": "<iframe width=\"700\" height=\"515\" src=\"https://www.youtube.com/embed/HtSuA80QTyo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "position": { "start": { "line": 66, "column": 1, "offset": 3757 }, "end": { "line": 66, "column": 249, "offset": 4005 }, "indent": [] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.youtube.com/watch?v=5_5oE5lgrhw&list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Data Structures and Algorithms by Codewithharry",
                                                "position": {
                                                    "start": { "line": 68, "column": 6, "offset": 4012 },
                                                    "end": { "line": 68, "column": 53, "offset": 4059 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 68, "column": 5, "offset": 4011 },
                                            "end": { "line": 68, "column": 139, "offset": 4145 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 68, "column": 5, "offset": 4011 },
                                    "end": { "line": 68, "column": 139, "offset": 4145 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 68, "column": 1, "offset": 4007 }, "end": { "line": 68, "column": 139, "offset": 4145 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 68, "column": 1, "offset": 4007 }, "end": { "line": 68, "column": 139, "offset": 4145 }, "indent": [] }
            },
            {
                "type": "html",
                "value": "<iframe width=\"700\" height=\"515\" src=\"https://www.youtube.com/embed/5_5oE5lgrhw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "position": { "start": { "line": 70, "column": 1, "offset": 4147 }, "end": { "line": 70, "column": 249, "offset": 4395 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 3,
                "children": [
                    {
                        "type": "text",
                        "value": "Books",
                        "position": { "start": { "line": 72, "column": 5, "offset": 4401 }, "end": { "line": 72, "column": 10, "offset": 4406 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 72, "column": 1, "offset": 4397 }, "end": { "line": 72, "column": 10, "offset": 4406 }, "indent": [] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": true,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://edutechlearners.com/download/Introduction_to_algorithms-3rd%20Edition.pdf",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Introduction to Algorithms",
                                                "position": {
                                                    "start": { "line": 74, "column": 6, "offset": 4413 },
                                                    "end": { "line": 74, "column": 32, "offset": 4439 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 74, "column": 5, "offset": 4412 },
                                            "end": { "line": 74, "column": 116, "offset": 4523 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "value": " by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein",
                                        "position": {
                                            "start": { "line": 74, "column": 116, "offset": 4523 },
                                            "end": { "line": 74, "column": 196, "offset": 4603 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 74, "column": 5, "offset": 4412 },
                                    "end": { "line": 74, "column": 196, "offset": 4603 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 74, "column": 1, "offset": 4408 }, "end": { "line": 75, "column": 1, "offset": 4604 }, "indent": [1] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "http://www.sso.sy/sites/default/files/competitive%20programming%203_1.pdf",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Competitive Programming 3",
                                                "position": {
                                                    "start": { "line": 76, "column": 6, "offset": 4610 },
                                                    "end": { "line": 76, "column": 31, "offset": 4635 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 76, "column": 5, "offset": 4609 },
                                            "end": { "line": 76, "column": 107, "offset": 4711 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "value": " by Steven Halim and Felix Halim",
                                        "position": {
                                            "start": { "line": 76, "column": 107, "offset": 4711 },
                                            "end": { "line": 76, "column": 139, "offset": 4743 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 76, "column": 5, "offset": 4609 },
                                    "end": { "line": 76, "column": 139, "offset": 4743 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 76, "column": 1, "offset": 4605 }, "end": { "line": 77, "column": 1, "offset": 4744 }, "indent": [1] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://cses.fi/book/book.pdf",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Competitive Programmers Hand Book",
                                                "position": {
                                                    "start": { "line": 78, "column": 6, "offset": 4750 },
                                                    "end": { "line": 78, "column": 39, "offset": 4783 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 78, "column": 5, "offset": 4749 },
                                            "end": { "line": 78, "column": 71, "offset": 4815 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "value": " Beginner friendly hand book for competitive programmers.",
                                        "position": {
                                            "start": { "line": 78, "column": 71, "offset": 4815 },
                                            "end": { "line": 78, "column": 128, "offset": 4872 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 78, "column": 5, "offset": 4749 },
                                    "end": { "line": 78, "column": 128, "offset": 4872 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 78, "column": 1, "offset": 4745 }, "end": { "line": 79, "column": 1, "offset": 4873 }, "indent": [1] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Data%20Structures%20and%20Algorithms%20-%20Narasimha%20Karumanchi.pdf",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Data Structures and Algorithms Made Easy",
                                                "position": {
                                                    "start": { "line": 80, "column": 6, "offset": 4879 },
                                                    "end": { "line": 80, "column": 46, "offset": 4919 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 80, "column": 5, "offset": 4878 },
                                            "end": { "line": 80, "column": 205, "offset": 5078 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "value": " by Narasimha Karumanchi",
                                        "position": {
                                            "start": { "line": 80, "column": 205, "offset": 5078 },
                                            "end": { "line": 80, "column": 229, "offset": 5102 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 80, "column": 5, "offset": 4878 },
                                    "end": { "line": 80, "column": 229, "offset": 5102 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 80, "column": 1, "offset": 4874 }, "end": { "line": 81, "column": 1, "offset": 5103 }, "indent": [1] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Learning%20Algorithms%20Through%20Programming%20and%20Puzzle%20Solving.pdf",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Learning Algorithms Through Programming and Puzzle Solving",
                                                "position": {
                                                    "start": { "line": 82, "column": 6, "offset": 5109 },
                                                    "end": { "line": 82, "column": 64, "offset": 5167 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 82, "column": 5, "offset": 5108 },
                                            "end": { "line": 82, "column": 228, "offset": 5331 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "value": " by Alexander Kulikov and Pavel Pevzner",
                                        "position": {
                                            "start": { "line": 82, "column": 228, "offset": 5331 },
                                            "end": { "line": 82, "column": 267, "offset": 5370 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 82, "column": 5, "offset": 5108 },
                                    "end": { "line": 82, "column": 267, "offset": 5370 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 82, "column": 1, "offset": 5104 }, "end": { "line": 82, "column": 267, "offset": 5370 }, "indent": [] }
                    }
                ],
                "position": {
                    "start": { "line": 74, "column": 1, "offset": 4408 },
                    "end": { "line": 82, "column": 267, "offset": 5370 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "heading",
                "depth": 3,
                "children": [
                    {
                        "type": "text",
                        "value": "Coding practice",
                        "position": { "start": { "line": 84, "column": 5, "offset": 5376 }, "end": { "line": 84, "column": 20, "offset": 5391 }, "indent": [] }
                    }
                ],
                "position": { "start": { "line": 84, "column": 1, "offset": 5372 }, "end": { "line": 84, "column": 20, "offset": 5391 }, "indent": [] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": true,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://leetcode.com/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "LeetCode",
                                                "position": {
                                                    "start": { "line": 86, "column": 6, "offset": 5398 },
                                                    "end": { "line": 86, "column": 14, "offset": 5406 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 86, "column": 5, "offset": 5397 },
                                            "end": { "line": 86, "column": 38, "offset": 5430 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 86, "column": 5, "offset": 5397 },
                                    "end": { "line": 86, "column": 38, "offset": 5430 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 86, "column": 1, "offset": 5393 }, "end": { "line": 87, "column": 1, "offset": 5431 }, "indent": [1] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.interviewbit.com/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "InterviewBit",
                                                "position": {
                                                    "start": { "line": 88, "column": 6, "offset": 5437 },
                                                    "end": { "line": 88, "column": 18, "offset": 5449 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 88, "column": 5, "offset": 5436 },
                                            "end": { "line": 88, "column": 50, "offset": 5481 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 88, "column": 5, "offset": 5436 },
                                    "end": { "line": 88, "column": 50, "offset": 5481 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 88, "column": 1, "offset": 5432 }, "end": { "line": 89, "column": 1, "offset": 5482 }, "indent": [1] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://codility.com/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Codility",
                                                "position": {
                                                    "start": { "line": 90, "column": 6, "offset": 5488 },
                                                    "end": { "line": 90, "column": 14, "offset": 5496 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 90, "column": 5, "offset": 5487 },
                                            "end": { "line": 90, "column": 38, "offset": 5520 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 90, "column": 5, "offset": 5487 },
                                    "end": { "line": 90, "column": 38, "offset": 5520 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 90, "column": 1, "offset": 5483 }, "end": { "line": 91, "column": 1, "offset": 5521 }, "indent": [1] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.hackerrank.com/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "HackerRank",
                                                "position": {
                                                    "start": { "line": 92, "column": 6, "offset": 5527 },
                                                    "end": { "line": 92, "column": 16, "offset": 5537 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 92, "column": 5, "offset": 5526 },
                                            "end": { "line": 92, "column": 46, "offset": 5567 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 92, "column": 5, "offset": 5526 },
                                    "end": { "line": 92, "column": 46, "offset": 5567 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 92, "column": 1, "offset": 5522 }, "end": { "line": 93, "column": 1, "offset": 5568 }, "indent": [1] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://projecteuler.net/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Project Euler",
                                                "position": {
                                                    "start": { "line": 94, "column": 6, "offset": 5574 },
                                                    "end": { "line": 94, "column": 19, "offset": 5587 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 94, "column": 5, "offset": 5573 },
                                            "end": { "line": 94, "column": 47, "offset": 5615 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 94, "column": 5, "offset": 5573 },
                                    "end": { "line": 94, "column": 47, "offset": 5615 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 94, "column": 1, "offset": 5569 }, "end": { "line": 95, "column": 1, "offset": 5616 }, "indent": [1] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://spoj.com/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Spoj",
                                                "position": {
                                                    "start": { "line": 96, "column": 6, "offset": 5622 },
                                                    "end": { "line": 96, "column": 10, "offset": 5626 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 96, "column": 5, "offset": 5621 },
                                            "end": { "line": 96, "column": 30, "offset": 5646 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 96, "column": 5, "offset": 5621 },
                                    "end": { "line": 96, "column": 30, "offset": 5646 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 96, "column": 1, "offset": 5617 }, "end": { "line": 97, "column": 1, "offset": 5647 }, "indent": [1] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://code.google.com/codejam/contests.html",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Google Code Jam practice problems",
                                                "position": {
                                                    "start": { "line": 98, "column": 6, "offset": 5653 },
                                                    "end": { "line": 98, "column": 39, "offset": 5686 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 98, "column": 5, "offset": 5652 },
                                            "end": { "line": 98, "column": 87, "offset": 5734 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 98, "column": 5, "offset": 5652 },
                                    "end": { "line": 98, "column": 87, "offset": 5734 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": { "start": { "line": 98, "column": 1, "offset": 5648 }, "end": { "line": 99, "column": 1, "offset": 5735 }, "indent": [1] }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.hackerearth.com/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "HackerEarth",
                                                "position": {
                                                    "start": { "line": 100, "column": 6, "offset": 5741 },
                                                    "end": { "line": 100, "column": 17, "offset": 5752 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 100, "column": 5, "offset": 5740 },
                                            "end": { "line": 100, "column": 48, "offset": 5783 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 100, "column": 5, "offset": 5740 },
                                    "end": { "line": 100, "column": 48, "offset": 5783 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 100, "column": 1, "offset": 5736 },
                            "end": { "line": 101, "column": 1, "offset": 5784 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.topcoder.com/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Top Coder",
                                                "position": {
                                                    "start": { "line": 102, "column": 6, "offset": 5790 },
                                                    "end": { "line": 102, "column": 15, "offset": 5799 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 102, "column": 5, "offset": 5789 },
                                            "end": { "line": 102, "column": 43, "offset": 5827 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 102, "column": 5, "offset": 5789 },
                                    "end": { "line": 102, "column": 43, "offset": 5827 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 102, "column": 1, "offset": 5785 },
                            "end": { "line": 103, "column": 1, "offset": 5828 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.codechef.com/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "CodeChef",
                                                "position": {
                                                    "start": { "line": 104, "column": 6, "offset": 5834 },
                                                    "end": { "line": 104, "column": 14, "offset": 5842 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 104, "column": 5, "offset": 5833 },
                                            "end": { "line": 104, "column": 42, "offset": 5870 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 104, "column": 5, "offset": 5833 },
                                    "end": { "line": 104, "column": 42, "offset": 5870 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 104, "column": 1, "offset": 5829 },
                            "end": { "line": 105, "column": 1, "offset": 5871 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.codewars.com/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Codewars",
                                                "position": {
                                                    "start": { "line": 106, "column": 6, "offset": 5877 },
                                                    "end": { "line": 106, "column": 14, "offset": 5885 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 106, "column": 5, "offset": 5876 },
                                            "end": { "line": 106, "column": 42, "offset": 5913 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 106, "column": 5, "offset": 5876 },
                                    "end": { "line": 106, "column": 42, "offset": 5913 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 106, "column": 1, "offset": 5872 },
                            "end": { "line": 107, "column": 1, "offset": 5914 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://codesignal.com/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "CodeSignal",
                                                "position": {
                                                    "start": { "line": 108, "column": 6, "offset": 5920 },
                                                    "end": { "line": 108, "column": 16, "offset": 5930 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 108, "column": 5, "offset": 5919 },
                                            "end": { "line": 108, "column": 42, "offset": 5956 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 108, "column": 5, "offset": 5919 },
                                    "end": { "line": 108, "column": 42, "offset": 5956 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 108, "column": 1, "offset": 5915 },
                            "end": { "line": 109, "column": 1, "offset": 5957 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "http://codekata.com/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "CodeKata",
                                                "position": {
                                                    "start": { "line": 110, "column": 6, "offset": 5963 },
                                                    "end": { "line": 110, "column": 14, "offset": 5971 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 110, "column": 5, "offset": 5962 },
                                            "end": { "line": 110, "column": 37, "offset": 5994 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 110, "column": 5, "offset": 5962 },
                                    "end": { "line": 110, "column": 37, "offset": 5994 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 110, "column": 1, "offset": 5958 },
                            "end": { "line": 111, "column": 1, "offset": 5995 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.firecode.io/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Firecode",
                                                "position": {
                                                    "start": { "line": 112, "column": 6, "offset": 6001 },
                                                    "end": { "line": 112, "column": 14, "offset": 6009 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 112, "column": 5, "offset": 6000 },
                                            "end": { "line": 112, "column": 41, "offset": 6036 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 112, "column": 5, "offset": 6000 },
                                    "end": { "line": 112, "column": 41, "offset": 6036 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 112, "column": 1, "offset": 5996 },
                            "end": { "line": 112, "column": 41, "offset": 6036 },
                            "indent": []
                        }
                    }
                ],
                "position": {
                    "start": { "line": 86, "column": 1, "offset": 5393 },
                    "end": { "line": 112, "column": 41, "offset": 6036 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "heading",
                "depth": 3,
                "children": [
                    {
                        "type": "text",
                        "value": "Courses",
                        "position": {
                            "start": { "line": 114, "column": 5, "offset": 6042 },
                            "end": { "line": 114, "column": 12, "offset": 6049 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 114, "column": 1, "offset": 6038 }, "end": { "line": 114, "column": 12, "offset": 6049 }, "indent": [] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": true,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://academy.zerotomastery.io/p/master-the-coding-interview-faang-interview-prep",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Master the Coding Interview: Big Tech (FAANG) Interviews",
                                                "position": {
                                                    "start": { "line": 116, "column": 6, "offset": 6056 },
                                                    "end": { "line": 116, "column": 62, "offset": 6112 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 116, "column": 5, "offset": 6055 },
                                            "end": { "line": 116, "column": 148, "offset": 6198 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "value": " Course by Andrei and his team.",
                                        "position": {
                                            "start": { "line": 116, "column": 148, "offset": 6198 },
                                            "end": { "line": 116, "column": 179, "offset": 6229 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 116, "column": 5, "offset": 6055 },
                                    "end": { "line": 116, "column": 179, "offset": 6229 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 116, "column": 1, "offset": 6051 },
                            "end": { "line": 117, "column": 1, "offset": 6230 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://realpython.com/python-data-structures",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Common Python Data Structures",
                                                "position": {
                                                    "start": { "line": 118, "column": 6, "offset": 6236 },
                                                    "end": { "line": 118, "column": 35, "offset": 6265 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 118, "column": 5, "offset": 6235 },
                                            "end": { "line": 118, "column": 83, "offset": 6313 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "value": " Data structures are the fundamental constructs around which you build your programs. Each data structure provides a particular way of organizing data so it can be accessed efficiently, depending on your use case. Python ships with an extensive set of data structures in its standard library.",
                                        "position": {
                                            "start": { "line": 118, "column": 83, "offset": 6313 },
                                            "end": { "line": 118, "column": 375, "offset": 6605 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 118, "column": 5, "offset": 6235 },
                                    "end": { "line": 118, "column": 375, "offset": 6605 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 118, "column": 1, "offset": 6231 },
                            "end": { "line": 119, "column": 1, "offset": 6606 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.geeksforgeeks.org/fork-cpp-course-structure",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Fork CPP",
                                                "position": {
                                                    "start": { "line": 120, "column": 6, "offset": 6612 },
                                                    "end": { "line": 120, "column": 14, "offset": 6620 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 120, "column": 5, "offset": 6611 },
                                            "end": { "line": 120, "column": 72, "offset": 6678 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "value": " A good course for beginners.",
                                        "position": {
                                            "start": { "line": 120, "column": 72, "offset": 6678 },
                                            "end": { "line": 120, "column": 101, "offset": 6707 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 120, "column": 5, "offset": 6611 },
                                    "end": { "line": 120, "column": 101, "offset": 6707 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 120, "column": 1, "offset": 6607 },
                            "end": { "line": 121, "column": 1, "offset": 6708 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://codeforces.com/edu/course/2",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "EDU",
                                                "position": {
                                                    "start": { "line": 122, "column": 6, "offset": 6714 },
                                                    "end": { "line": 122, "column": 9, "offset": 6717 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 122, "column": 5, "offset": 6713 },
                                            "end": { "line": 122, "column": 47, "offset": 6755 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "value": " Advanced course.",
                                        "position": {
                                            "start": { "line": 122, "column": 47, "offset": 6755 },
                                            "end": { "line": 122, "column": 64, "offset": 6772 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 122, "column": 5, "offset": 6713 },
                                    "end": { "line": 122, "column": 64, "offset": 6772 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 122, "column": 1, "offset": 6709 },
                            "end": { "line": 123, "column": 1, "offset": 6773 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.udacity.com/course/c-for-programmers--ud210",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "C++ For Programmers",
                                                "position": {
                                                    "start": { "line": 124, "column": 6, "offset": 6779 },
                                                    "end": { "line": 124, "column": 25, "offset": 6798 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 124, "column": 5, "offset": 6778 },
                                            "end": { "line": 124, "column": 83, "offset": 6856 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "value": " Learn features and constructs for C++.",
                                        "position": {
                                            "start": { "line": 124, "column": 83, "offset": 6856 },
                                            "end": { "line": 124, "column": 122, "offset": 6895 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 124, "column": 5, "offset": 6778 },
                                    "end": { "line": 124, "column": 122, "offset": 6895 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 124, "column": 1, "offset": 6774 },
                            "end": { "line": 124, "column": 122, "offset": 6895 },
                            "indent": []
                        }
                    }
                ],
                "position": {
                    "start": { "line": 116, "column": 1, "offset": 6051 },
                    "end": { "line": 124, "column": 122, "offset": 6895 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "heading",
                "depth": 3,
                "children": [
                    {
                        "type": "text",
                        "value": "Guides",
                        "position": {
                            "start": { "line": 126, "column": 5, "offset": 6901 },
                            "end": { "line": 126, "column": 11, "offset": 6907 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 126, "column": 1, "offset": 6897 }, "end": { "line": 126, "column": 11, "offset": 6907 }, "indent": [] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": true,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "http://www.geeksforgeeks.org/",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "GeeksForGeeks — A CS portal for geeks",
                                                "position": {
                                                    "start": { "line": 128, "column": 6, "offset": 6914 },
                                                    "end": { "line": 128, "column": 43, "offset": 6951 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 128, "column": 5, "offset": 6913 },
                                            "end": { "line": 128, "column": 75, "offset": 6983 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 128, "column": 5, "offset": 6913 },
                                    "end": { "line": 128, "column": 75, "offset": 6983 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 128, "column": 1, "offset": 6909 },
                            "end": { "line": 129, "column": 1, "offset": 6984 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://www.learneroo.com/subjects/8",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Learneroo — Algorithms",
                                                "position": {
                                                    "start": { "line": 130, "column": 6, "offset": 6990 },
                                                    "end": { "line": 130, "column": 28, "offset": 7012 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 130, "column": 5, "offset": 6989 },
                                            "end": { "line": 130, "column": 67, "offset": 7051 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 130, "column": 5, "offset": 6989 },
                                    "end": { "line": 130, "column": 67, "offset": 7051 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 130, "column": 1, "offset": 6985 },
                            "end": { "line": 131, "column": 1, "offset": 7052 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "http://www.topcoder.com/tc?d1=tutorials&d2=alg_index&module=Static",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Top Coder tutorials",
                                                "position": {
                                                    "start": { "line": 132, "column": 6, "offset": 7058 },
                                                    "end": { "line": 132, "column": 25, "offset": 7077 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 132, "column": 5, "offset": 7057 },
                                            "end": { "line": 132, "column": 94, "offset": 7146 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 132, "column": 5, "offset": 7057 },
                                    "end": { "line": 132, "column": 94, "offset": 7146 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 132, "column": 1, "offset": 7053 },
                            "end": { "line": 133, "column": 1, "offset": 7147 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "http://www.infoarena.ro/training-path",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Infoarena training path",
                                                "position": {
                                                    "start": { "line": 134, "column": 6, "offset": 7153 },
                                                    "end": { "line": 134, "column": 29, "offset": 7176 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 134, "column": 5, "offset": 7152 },
                                            "end": { "line": 134, "column": 69, "offset": 7216 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "value": " (RO)",
                                        "position": {
                                            "start": { "line": 134, "column": 69, "offset": 7216 },
                                            "end": { "line": 134, "column": 74, "offset": 7221 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 134, "column": 5, "offset": 7152 },
                                    "end": { "line": 134, "column": 74, "offset": 7221 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 134, "column": 1, "offset": 7148 },
                            "end": { "line": 135, "column": 1, "offset": 7222 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Steven & Felix Halim — ",
                                        "position": {
                                            "start": { "line": 136, "column": 5, "offset": 7227 },
                                            "end": { "line": 136, "column": 28, "offset": 7250 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "link",
                                        "title": null,
                                        "url": "https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=118",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "Increasing the Lower Bound of Programming Contests",
                                                "position": {
                                                    "start": { "line": 136, "column": 29, "offset": 7251 },
                                                    "end": { "line": 136, "column": 79, "offset": 7301 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 136, "column": 28, "offset": 7250 },
                                            "end": { "line": 136, "column": 164, "offset": 7386 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "value": " (UVA Online Judge)",
                                        "position": {
                                            "start": { "line": 136, "column": 164, "offset": 7386 },
                                            "end": { "line": 136, "column": 183, "offset": 7405 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 136, "column": 5, "offset": 7227 },
                                    "end": { "line": 136, "column": 183, "offset": 7405 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 136, "column": 1, "offset": 7223 },
                            "end": { "line": 136, "column": 183, "offset": 7405 },
                            "indent": []
                        }
                    }
                ],
                "position": {
                    "start": { "line": 128, "column": 1, "offset": 6909 },
                    "end": { "line": 136, "column": 183, "offset": 7405 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "strong",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "space",
                                        "position": {
                                            "start": { "line": 138, "column": 7, "offset": 7413 },
                                            "end": { "line": 138, "column": 12, "offset": 7418 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 138, "column": 6, "offset": 7412 },
                                    "end": { "line": 138, "column": 13, "offset": 7419 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 138, "column": 4, "offset": 7410 },
                            "end": { "line": 138, "column": 15, "offset": 7421 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 138, "column": 1, "offset": 7407 }, "end": { "line": 138, "column": 15, "offset": 7421 }, "indent": [] }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The space complexity represents the memory consumption of a data structure. As for most of the things in life, you can't have it all, so it is with the data structures. You will generally need to trade some time for space or the other way around.",
                                        "position": {
                                            "start": { "line": 140, "column": 4, "offset": 7426 },
                                            "end": { "line": 140, "column": 250, "offset": 7672 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 140, "column": 3, "offset": 7425 },
                                    "end": { "line": 140, "column": 251, "offset": 7673 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 140, "column": 3, "offset": 7425 },
                            "end": { "line": 140, "column": 251, "offset": 7673 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 140, "column": 1, "offset": 7423 }, "end": { "line": 140, "column": 251, "offset": 7673 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "time",
                                "position": {
                                    "start": { "line": 142, "column": 5, "offset": 7679 },
                                    "end": { "line": 142, "column": 9, "offset": 7683 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 142, "column": 4, "offset": 7678 },
                            "end": { "line": 142, "column": 10, "offset": 7684 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 142, "column": 1, "offset": 7675 }, "end": { "line": 142, "column": 10, "offset": 7684 }, "indent": [] }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The time complexity for a data structure is in general more diverse than its space complexity.",
                                        "position": {
                                            "start": { "line": 144, "column": 4, "offset": 7689 },
                                            "end": { "line": 144, "column": 98, "offset": 7783 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 144, "column": 3, "offset": 7688 },
                                    "end": { "line": 144, "column": 99, "offset": 7784 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 144, "column": 3, "offset": 7688 },
                            "end": { "line": 144, "column": 99, "offset": 7784 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 144, "column": 1, "offset": 7686 }, "end": { "line": 144, "column": 99, "offset": 7784 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "Several operations",
                                "position": {
                                    "start": { "line": 146, "column": 5, "offset": 7790 },
                                    "end": { "line": 146, "column": 23, "offset": 7808 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 146, "column": 4, "offset": 7789 },
                            "end": { "line": 146, "column": 24, "offset": 7809 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 146, "column": 1, "offset": 7786 }, "end": { "line": 146, "column": 24, "offset": 7809 }, "indent": [] }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "In contrary to algorithms, when you look at the time complexity for data structures you need to express it for several operations that you can do with data structures. It can be adding elements, deleting elements, accessing an element or even searching for an element.",
                                        "position": {
                                            "start": { "line": 148, "column": 4, "offset": 7814 },
                                            "end": { "line": 148, "column": 272, "offset": 8082 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 148, "column": 3, "offset": 7813 },
                                    "end": { "line": 148, "column": 273, "offset": 8083 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 148, "column": 3, "offset": 7813 },
                            "end": { "line": 148, "column": 273, "offset": 8083 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 148, "column": 1, "offset": 7811 }, "end": { "line": 148, "column": 273, "offset": 8083 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "Dependent on data",
                                "position": {
                                    "start": { "line": 150, "column": 5, "offset": 8089 },
                                    "end": { "line": 150, "column": 22, "offset": 8106 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 150, "column": 4, "offset": 8088 },
                            "end": { "line": 150, "column": 23, "offset": 8107 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 150, "column": 1, "offset": 8085 }, "end": { "line": 150, "column": 23, "offset": 8107 }, "indent": [] }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Something that data structure and algorithms have in common when talking about time complexity is that they are both dealing with data. When you deal with data you become dependent on them and as a result the time complexity is also dependent of the data that you received. To solve this problem we talk about 3 different time complexity.",
                                        "position": {
                                            "start": { "line": 152, "column": 4, "offset": 8112 },
                                            "end": { "line": 152, "column": 342, "offset": 8450 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 152, "column": 3, "offset": 8111 },
                                    "end": { "line": 152, "column": 343, "offset": 8451 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 152, "column": 3, "offset": 8111 },
                            "end": { "line": 152, "column": 343, "offset": 8451 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 152, "column": 1, "offset": 8109 }, "end": { "line": 152, "column": 343, "offset": 8451 }, "indent": [] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": true,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "strong",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "The best-case complexity: when the data looks the best",
                                                "position": {
                                                    "start": { "line": 154, "column": 7, "offset": 8459 },
                                                    "end": { "line": 154, "column": 61, "offset": 8513 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 154, "column": 5, "offset": 8457 },
                                            "end": { "line": 154, "column": 63, "offset": 8515 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 154, "column": 5, "offset": 8457 },
                                    "end": { "line": 154, "column": 63, "offset": 8515 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 154, "column": 1, "offset": 8453 },
                            "end": { "line": 155, "column": 1, "offset": 8516 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "strong",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "The worst-case complexity: when the data looks the worst",
                                                "position": {
                                                    "start": { "line": 156, "column": 7, "offset": 8523 },
                                                    "end": { "line": 156, "column": 63, "offset": 8579 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 156, "column": 5, "offset": 8521 },
                                            "end": { "line": 156, "column": 65, "offset": 8581 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 156, "column": 5, "offset": 8521 },
                                    "end": { "line": 156, "column": 65, "offset": 8581 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 156, "column": 1, "offset": 8517 },
                            "end": { "line": 157, "column": 1, "offset": 8582 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "strong",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "The average-case complexity: when the data looks average",
                                                "position": {
                                                    "start": { "line": 158, "column": 7, "offset": 8589 },
                                                    "end": { "line": 158, "column": 63, "offset": 8645 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 158, "column": 5, "offset": 8587 },
                                            "end": { "line": 158, "column": 65, "offset": 8647 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 158, "column": 5, "offset": 8587 },
                                    "end": { "line": 158, "column": 65, "offset": 8647 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 158, "column": 1, "offset": 8583 },
                            "end": { "line": 158, "column": 65, "offset": 8647 },
                            "indent": []
                        }
                    }
                ],
                "position": {
                    "start": { "line": 154, "column": 1, "offset": 8453 },
                    "end": { "line": 158, "column": 65, "offset": 8647 },
                    "indent": [1, 1, 1, 1]
                }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "Big O notation",
                        "position": {
                            "start": { "line": 160, "column": 4, "offset": 8652 },
                            "end": { "line": 160, "column": 18, "offset": 8666 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 160, "column": 1, "offset": 8649 }, "end": { "line": 160, "column": 18, "offset": 8666 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "The complexity is usually expressed with the Big O notation. The wikipedia page about this subject is pretty complex but you can find here a good summary of the different complexity for the most famous data structures and sorting algorithms.",
                        "position": {
                            "start": { "line": 162, "column": 1, "offset": 8668 },
                            "end": { "line": 162, "column": 242, "offset": 8909 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 162, "column": 1, "offset": 8668 }, "end": { "line": 162, "column": 242, "offset": 8909 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "The Array data structure",
                        "position": {
                            "start": { "line": 164, "column": 4, "offset": 8914 },
                            "end": { "line": 164, "column": 28, "offset": 8938 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 164, "column": 1, "offset": 8911 }, "end": { "line": 164, "column": 28, "offset": 8938 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "image",
                        "title": null,
                        "url": "https://cdn-images-1.medium.com/max/2000/0*Qk3UYgeqXamRrFLR.gif",
                        "alt": null,
                        "position": {
                            "start": { "line": 166, "column": 1, "offset": 8940 },
                            "end": { "line": 166, "column": 69, "offset": 9008 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 166, "column": 1, "offset": 8940 }, "end": { "line": 166, "column": 69, "offset": 9008 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "Definition",
                        "position": {
                            "start": { "line": 168, "column": 4, "offset": 9013 },
                            "end": { "line": 168, "column": 14, "offset": 9023 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 168, "column": 1, "offset": 9010 }, "end": { "line": 168, "column": 14, "offset": 9023 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "An Array data structure, or simply an Array, is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. The simplest type of data structure is a linear array, also called one-dimensional array. From Wikipedia",
                        "position": {
                            "start": { "line": 170, "column": 1, "offset": 9025 },
                            "end": { "line": 170, "column": 284, "offset": 9308 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 170, "column": 1, "offset": 9025 }, "end": { "line": 170, "column": 284, "offset": 9308 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Arrays are among the oldest and most important data structures and are used by every program. They are also used to implement many other data structures.",
                        "position": {
                            "start": { "line": 172, "column": 1, "offset": 9310 },
                            "end": { "line": 172, "column": 154, "offset": 9463 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 172, "column": 1, "offset": 9310 }, "end": { "line": 172, "column": 154, "offset": 9463 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "Complexity",
                                "position": {
                                    "start": { "line": 174, "column": 2, "offset": 9466 },
                                    "end": { "line": 174, "column": 12, "offset": 9476 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 174, "column": 1, "offset": 9465 },
                            "end": { "line": 174, "column": 13, "offset": 9477 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": "\n",
                        "position": {
                            "start": { "line": 174, "column": 13, "offset": 9477 },
                            "end": { "line": 175, "column": 1, "offset": 9478 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "Average",
                                "position": {
                                    "start": { "line": 175, "column": 2, "offset": 9479 },
                                    "end": { "line": 175, "column": 9, "offset": 9486 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 175, "column": 1, "offset": 9478 },
                            "end": { "line": 175, "column": 10, "offset": 9487 },
                            "indent": []
                        }
                    },
                    {
                        "type": "text",
                        "value": "\n",
                        "position": {
                            "start": { "line": 175, "column": 10, "offset": 9487 },
                            "end": { "line": 176, "column": 1, "offset": 9488 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "Access Search Insertion Deletion",
                                "position": {
                                    "start": { "line": 176, "column": 2, "offset": 9489 },
                                    "end": { "line": 176, "column": 34, "offset": 9521 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 176, "column": 1, "offset": 9488 },
                            "end": { "line": 176, "column": 35, "offset": 9522 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 174, "column": 1, "offset": 9465 }, "end": { "line": 176, "column": 35, "offset": 9522 }, "indent": [1, 1] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "O(1) O(n) O(1) O(n)",
                        "position": {
                            "start": { "line": 178, "column": 1, "offset": 9524 },
                            "end": { "line": 178, "column": 20, "offset": 9543 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 178, "column": 1, "offset": 9524 }, "end": { "line": 178, "column": 20, "offset": 9543 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "class ArrayADT {\n    constructor() {\n        this.array = [];\n    }\n\n    add(data) {\n        this.array.push(data);\n    }\n\n    remove(data) {\n        this.array = this.array.filter((current) => current !== data);\n    }\n\n    search(data) {\n        const foundIndex = this.array.indexOf(data);\n        if (foundIndex === -1) {\n            return foundIndex;\n        }\n\n        return null;\n    }\n\n    getAtIndex(index) {\n        return this.array[index];\n    }\n\n    length() {\n        return this.array.length;\n    }\n\n    print() {\n        console.log(this.array.join(' '));\n    }\n}\n\nconst array = new ArrayADT();\nconsole.log('const array = new ArrayADT();: ', array);\nconsole.log('-------------------------------');\n\nconsole.log('array.add(1): ', array.add(1));\narray.add(3);\narray.add(4);\nconsole.log('array.add(2);: ', array.add(2), 'array.add(3);', array.add(3), 'array.add(4); ', array.add(4));\n\nconsole.log('-------------------------------');\narray.print();\nconsole.log('-------------------------------');\n\nconsole.log('search 3 gives index 2:', array.search(3));\nconsole.log('-------------------------------');\n\nconsole.log('getAtIndex 2 gives 3:', array.getAtIndex(2));\nconsole.log('-------------------------------');\n\nconsole.log('length is 4:', array.length());\nconsole.log('-------------------------------');\n\narray.remove(3);\narray.print();\nconsole.log('-------------------------------');\n\narray.add(5);\narray.add(5);\narray.print();\nconsole.log('-------------------------------');\n\narray.remove(5);\narray.print();\nconsole.log('-------------------------------');\n/*\n     ~ final : (master) node 01-array.js \n    const array = new ArrayADT();:  ArrayADT { array: [] }\n    -------------------------------\n    array.add(1):  undefined\n    array.add(2);:  undefined array.add(3); undefined array.add(4);  undefined\n    -------------------------------\n    1 3 4 2 3 4\n    -------------------------------\n    search 3 gives index 2: null\n    -------------------------------\n    getAtIndex 2 gives 3: 4\n    -------------------------------\n    length is 4: 6\n    -------------------------------\n    1 4 2 4\n    -------------------------------\n    1 4 2 4 5 5\n    -------------------------------\n    1 4 2 4\n    -------------------------------\n     ~ final : (master) \n     */",
                "position": {
                    "start": { "line": 180, "column": 1, "offset": 9545 },
                    "end": { "line": 273, "column": 4, "offset": 11831 },
                    "indent": [
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1
                    ]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "image",
                        "title": null,
                        "url": "https://cdn-images-1.medium.com/max/2000/1*-BJ2hU-CZO2kuzu4x5a53g.png",
                        "alt": null,
                        "position": {
                            "start": { "line": 275, "column": 1, "offset": 11833 },
                            "end": { "line": 275, "column": 75, "offset": 11907 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 275, "column": 1, "offset": 11833 }, "end": { "line": 275, "column": 75, "offset": 11907 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "indexvalue0 … this is the first value, stored at zero position",
                        "position": {
                            "start": { "line": 277, "column": 1, "offset": 11909 },
                            "end": { "line": 277, "column": 63, "offset": 11971 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 277, "column": 1, "offset": 11909 }, "end": { "line": 277, "column": 63, "offset": 11971 }, "indent": [] }
            },
            {
                "type": "list",
                "ordered": true,
                "start": 1,
                "spread": true,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The index of an array ",
                                        "position": {
                                            "start": { "line": 279, "column": 4, "offset": 11976 },
                                            "end": { "line": 279, "column": 26, "offset": 11998 },
                                            "indent": []
                                        }
                                    },
                                    {
                                        "type": "strong",
                                        "children": [
                                            {
                                                "type": "text",
                                                "value": "runs in sequence",
                                                "position": {
                                                    "start": { "line": 279, "column": 28, "offset": 12000 },
                                                    "end": { "line": 279, "column": 44, "offset": 12016 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 279, "column": 26, "offset": 11998 },
                                            "end": { "line": 279, "column": 46, "offset": 12018 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 279, "column": 4, "offset": 11976 },
                                    "end": { "line": 279, "column": 46, "offset": 12018 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 279, "column": 1, "offset": 11973 },
                            "end": { "line": 280, "column": 1, "offset": 12019 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "This could be useful for storing data that are required to be ordered, such as rankings or queues",
                                        "position": {
                                            "start": { "line": 281, "column": 4, "offset": 12023 },
                                            "end": { "line": 281, "column": 101, "offset": 12120 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 281, "column": 4, "offset": 12023 },
                                    "end": { "line": 281, "column": 101, "offset": 12120 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 281, "column": 1, "offset": 12020 },
                            "end": { "line": 282, "column": 1, "offset": 12121 },
                            "indent": [1]
                        }
                    },
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "In JavaScript, array's value could be mixed; meaning value of each index could be of different data, be it String, Number or even Objects",
                                        "position": {
                                            "start": { "line": 283, "column": 4, "offset": 12125 },
                                            "end": { "line": 283, "column": 141, "offset": 12262 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 283, "column": 4, "offset": 12125 },
                                    "end": { "line": 283, "column": 141, "offset": 12262 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 283, "column": 1, "offset": 12122 },
                            "end": { "line": 283, "column": 141, "offset": 12262 },
                            "indent": []
                        }
                    }
                ],
                "position": {
                    "start": { "line": 279, "column": 1, "offset": 11973 },
                    "end": { "line": 283, "column": 141, "offset": 12262 },
                    "indent": [1, 1, 1, 1]
                }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "    // 1. Creating Arrays\n    let firstArray = [\"a\",\"b\",\"c\"];\n    let secondArray = [\"d\",\"e\",\"f\"];\n\n    // 2. Access an Array Item\n    console.log(firstArray[0]); // Results: \"a\"\n\n    // 3. Loop over an Array\n    firstArray.forEach(function(item, index, array){\n        console.log(item, index);\n    });\n    // Results:\n    // a 0\n    // b 1\n    // c 2\n\n    // 4. Add new item to END of array\n    secondArray.push('g');\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\", \"g\"]\n\n    // 5. Remove item from END of array\n    secondArray.pop();\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\"]\n\n    // 6. Remove item from FRONT of array\n    secondArray.shift();\n    console.log(secondArray);\n    // Results: [\"e\",\"f\"]\n\n    // 7. Add item to FRONT of array\n    secondArray.unshift(\"d\");\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\"]\n\n    // 8. Find INDEX of an item in array\n    let position = secondArray.indexOf('f');\n    // Results: 2\n\n    // 9. Remove Item by Index Position\n    secondArray.splice(position, 1);\n    console.log(secondArray);\n    // Note, the second argument, in this case \"1\",\n    // represent the number of array elements to be removed\n    // Results:  [\"d\",\"e\"]\n\n    // 10. Copy an Array\n    let shallowCopy = secondArray.slice();\n    console.log(secondArray);\n    console.log(shallowCopy);\n    // Results: ShallowCopy === [\"d\",\"e\"]\n\n    // 11. JavaScript properties that BEGIN with a digit MUST be accessed using bracket notation\n    renderer.3d.setTexture(model, 'character.png');     // a syntax error\n    renderer['3d'].setTexture(model, 'character.png');  // works properly\n\n\n    // 12. Combine two Arrays\n    let thirdArray = firstArray.concat(secondArray);\n    console.log(thirdArray);\n    // [\"a\",\"b\",\"c\", \"d\", \"e\"];\n\n    // 13. Combine all Array elements into a string\n    console.log(thirdArray.join()); // Results: a,b,c,d,e\n    console.log(thirdArray.join('')); // Results: abcde\n    console.log(thirdArray.join('-')); // Results: a-b-c-d-e\n\n    // 14. Reversing an Array (in place, i.e. destructive)\n    console.log(thirdArray.reverse()); // [\"e\", \"d\", \"c\", \"b\", \"a\"]\n\n    // 15. sort\n    let unsortedArray = [\"Alphabet\", \"Zoo\", \"Products\", \"Computer Science\", \"Computer\"];\n    console.log(unsortedArray.sort());\n    // Results: [\"Alphabet\", \"Computer\", \"Computer Science\", \"Products\", \"Zoo\" ]",
                "position": {
                    "start": { "line": 285, "column": 1, "offset": 12264 },
                    "end": { "line": 361, "column": 4, "offset": 14631 },
                    "indent": [
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                    ]
                }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "2. Objects",
                        "position": {
                            "start": { "line": 363, "column": 4, "offset": 14636 },
                            "end": { "line": 363, "column": 14, "offset": 14646 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 363, "column": 1, "offset": 14633 }, "end": { "line": 363, "column": 14, "offset": 14646 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Think of objects as a logical grouping of a bunch of properties.",
                        "position": {
                            "start": { "line": 365, "column": 1, "offset": 14648 },
                            "end": { "line": 365, "column": 65, "offset": 14712 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 365, "column": 1, "offset": 14648 }, "end": { "line": 365, "column": 65, "offset": 14712 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Properties could be some variable that it's storing or some methods that it's using.",
                        "position": {
                            "start": { "line": 367, "column": 1, "offset": 14714 },
                            "end": { "line": 367, "column": 85, "offset": 14798 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 367, "column": 1, "offset": 14714 }, "end": { "line": 367, "column": 85, "offset": 14798 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "I also visualize an object as a table.",
                        "position": {
                            "start": { "line": 369, "column": 1, "offset": 14800 },
                            "end": { "line": 369, "column": 39, "offset": 14838 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 369, "column": 1, "offset": 14800 }, "end": { "line": 369, "column": 39, "offset": 14838 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "The main difference is that object's \"index\" need not be numbers and is not necessarily sequenced.",
                        "position": {
                            "start": { "line": 371, "column": 1, "offset": 14840 },
                            "end": { "line": 371, "column": 99, "offset": 14938 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 371, "column": 1, "offset": 14840 }, "end": { "line": 371, "column": 99, "offset": 14938 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "image",
                        "title": null,
                        "url": "https://cdn-images-1.medium.com/max/2572/1*KVZkD2zrgEa_47igW8Hq8g.png",
                        "alt": null,
                        "position": {
                            "start": { "line": 373, "column": 1, "offset": 14940 },
                            "end": { "line": 373, "column": 75, "offset": 15014 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 373, "column": 1, "offset": 14940 }, "end": { "line": 373, "column": 75, "offset": 15014 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "// 16. Creating an Object\n\nlet newObj = {\n    name: \"I'm an object\",\n    values: [1, 10, 11, 20],\n    others: '',\n    '1property': 'example of property name starting with digit'\n};\n\n// 17. Figure out what keys/properties are in an object\nconsole.log(Object.keys(newObj));\n// Results: [ 'name', 'values', 'others', '1property' ]\n\n// 18. Show all values stored in the object\nconsole.log(Object.values(newObj));\n\n// Results:\n// [ 'I\\'m an object',\n//   [ 1, 10, 11, 20 ],\n//   '',\n//   'example of property name starting with digit' ]\n\n// 19. Show all key and values of the object\nfor (let [key, value] of Object.entries(newObj)) {\n    console.log(`${key}: ${value}`);\n}\n// Results:\n// name: I'm an object\n// values: 1,10,11,20\n// others:\n// 1property: example of property name starting with digit\n\n// 20. Accessing Object's Properties\n// Two different ways to access properties, both produce same results\nconsole.log(newObj.name);\nconsole.log(newObj['name']);\n\n// But if the property name starts with a digit,\n// we CANNOT use dot notation\nconsole.log(newObj['1property']);\n\n// 21. Adding a Method to an Object\nnewObj.helloWorld = function () {\n    console.log('Hello World from inside an object!');\n};\n\n// 22. Invoking an Object's Method\nnewObj.helloWorld();",
                "position": {
                    "start": { "line": 375, "column": 1, "offset": 15016 },
                    "end": { "line": 424, "column": 4, "offset": 16283 },
                    "indent": [
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1
                    ]
                }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "The Hash Table",
                        "position": {
                            "start": { "line": 426, "column": 4, "offset": 16288 },
                            "end": { "line": 426, "column": 18, "offset": 16302 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 426, "column": 1, "offset": 16285 }, "end": { "line": 426, "column": 18, "offset": 16302 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "image",
                        "title": null,
                        "url": "https://cdn-images-1.medium.com/max/2000/0*avbxLAFocSV6vsl5.gif",
                        "alt": null,
                        "position": {
                            "start": { "line": 428, "column": 1, "offset": 16304 },
                            "end": { "line": 428, "column": 69, "offset": 16372 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 428, "column": 1, "offset": 16304 }, "end": { "line": 428, "column": 69, "offset": 16372 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "image",
                        "title": null,
                        "url": "https://cdn-images-1.medium.com/max/2048/0*3GJiRoLyEoZ_aIlO",
                        "alt": null,
                        "position": {
                            "start": { "line": 430, "column": 1, "offset": 16374 },
                            "end": { "line": 430, "column": 65, "offset": 16438 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 430, "column": 1, "offset": 16374 }, "end": { "line": 430, "column": 65, "offset": 16438 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": {
                                    "start": { "line": 432, "column": 5, "offset": 16444 },
                                    "end": { "line": 432, "column": 15, "offset": 16454 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 432, "column": 4, "offset": 16443 },
                            "end": { "line": 432, "column": 16, "offset": 16455 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 432, "column": 1, "offset": 16440 }, "end": { "line": 432, "column": 16, "offset": 16455 }, "indent": [] }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Hash Table (Hash Map) is a data structure used to implement an associative array, a structure that can map keys to values. A Hash Table uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. From Wikipedia",
                                        "position": {
                                            "start": { "line": 434, "column": 4, "offset": 16460 },
                                            "end": { "line": 434, "column": 275, "offset": 16731 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 434, "column": 3, "offset": 16459 },
                                    "end": { "line": 434, "column": 276, "offset": 16732 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 434, "column": 3, "offset": 16459 },
                            "end": { "line": 434, "column": 276, "offset": 16732 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 434, "column": 1, "offset": 16457 }, "end": { "line": 434, "column": 276, "offset": 16732 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Hash Tables are considered the more efficient data structure for lookup and for this reason, they are widely used.",
                        "position": {
                            "start": { "line": 436, "column": 1, "offset": 16734 },
                            "end": { "line": 436, "column": 115, "offset": 16848 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 436, "column": 1, "offset": 16734 }, "end": { "line": 436, "column": 115, "offset": 16848 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Complexity\nAverage\nAccess Search Insertion Deletion",
                        "position": {
                            "start": { "line": 438, "column": 1, "offset": 16850 },
                            "end": { "line": 440, "column": 33, "offset": 16901 },
                            "indent": [1, 1]
                        }
                    }
                ],
                "position": { "start": { "line": 438, "column": 1, "offset": 16850 }, "end": { "line": 440, "column": 33, "offset": 16901 }, "indent": [1, 1] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "O(1) O(1) O(1)",
                                        "position": {
                                            "start": { "line": 442, "column": 5, "offset": 16907 },
                                            "end": { "line": 442, "column": 19, "offset": 16921 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 442, "column": 5, "offset": 16907 },
                                    "end": { "line": 442, "column": 19, "offset": 16921 },
                                    "indent": []
                                }
                            },
                            {
                                "type": "blockquote",
                                "children": [
                                    {
                                        "type": "paragraph",
                                        "children": [
                                            {
                                                "type": "emphasis",
                                                "children": [
                                                    {
                                                        "type": "text",
                                                        "value": "The code",
                                                        "position": {
                                                            "start": { "line": 443, "column": 8, "offset": 16929 },
                                                            "end": { "line": 443, "column": 16, "offset": 16937 },
                                                            "indent": []
                                                        }
                                                    }
                                                ],
                                                "position": {
                                                    "start": { "line": 443, "column": 7, "offset": 16928 },
                                                    "end": { "line": 443, "column": 17, "offset": 16938 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 443, "column": 7, "offset": 16928 },
                                            "end": { "line": 443, "column": 17, "offset": 16938 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 443, "column": 5, "offset": 16926 },
                                    "end": { "line": 443, "column": 17, "offset": 16938 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 442, "column": 1, "offset": 16903 },
                            "end": { "line": 443, "column": 17, "offset": 16938 },
                            "indent": [1]
                        }
                    }
                ],
                "position": { "start": { "line": 442, "column": 1, "offset": 16903 }, "end": { "line": 443, "column": 17, "offset": 16938 }, "indent": [1] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Note, here I am storing another object for every hash in my Hash Table.",
                        "position": {
                            "start": { "line": 445, "column": 1, "offset": 16940 },
                            "end": { "line": 445, "column": 72, "offset": 17011 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 445, "column": 1, "offset": 16940 }, "end": { "line": 445, "column": 72, "offset": 17011 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "class HashTable {\n    constructor(size) {\n        this.values = {};\n        this.numberOfValues = 0;\n        this.size = size;\n    }\n    add(key, value) {\n        let hash = this.calculateHash(key);\n        if (!this.values.hasOwnProperty(hash)) {\n            this.values[hash] = {};\n        }\n        if (!this.values[hash].hasOwnProperty(key)) {\n            this.numberOfValues++;\n        }\n        this.values[hash][key] = value;\n    }\n    remove(key) {\n        let hash = this.calculateHash(key);\n        if (this.values.hasOwnProperty(hash) && this.values[hash].hasOwnProperty(key)) {\n            delete this.values[hash][key];\n            this.numberOfValues--;\n        }\n    }\n    calculateHash(key) {\n        return key.toString().length % this.size;\n    }\n    search(key) {\n        let hash = this.calculateHash(key);\n        if (this.values.hasOwnProperty(hash) && this.values[hash].hasOwnProperty(key)) {\n            return this.values[hash][key];\n        } else {\n            return null;\n        }\n    }\n    length() {\n        return this.numberOfValues;\n    }\n    print() {\n        let string = '';\n        for (let value in this.values) {\n            for (let key in this.values[value]) {\n                string += this.values[value][key] + ' ';\n            }\n        }\n        console.log(string.trim());\n    }\n}\nlet hashTable = new HashTable(3);\nhashTable.add('first', 1);\nhashTable.add('second', 2);\nhashTable.add('third', 3);\nhashTable.add('fourth', 4);\nhashTable.add('fifth', 5);\nhashTable.print(); // => 2 4 1 3 5\nconsole.log('length gives 5:', hashTable.length()); // => 5\nconsole.log('search second gives 2:', hashTable.search('second')); // => 2\nhashTable.remove('fourth');\nhashTable.remove('first');\nhashTable.print(); // => 2 3 5\nconsole.log('length gives 3:', hashTable.length()); // => 3\n/*\n       ~ js-files : (master) node hash.js \n    2 4 1 3 5\n    length gives 5: 5\n    search second gives 2: 2\n    2 3 5\n    length gives 3: 3\n    */",
                "position": {
                    "start": { "line": 447, "column": 1, "offset": 17013 },
                    "end": { "line": 516, "column": 4, "offset": 18988 },
                    "indent": [
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                    ]
                }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "The Set",
                        "position": {
                            "start": { "line": 518, "column": 4, "offset": 18993 },
                            "end": { "line": 518, "column": 11, "offset": 19000 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 518, "column": 1, "offset": 18990 }, "end": { "line": 518, "column": 11, "offset": 19000 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "Sets",
                        "position": {
                            "start": { "line": 520, "column": 4, "offset": 19005 },
                            "end": { "line": 520, "column": 8, "offset": 19009 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 520, "column": 1, "offset": 19002 }, "end": { "line": 520, "column": 8, "offset": 19009 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Sets are pretty much what it sounds like. It's the same intuition as Set in Mathematics. I visualize Sets as Venn Diagrams.",
                        "position": {
                            "start": { "line": 522, "column": 1, "offset": 19011 },
                            "end": { "line": 522, "column": 124, "offset": 19134 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 522, "column": 1, "offset": 19011 }, "end": { "line": 522, "column": 124, "offset": 19134 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "// 23. Creating a new Set\nlet newSet = new Set();\n\n// 24. Adding new elements to a set\nnewSet.add(1); // Set[1]\nnewSet.add('text'); // Set[1, \"text\"]\n\n// 25. Check if element is in set\nnewSet.has(1); // true\n\n// 24. Check size of set\nconsole.log(newSet.size); // Results: 2\n\n// 26. Delete element from set\nnewSet.delete(1); // Set[\"text\"]\n\n// 27. Set Operations: isSuperSet\nfunction isSuperset(set, subset) {\n    for (let elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n// 28. Set Operations: union\nfunction union(setA, setB) {\n    let _union = new Set(setA);\n    for (let elem of setB) {\n        _union.add(elem);\n    }\n    return _union;\n}\n\n// 29. Set Operations: intersection\nfunction intersection(setA, setB) {\n    let _intersection = new Set();\n    for (let elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n// 30. Set Operations: symmetricDifference\nfunction symmetricDifference(setA, setB) {\n    let _difference = new Set(setA);\n    for (let elem of setB) {\n        if (_difference.has(elem)) {\n            _difference.delete(elem);\n        } else {\n            _difference.add(elem);\n        }\n    }\n    return _difference;\n}\n// 31. Set Operations: difference\nfunction difference(setA, setB) {\n    let _difference = new Set(setA);\n    for (let elem of setB) {\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n\n// Examples\nlet setA = new Set([1, 2, 3, 4]);\nlet setB = new Set([2, 3]);\nlet setC = new Set([3, 4, 5, 6]);\n\nconsole.log(isSuperset(setA, setB)); // => true\nconsole.log(union(setA, setC)); // => Set [1, 2, 3, 4, 5, 6]\nconsole.log(intersection(setA, setC)); // => Set [3, 4]\nconsole.log(symmetricDifference(setA, setC)); // => Set [1, 2, 5, 6]\nconsole.log(difference(setA, setC)); // => Set [1, 2]",
                "position": {
                    "start": { "line": 524, "column": 1, "offset": 19136 },
                    "end": { "line": 600, "column": 4, "offset": 21015 },
                    "indent": [
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                    ]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "image",
                        "title": null,
                        "url": "https://cdn-images-1.medium.com/max/2000/0*gOE33ANZP2ujbjIG",
                        "alt": null,
                        "position": {
                            "start": { "line": 602, "column": 1, "offset": 21017 },
                            "end": { "line": 602, "column": 65, "offset": 21081 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 602, "column": 1, "offset": 21017 }, "end": { "line": 602, "column": 65, "offset": 21081 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": {
                                    "start": { "line": 604, "column": 5, "offset": 21087 },
                                    "end": { "line": 604, "column": 15, "offset": 21097 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 604, "column": 4, "offset": 21086 },
                            "end": { "line": 604, "column": 16, "offset": 21098 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 604, "column": 1, "offset": 21083 }, "end": { "line": 604, "column": 16, "offset": 21098 }, "indent": [] }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Set is an abstract data type that can store certain values, without any particular order, and no repeated values. It is a computer implementation of the mathematical concept of a finite Set. From Wikipedia",
                                        "position": {
                                            "start": { "line": 606, "column": 4, "offset": 21103 },
                                            "end": { "line": 606, "column": 211, "offset": 21310 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 606, "column": 3, "offset": 21102 },
                                    "end": { "line": 606, "column": 212, "offset": 21311 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 606, "column": 3, "offset": 21102 },
                            "end": { "line": 606, "column": 212, "offset": 21311 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 606, "column": 1, "offset": 21100 }, "end": { "line": 606, "column": 212, "offset": 21311 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "The Set data structure is usually used to test whether elements belong to set of values. Rather then only containing elements, Sets are more used to perform operations on multiple values at once with methods such as union, intersect, etc…",
                        "position": {
                            "start": { "line": 608, "column": 1, "offset": 21313 },
                            "end": { "line": 608, "column": 239, "offset": 21551 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 608, "column": 1, "offset": 21313 }, "end": { "line": 608, "column": 239, "offset": 21551 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Complexity\nAverage\nAccess Search Insertion Deletion",
                        "position": {
                            "start": { "line": 610, "column": 1, "offset": 21553 },
                            "end": { "line": 612, "column": 33, "offset": 21604 },
                            "indent": [1, 1]
                        }
                    }
                ],
                "position": { "start": { "line": 610, "column": 1, "offset": 21553 }, "end": { "line": 612, "column": 33, "offset": 21604 }, "indent": [1, 1] }
            },
            {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                    {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                            {
                                "type": "paragraph",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "O(n) O(n) O(n)",
                                        "position": {
                                            "start": { "line": 614, "column": 5, "offset": 21610 },
                                            "end": { "line": 614, "column": 19, "offset": 21624 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 614, "column": 5, "offset": 21610 },
                                    "end": { "line": 614, "column": 19, "offset": 21624 },
                                    "indent": []
                                }
                            },
                            {
                                "type": "blockquote",
                                "children": [
                                    {
                                        "type": "paragraph",
                                        "children": [
                                            {
                                                "type": "emphasis",
                                                "children": [
                                                    {
                                                        "type": "text",
                                                        "value": "The code",
                                                        "position": {
                                                            "start": { "line": 615, "column": 8, "offset": 21632 },
                                                            "end": { "line": 615, "column": 16, "offset": 21640 },
                                                            "indent": []
                                                        }
                                                    }
                                                ],
                                                "position": {
                                                    "start": { "line": 615, "column": 7, "offset": 21631 },
                                                    "end": { "line": 615, "column": 17, "offset": 21641 },
                                                    "indent": []
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 615, "column": 7, "offset": 21631 },
                                            "end": { "line": 615, "column": 17, "offset": 21641 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 615, "column": 5, "offset": 21629 },
                                    "end": { "line": 615, "column": 17, "offset": 21641 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 614, "column": 1, "offset": 21606 },
                            "end": { "line": 615, "column": 17, "offset": 21641 },
                            "indent": [1]
                        }
                    }
                ],
                "position": { "start": { "line": 614, "column": 1, "offset": 21606 }, "end": { "line": 615, "column": 17, "offset": 21641 }, "indent": [1] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "function Set() {\n    this.values = [];\n    this.numberOfValues = 0;\n}\n\nSet.prototype.add = function (value) {\n    if (!~this.values.indexOf(value)) {\n        this.values.push(value);\n        this.numberOfValues++;\n    }\n};\nSet.prototype.remove = function (value) {\n    let index = this.values.indexOf(value);\n    if (~index) {\n        this.values.splice(index, 1);\n        this.numberOfValues--;\n    }\n};\nSet.prototype.contains = function (value) {\n    return this.values.indexOf(value) !== -1;\n};\nSet.prototype.union = function (set) {\n    let newSet = new Set();\n    set.values.forEach(function (value) {\n        newSet.add(value);\n    });\n    this.values.forEach(function (value) {\n        newSet.add(value);\n    });\n    return newSet;\n};\nSet.prototype.intersect = function (set) {\n    let newSet = new Set();\n    this.values.forEach(function (value) {\n        if (set.contains(value)) {\n            newSet.add(value);\n        }\n    });\n    return newSet;\n};\nSet.prototype.difference = function (set) {\n    let newSet = new Set();\n    this.values.forEach(function (value) {\n        if (!set.contains(value)) {\n            newSet.add(value);\n        }\n    });\n    return newSet;\n};\nSet.prototype.isSubset = function (set) {\n    return set.values.every(function (value) {\n        return this.contains(value);\n    }, this);\n};\nSet.prototype.length = function () {\n    return this.numberOfValues;\n};\nSet.prototype.print = function () {\n    console.log(this.values.join(' '));\n};\n\nlet set = new Set();\nset.add(1);\nset.add(2);\nset.add(3);\nset.add(4);\nset.print(); // => 1 2 3 4\nset.remove(3);\nset.print(); // => 1 2 4\nconsole.log('contains 4 is true:', set.contains(4)); // => true\nconsole.log('contains 3 is false:', set.contains(3)); // => false\nconsole.log('---');\nlet set1 = new Set();\nset1.add(1);\nset1.add(2);\nlet set2 = new Set();\nset2.add(2);\nset2.add(3);\nlet set3 = set2.union(set1);\nset3.print(); // => 1 2 3\nlet set4 = set2.intersect(set1);\nset4.print(); // => 2\nlet set5 = set.difference(set3); // 1 2 4 diff 1 2 3\nset5.print(); // => 4\nlet set6 = set3.difference(set); // 1 2 3 diff 1 2 4\nset6.print(); // => 3\nconsole.log('set1 subset of set is true:', set.isSubset(set1)); // => true\nconsole.log('set2 subset of set is false:', set.isSubset(set2)); // => false\nconsole.log('set1 length gives 2:', set1.length()); // => 2\nconsole.log('set3 length gives 3:', set3.length()); // => 3",
                "position": {
                    "start": { "line": 617, "column": 1, "offset": 21643 },
                    "end": { "line": 708, "column": 4, "offset": 24045 },
                    "indent": [
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                    ]
                }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "The Singly Linked List",
                        "position": {
                            "start": { "line": 710, "column": 4, "offset": 24050 },
                            "end": { "line": 710, "column": 26, "offset": 24072 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 710, "column": 1, "offset": 24047 }, "end": { "line": 710, "column": 26, "offset": 24072 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "image",
                        "title": null,
                        "url": "https://cdn-images-1.medium.com/max/2048/0*fLs64rV-Xq19aVCA.gif",
                        "alt": null,
                        "position": {
                            "start": { "line": 712, "column": 1, "offset": 24074 },
                            "end": { "line": 712, "column": 69, "offset": 24142 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 712, "column": 1, "offset": 24074 }, "end": { "line": 712, "column": 69, "offset": 24142 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": {
                                    "start": { "line": 714, "column": 5, "offset": 24148 },
                                    "end": { "line": 714, "column": 15, "offset": 24158 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 714, "column": 4, "offset": 24147 },
                            "end": { "line": 714, "column": 16, "offset": 24159 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 714, "column": 1, "offset": 24144 }, "end": { "line": 714, "column": 16, "offset": 24159 }, "indent": [] }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Singly Linked List is a linear collection of data elements, called nodes pointing to the next node by means of pointer. It is a data structure consisting of a group of nodes which together represent a sequence. Under the simplest form, each node is composed of data and a reference (in other words, a link) to the next node in the sequence.",
                                        "position": {
                                            "start": { "line": 716, "column": 4, "offset": 24164 },
                                            "end": { "line": 716, "column": 346, "offset": 24506 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 716, "column": 3, "offset": 24163 },
                                    "end": { "line": 716, "column": 347, "offset": 24507 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 716, "column": 3, "offset": 24163 },
                            "end": { "line": 716, "column": 347, "offset": 24507 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 716, "column": 1, "offset": 24161 }, "end": { "line": 716, "column": 347, "offset": 24507 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Linked Lists are among the simplest and most common data structures because it allows for efficient insertion or removal of elements from any position in the sequence.",
                        "position": {
                            "start": { "line": 718, "column": 1, "offset": 24509 },
                            "end": { "line": 718, "column": 168, "offset": 24676 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 718, "column": 1, "offset": 24509 }, "end": { "line": 718, "column": 168, "offset": 24676 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)",
                        "position": {
                            "start": { "line": 720, "column": 1, "offset": 24678 },
                            "end": { "line": 723, "column": 20, "offset": 24749 },
                            "indent": [1, 1, 1]
                        }
                    }
                ],
                "position": {
                    "start": { "line": 720, "column": 1, "offset": 24678 },
                    "end": { "line": 723, "column": 20, "offset": 24749 },
                    "indent": [1, 1, 1]
                }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The code",
                                        "position": {
                                            "start": { "line": 725, "column": 4, "offset": 24754 },
                                            "end": { "line": 725, "column": 12, "offset": 24762 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 725, "column": 3, "offset": 24753 },
                                    "end": { "line": 725, "column": 13, "offset": 24763 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 725, "column": 3, "offset": 24753 },
                            "end": { "line": 725, "column": 13, "offset": 24763 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 725, "column": 1, "offset": 24751 }, "end": { "line": 725, "column": 13, "offset": 24763 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "function Node(data) {\n    this.data = data;\n    this.next = null;\n}\n\nfunction SinglyLinkedList() {\n    this.head = null;\n    this.tail = null;\n    this.numberOfValues = 0;\n}\n\nSinglyLinkedList.prototype.add = function (data) {\n    let node = new Node(data);\n    if (!this.head) {\n        this.head = node;\n        this.tail = node;\n    } else {\n        this.tail.next = node;\n        this.tail = node;\n    }\n    this.numberOfValues++;\n};\nSinglyLinkedList.prototype.remove = function (data) {\n    let previous = this.head;\n    let current = this.head;\n    while (current) {\n        if (current.data === data) {\n            if (current === this.head) {\n                this.head = this.head.next;\n            }\n            if (current === this.tail) {\n                this.tail = previous;\n            }\n            previous.next = current.next;\n            this.numberOfValues--;\n        } else {\n            previous = current;\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.insertAfter = function (data, toNodeData) {\n    let current = this.head;\n    while (current) {\n        if (current.data === toNodeData) {\n            let node = new Node(data);\n            if (current === this.tail) {\n                this.tail.next = node;\n                this.tail = node;\n            } else {\n                node.next = current.next;\n                current.next = node;\n            }\n            this.numberOfValues++;\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.traverse = function (fn) {\n    let current = this.head;\n    while (current) {\n        if (fn) {\n            fn(current);\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.length = function () {\n    return this.numberOfValues;\n};\nSinglyLinkedList.prototype.print = function () {\n    let string = '';\n    let current = this.head;\n    while (current) {\n        string += current.data + ' ';\n        current = current.next;\n    }\n    console.log(string.trim());\n};\n\nlet singlyLinkedList = new SinglyLinkedList();\nsinglyLinkedList.print(); // => ''\nsinglyLinkedList.add(1);\nsinglyLinkedList.add(2);\nsinglyLinkedList.add(3);\nsinglyLinkedList.add(4);\nsinglyLinkedList.print(); // => 1 2 3 4\nconsole.log('length is 4:', singlyLinkedList.length()); // => 4\nsinglyLinkedList.remove(3); // remove value\nsinglyLinkedList.print(); // => 1 2 4\nsinglyLinkedList.remove(9); // remove non existing value\nsinglyLinkedList.print(); // => 1 2 4\nsinglyLinkedList.remove(1); // remove head\nsinglyLinkedList.print(); // => 2 4\nsinglyLinkedList.remove(4); // remove tail\nsinglyLinkedList.print(); // => 2\nconsole.log('length is 1:', singlyLinkedList.length()); // => 1\nsinglyLinkedList.add(6);\nsinglyLinkedList.print(); // => 2 6\nsinglyLinkedList.insertAfter(3, 2);\nsinglyLinkedList.print(); // => 2 3 6\nsinglyLinkedList.insertAfter(4, 3);\nsinglyLinkedList.print(); // => 2 3 4 6\nsinglyLinkedList.insertAfter(5, 9); // insertAfter a non existing node\nsinglyLinkedList.print(); // => 2 3 4 6\nsinglyLinkedList.insertAfter(5, 4);\nsinglyLinkedList.insertAfter(7, 6); // insertAfter the tail\nsinglyLinkedList.print(); // => 2 3 4 5 6 7\nsinglyLinkedList.add(8); // add node with normal method\nsinglyLinkedList.print(); // => 2 3 4 5 6 7 8\nconsole.log('length is 7:', singlyLinkedList.length()); // => 7\nsinglyLinkedList.traverse(function (node) {\n    node.data = node.data + 10;\n});\nsinglyLinkedList.print(); // => 12 13 14 15 16 17 18\nsinglyLinkedList.traverse(function (node) {\n    console.log(node.data);\n}); // => 12 13 14 15 16 17 18\nconsole.log('length is 7:', singlyLinkedList.length()); // => 7",
                "position": {
                    "start": { "line": 727, "column": 1, "offset": 24765 },
                    "end": { "line": 847, "column": 4, "offset": 28398 },
                    "indent": [
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                    ]
                }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "The Doubly Linked List",
                        "position": {
                            "start": { "line": 849, "column": 4, "offset": 28403 },
                            "end": { "line": 849, "column": 26, "offset": 28425 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 849, "column": 1, "offset": 28400 }, "end": { "line": 849, "column": 26, "offset": 28425 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "image",
                        "title": null,
                        "url": "https://cdn-images-1.medium.com/max/2000/0*TQXiR-L_itiG3WP-.gif",
                        "alt": null,
                        "position": {
                            "start": { "line": 851, "column": 1, "offset": 28427 },
                            "end": { "line": 851, "column": 69, "offset": 28495 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 851, "column": 1, "offset": 28427 }, "end": { "line": 851, "column": 69, "offset": 28495 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": {
                                    "start": { "line": 853, "column": 5, "offset": 28501 },
                                    "end": { "line": 853, "column": 15, "offset": 28511 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 853, "column": 4, "offset": 28500 },
                            "end": { "line": 853, "column": 16, "offset": 28512 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 853, "column": 1, "offset": 28497 }, "end": { "line": 853, "column": 16, "offset": 28512 }, "indent": [] }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Doubly Linked List is a linked data structure that consists of a set of sequentially linked records called nodes. Each node contains two fields, called links, that are references to the previous and to the next node in the sequence of nodes. From Wikipedia",
                                        "position": {
                                            "start": { "line": 855, "column": 4, "offset": 28517 },
                                            "end": { "line": 855, "column": 262, "offset": 28775 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 855, "column": 3, "offset": 28516 },
                                    "end": { "line": 855, "column": 263, "offset": 28776 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 855, "column": 3, "offset": 28516 },
                            "end": { "line": 855, "column": 263, "offset": 28776 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 855, "column": 1, "offset": 28514 }, "end": { "line": 855, "column": 263, "offset": 28776 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Having two node links allow traversal in either direction but adding or removing a node in a doubly linked list requires changing more links than the same operations on a Singly Linked List.",
                        "position": {
                            "start": { "line": 857, "column": 1, "offset": 28778 },
                            "end": { "line": 857, "column": 191, "offset": 28968 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 857, "column": 1, "offset": 28778 }, "end": { "line": 857, "column": 191, "offset": 28968 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)",
                        "position": {
                            "start": { "line": 859, "column": 1, "offset": 28970 },
                            "end": { "line": 862, "column": 20, "offset": 29041 },
                            "indent": [1, 1, 1]
                        }
                    }
                ],
                "position": {
                    "start": { "line": 859, "column": 1, "offset": 28970 },
                    "end": { "line": 862, "column": 20, "offset": 29041 },
                    "indent": [1, 1, 1]
                }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The code",
                                        "position": {
                                            "start": { "line": 864, "column": 4, "offset": 29046 },
                                            "end": { "line": 864, "column": 12, "offset": 29054 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 864, "column": 3, "offset": 29045 },
                                    "end": { "line": 864, "column": 13, "offset": 29055 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 864, "column": 3, "offset": 29045 },
                            "end": { "line": 864, "column": 13, "offset": 29055 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 864, "column": 1, "offset": 29043 }, "end": { "line": 864, "column": 13, "offset": 29055 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": null,
                "meta": null,
                "value": "class Node {\n    constructor(data) {\n        this.data = data;\n        this.previous = null;\n        this.next = null;\n    }\n}\nclass DoublyLinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.numberOfValues = 0;\n    }\n\n    add(data) {\n        let node = new Node(data);\n        if (!this.head) {\n            this.head = node;\n            this.tail = node;\n        } else {\n            node.previous = this.tail;\n            this.tail.next = node;\n            this.tail = node;\n        }\n        this.numberOfValues++;\n    }\n    remove(data) {\n        let current = this.head;\n        while (current) {\n            if (current.data === data) {\n                if (current === this.head && current === this.tail) {\n                    this.head = null;\n                    this.tail = null;\n                } else if (current === this.head) {\n                    this.head = this.head.next;\n                    this.head.previous = null;\n                } else if (current === this.tail) {\n                    this.tail = this.tail.previous;\n                    this.tail.next = null;\n                } else {\n                    current.previous.next = current.next;\n                    current.next.previous = current.previous;\n                }\n                this.numberOfValues--;\n            }\n            current = current.next;\n        }\n    }\n    insertAfter(data, toNodeData) {\n        let current = this.head;\n        while (current) {\n            if (current.data === toNodeData) {\n                let node = new Node(data);\n                if (current === this.tail) {\n                    this.add(data);\n                } else {\n                    current.next.previous = node;\n                    node.previous = current;\n                    node.next = current.next;\n                    current.next = node;\n                    this.numberOfValues++;\n                }\n            }\n            current = current.next;\n        }\n    }\n    traverse(fn) {\n        let current = this.head;\n        while (current) {\n            if (fn) {\n                fn(current);\n            }\n            current = current.next;\n        }\n    }\n    traverseReverse(fn) {\n        let current = this.tail;\n        while (current) {\n            if (fn) {\n                fn(current);\n            }\n            current = current.previous;\n        }\n    }\n    length() {\n        return this.numberOfValues;\n    }\n    print() {\n        let string = \"\";\n        let current = this.head;\n        while (current) {\n            string += current.data + \" \";\n            current = current.next;\n        }\n        console.log(string.trim());\n    }\n}\n\nlet doublyLinkedList = new DoublyLinkedList();\ndoublyLinkedList.print(); // => ''\ndoublyLinkedList.add(1);\ndoublyLinkedList.add(2);\ndoublyLinkedList.add(3);\ndoublyLinkedList.add(4);\ndoublyLinkedList.print(); // => 1 2 3 4\nconsole.log(\"length is 4:\", doublyLinkedList.length()); // => 4\ndoublyLinkedList.remove(3); // remove value\ndoublyLinkedList.print(); // => 1 2 4\ndoublyLinkedList.remove(9); // remove non existing value\ndoublyLinkedList.print(); // => 1 2 4\ndoublyLinkedList.remove(1); // remove head\ndoublyLinkedList.print(); // => 2 4\ndoublyLinkedList.remove(4); // remove tail\ndoublyLinkedList.print(); // => 2\nconsole.log(\"length is 1:\", doublyLinkedList.length()); // => 1\ndoublyLinkedList.remove(2); // remove tail, the list should be empty\ndoublyLinkedList.print(); // => ''\nconsole.log(\"length is 0:\", doublyLinkedList.length()); // => 0\ndoublyLinkedList.add(2);\ndoublyLinkedList.add(6);\ndoublyLinkedList.print(); // => 2 6\ndoublyLinkedList.insertAfter(3, 2);\ndoublyLinkedList.print(); // => 2 3 6\ndoublyLinkedList.traverseReverse(function (node) {\n    console.log(node.data);\n});\ndoublyLinkedList.insertAfter(4, 3);\ndoublyLinkedList.print(); // => 2 3 4 6\ndoublyLinkedList.insertAfter(5, 9); // insertAfter a non existing node\ndoublyLinkedList.print(); // => 2 3 4 6\ndoublyLinkedList.insertAfter(5, 4);\ndoublyLinkedList.insertAfter(7, 6); // insertAfter the tail\ndoublyLinkedList.print(); // => 2 3 4 5 6 7\ndoublyLinkedList.add(8); // add node with normal method\ndoublyLinkedList.print(); // => 2 3 4 5 6 7 8\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\ndoublyLinkedList.traverse(function (node) {\n    node.data = node.data + 10;\n});\ndoublyLinkedList.print(); // => 12 13 14 15 16 17 18\ndoublyLinkedList.traverse(function (node) {\n    console.log(node.data);\n}); // => 12 13 14 15 16 17 18\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\ndoublyLinkedList.traverseReverse(function (node) {\n    console.log(node.data);\n}); // => 18 17 16 15 14 13 12\ndoublyLinkedList.print(); // => 12 13 14 15 16 17 18\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\n/*\n   ~ js-files : (master) node double-linked-list.js\n\n1 2 3 4\nlength is 4: 4\n1 2 4\n1 2 4\n2 4\n2\nlength is 1: 1\n\nlength is 0: 0\n2 6\n2 3 6\n6\n3\n2\n2 3 4 6\n2 3 4 6\n2 3 4 5 6 7\n2 3 4 5 6 7 8\nlength is 7: 7\n12 13 14 15 16 17 18\n12\n13\n14\n15\n16\n17\n18\nlength is 7: 7\n18\n17\n16\n15\n14\n13\n12\n12 13 14 15 16 17 18\nlength is 7: 7\n ~ js-files : (master)\n*/",
                "position": {
                    "start": { "line": 866, "column": 1, "offset": 29057 },
                    "end": { "line": 1056, "column": 7, "offset": 34944 },
                    "indent": [
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                    ]
                }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "The Stack",
                        "position": {
                            "start": { "line": 1058, "column": 4, "offset": 34949 },
                            "end": { "line": 1058, "column": 13, "offset": 34958 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1058, "column": 1, "offset": 34946 }, "end": { "line": 1058, "column": 13, "offset": 34958 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "image",
                        "title": null,
                        "url": "https://cdn-images-1.medium.com/max/4050/0*qsjYW-Lvfo22ecLE.gif",
                        "alt": null,
                        "position": {
                            "start": { "line": 1060, "column": 1, "offset": 34960 },
                            "end": { "line": 1060, "column": 69, "offset": 35028 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1060, "column": 1, "offset": 34960 }, "end": { "line": 1060, "column": 69, "offset": 35028 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": {
                                    "start": { "line": 1062, "column": 5, "offset": 35034 },
                                    "end": { "line": 1062, "column": 15, "offset": 35044 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 1062, "column": 4, "offset": 35033 },
                            "end": { "line": 1062, "column": 16, "offset": 35045 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1062, "column": 1, "offset": 35030 }, "end": { "line": 1062, "column": 16, "offset": 35045 }, "indent": [] }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Stack is an abstract data type that serves as a collection of elements, with two principal operations: push, which adds an element to the collection, and pop, which removes the most recently added element that was not yet removed. The order in which elements come off a Stack gives rise to its alternative name, LIFO (for last in, first out). From Wikipedia",
                                        "position": {
                                            "start": { "line": 1064, "column": 4, "offset": 35050 },
                                            "end": { "line": 1064, "column": 363, "offset": 35409 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 1064, "column": 3, "offset": 35049 },
                                    "end": { "line": 1064, "column": 364, "offset": 35410 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 1064, "column": 3, "offset": 35049 },
                            "end": { "line": 1064, "column": 364, "offset": 35410 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1064, "column": 1, "offset": 35047 }, "end": { "line": 1064, "column": 364, "offset": 35410 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "A Stack often has a third method peek which allows to check the last pushed element without popping it.",
                        "position": {
                            "start": { "line": 1066, "column": 1, "offset": 35412 },
                            "end": { "line": 1066, "column": 104, "offset": 35515 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1066, "column": 1, "offset": 35412 }, "end": { "line": 1066, "column": 104, "offset": 35515 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)",
                        "position": {
                            "start": { "line": 1068, "column": 1, "offset": 35517 },
                            "end": { "line": 1071, "column": 20, "offset": 35588 },
                            "indent": [1, 1, 1]
                        }
                    }
                ],
                "position": {
                    "start": { "line": 1068, "column": 1, "offset": 35517 },
                    "end": { "line": 1071, "column": 20, "offset": 35588 },
                    "indent": [1, 1, 1]
                }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The code",
                                        "position": {
                                            "start": { "line": 1073, "column": 4, "offset": 35593 },
                                            "end": { "line": 1073, "column": 12, "offset": 35601 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 1073, "column": 3, "offset": 35592 },
                                    "end": { "line": 1073, "column": 13, "offset": 35602 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 1073, "column": 3, "offset": 35592 },
                            "end": { "line": 1073, "column": 13, "offset": 35602 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1073, "column": 1, "offset": 35590 }, "end": { "line": 1073, "column": 13, "offset": 35602 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": null,
                "meta": null,
                "value": "function Stack() {\n  this.stack = [];\n}\n\nStack.prototype.push = function(value) {\n  this.stack.push(value);\n};\nStack.prototype.pop = function() {\n  return this.stack.pop();\n};\nStack.prototype.peek = function() {\n  return this.stack[this.stack.length - 1];\n};\nStack.prototype.length = function() {\n  return this.stack.length;\n};\nStack.prototype.print = function() {\n  console.log(this.stack.join(' '));\n};\n\nlet stack = new Stack();\nstack.push(1);\nstack.push(2);\nstack.push(3);\nstack.print(); // => 1 2 3\nconsole.log('length is 3:', stack.length()); // => 3\nconsole.log('peek is 3:', stack.peek()); // => 3\nconsole.log('pop is 3:', stack.pop()); // => 3\nstack.print(); // => 1 2\nconsole.log('pop is 2:', stack.pop());  // => 2\nconsole.log('length is 1:', stack.length()); // => 1\nconsole.log('pop is 1:', stack.pop()); // => 1\nstack.print(); // => ''\nconsole.log('peek is undefined:', stack.peek()); // => undefined\nconsole.log('pop is undefined:', stack.pop()); // => undefined",
                "position": {
                    "start": { "line": 1075, "column": 1, "offset": 35604 },
                    "end": { "line": 1109, "column": 67, "offset": 36712 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "The Queue",
                        "position": {
                            "start": { "line": 1111, "column": 4, "offset": 36717 },
                            "end": { "line": 1111, "column": 13, "offset": 36726 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1111, "column": 1, "offset": 36714 }, "end": { "line": 1111, "column": 13, "offset": 36726 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "image",
                        "title": null,
                        "url": "https://cdn-images-1.medium.com/max/4050/0*YvfuX5tKP7-V0p7v.gif",
                        "alt": null,
                        "position": {
                            "start": { "line": 1113, "column": 1, "offset": 36728 },
                            "end": { "line": 1113, "column": 69, "offset": 36796 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1113, "column": 1, "offset": 36728 }, "end": { "line": 1113, "column": 69, "offset": 36796 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": {
                                    "start": { "line": 1115, "column": 5, "offset": 36802 },
                                    "end": { "line": 1115, "column": 15, "offset": 36812 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 1115, "column": 4, "offset": 36801 },
                            "end": { "line": 1115, "column": 16, "offset": 36813 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1115, "column": 1, "offset": 36798 }, "end": { "line": 1115, "column": 16, "offset": 36813 }, "indent": [] }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Queue is a particular kind of abstract data type or collection in which the entities in the collection are kept in order and the principal operations are the addition of entities to the rear terminal position, known as enqueue, and removal of entities from the front terminal position, known as dequeue. This makes the Queue a First-In-First-Out (FIFO) data structure. In a FIFO data structure, the first element added to the Queue will be the first one to be removed.",
                                        "position": {
                                            "start": { "line": 1117, "column": 4, "offset": 36818 },
                                            "end": { "line": 1117, "column": 474, "offset": 37288 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 1117, "column": 3, "offset": 36817 },
                                    "end": { "line": 1117, "column": 475, "offset": 37289 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 1117, "column": 3, "offset": 36817 },
                            "end": { "line": 1117, "column": 475, "offset": 37289 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1117, "column": 1, "offset": 36815 }, "end": { "line": 1117, "column": 475, "offset": 37289 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "As for the Stack data structure, a peek operation is often added to the Queue data structure. It returns the value of the front element without dequeuing it.",
                        "position": {
                            "start": { "line": 1119, "column": 1, "offset": 37291 },
                            "end": { "line": 1119, "column": 158, "offset": 37448 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1119, "column": 1, "offset": 37291 }, "end": { "line": 1119, "column": 158, "offset": 37448 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(n)",
                        "position": {
                            "start": { "line": 1121, "column": 1, "offset": 37450 },
                            "end": { "line": 1124, "column": 20, "offset": 37521 },
                            "indent": [1, 1, 1]
                        }
                    }
                ],
                "position": {
                    "start": { "line": 1121, "column": 1, "offset": 37450 },
                    "end": { "line": 1124, "column": 20, "offset": 37521 },
                    "indent": [1, 1, 1]
                }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The code",
                                        "position": {
                                            "start": { "line": 1126, "column": 4, "offset": 37526 },
                                            "end": { "line": 1126, "column": 12, "offset": 37534 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 1126, "column": 3, "offset": 37525 },
                                    "end": { "line": 1126, "column": 13, "offset": 37535 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 1126, "column": 3, "offset": 37525 },
                            "end": { "line": 1126, "column": 13, "offset": 37535 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1126, "column": 1, "offset": 37523 }, "end": { "line": 1126, "column": 13, "offset": 37535 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": null,
                "meta": null,
                "value": "function Queue() {\n  this.queue = [];\n}\n\nQueue.prototype.enqueue = function(value) {\n  this.queue.push(value);\n};\nQueue.prototype.dequeue = function() {\n  return this.queue.shift();\n};\nQueue.prototype.peek = function() {\n  return this.queue[0];\n};\nQueue.prototype.length = function() {\n  return this.queue.length;\n};\nQueue.prototype.print = function() {\n  console.log(this.queue.join(' '));\n};\n\nlet queue = new Queue();\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nqueue.print(); // => 1 2 3\nconsole.log('length is 3:', queue.length()); // => 3\nconsole.log('peek is 1:', queue.peek()); // => 3\nconsole.log('dequeue is 1:', queue.dequeue()); // => 1\nqueue.print(); // => 2 3\nconsole.log('dequeue is 2:', queue.dequeue());  // => 2\nconsole.log('length is 1:', queue.length()); // => 1\nconsole.log('dequeue is 3:', queue.dequeue()); // => 3\nqueue.print(); // => ''\nconsole.log('peek is undefined:', queue.peek()); // => undefined\nconsole.log('dequeue is undefined:', queue.dequeue()); // => undefined",
                "position": {
                    "start": { "line": 1128, "column": 1, "offset": 37537 },
                    "end": { "line": 1162, "column": 75, "offset": 38675 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "The Tree",
                        "position": {
                            "start": { "line": 1164, "column": 4, "offset": 38680 },
                            "end": { "line": 1164, "column": 12, "offset": 38688 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1164, "column": 1, "offset": 38677 }, "end": { "line": 1164, "column": 12, "offset": 38688 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "image",
                        "title": null,
                        "url": "https://cdn-images-1.medium.com/max/2000/0*yUiQ-NaPKeLQnN7n",
                        "alt": null,
                        "position": {
                            "start": { "line": 1166, "column": 1, "offset": 38690 },
                            "end": { "line": 1166, "column": 65, "offset": 38754 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1166, "column": 1, "offset": 38690 }, "end": { "line": 1166, "column": 65, "offset": 38754 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": {
                                    "start": { "line": 1168, "column": 5, "offset": 38760 },
                                    "end": { "line": 1168, "column": 15, "offset": 38770 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 1168, "column": 4, "offset": 38759 },
                            "end": { "line": 1168, "column": 16, "offset": 38771 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1168, "column": 1, "offset": 38756 }, "end": { "line": 1168, "column": 16, "offset": 38771 }, "indent": [] }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Tree is a widely used data structure that simulates a hierarchical tree structure, with a root value and subtrees of children with a parent node. A tree data structure can be defined recursively as a collection of nodes (starting at a root node), where each node is a data structure consisting of a value, together with a list of references to nodes (the \"children\"), with the constraints that no reference is duplicated, and none points to the root node. From Wikipedia",
                                        "position": {
                                            "start": { "line": 1170, "column": 4, "offset": 38776 },
                                            "end": { "line": 1170, "column": 476, "offset": 39248 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 1170, "column": 3, "offset": 38775 },
                                    "end": { "line": 1170, "column": 477, "offset": 39249 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 1170, "column": 3, "offset": 38775 },
                            "end": { "line": 1170, "column": 477, "offset": 39249 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1170, "column": 1, "offset": 38773 }, "end": { "line": 1170, "column": 477, "offset": 39249 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(n) O(n)\nTo get a full overview of the time and space complexity of the Tree data structure, have a look to this excellent Big O cheat sheet.",
                        "position": {
                            "start": { "line": 1172, "column": 1, "offset": 39251 },
                            "end": { "line": 1176, "column": 133, "offset": 39455 },
                            "indent": [1, 1, 1, 1]
                        }
                    }
                ],
                "position": {
                    "start": { "line": 1172, "column": 1, "offset": 39251 },
                    "end": { "line": 1176, "column": 133, "offset": 39455 },
                    "indent": [1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "image",
                        "title": null,
                        "url": "https://cdn-images-1.medium.com/max/2000/1*DCdQiB6XqBJCrFRz12BwqA.png",
                        "alt": null,
                        "position": {
                            "start": { "line": 1178, "column": 1, "offset": 39457 },
                            "end": { "line": 1178, "column": 75, "offset": 39531 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1178, "column": 1, "offset": 39457 }, "end": { "line": 1178, "column": 75, "offset": 39531 }, "indent": [] }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The code",
                                        "position": {
                                            "start": { "line": 1180, "column": 4, "offset": 39536 },
                                            "end": { "line": 1180, "column": 12, "offset": 39544 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 1180, "column": 3, "offset": 39535 },
                                    "end": { "line": 1180, "column": 13, "offset": 39545 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 1180, "column": 3, "offset": 39535 },
                            "end": { "line": 1180, "column": 13, "offset": 39545 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1180, "column": 1, "offset": 39533 }, "end": { "line": 1180, "column": 13, "offset": 39545 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": null,
                "meta": null,
                "value": "function Node(data) {\n  this.data = data;\n  this.children = [];\n}\n\nfunction Tree() {\n  this.root = null;\n}\n\nTree.prototype.add = function(data, toNodeData) {\n  let node = new Node(data);\n  let parent = toNodeData ? this.findBFS(toNodeData) : null;\n  if(parent) {\n    parent.children.push(node);\n  } else {\n    if(!this.root) {\n      this.root = node;\n    } else {\n      return 'Root node is already assigned';\n    }\n  }\n};\nTree.prototype.remove = function(data) {\n  if(this.root.data === data) {\n    this.root = null;\n  }\n\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    for(let i = 0; i < node.children.length; i++) {\n      if(node.children[i].data === data) {\n        node.children.splice(i, 1);\n      } else {\n        queue.push(node.children[i]);\n      }\n    }\n  }\n};\nTree.prototype.contains = function(data) {\n  return this.findBFS(data) ? true : false;\n};\nTree.prototype.findBFS = function(data) {\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    if(node.data === data) {\n      return node;\n    }\n    for(let i = 0; i < node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  return null;\n};\nTree.prototype._preOrder = function(node, fn) {\n  if(node) {\n    if(fn) {\n      fn(node);\n    }\n    for(let i = 0; i < node.children.length; i++) {\n      this._preOrder(node.children[i], fn);\n    }\n  }\n};\nTree.prototype._postOrder = function(node, fn) {\n  if(node) {\n    for(let i = 0; i < node.children.length; i++) {\n      this._postOrder(node.children[i], fn);\n    }\n    if(fn) {\n      fn(node);\n    }\n  }\n};\nTree.prototype.traverseDFS = function(fn, method) {\n  let current = this.root;\n  if(method) {\n    this['_' + method](current, fn);\n  } else {\n    this._preOrder(current, fn);\n  }\n};\nTree.prototype.traverseBFS = function(fn) {\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    if(fn) {\n      fn(node);\n    }\n    for(let i = 0; i < node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n};\nTree.prototype.print = function() {\n  if(!this.root) {\n    return console.log('No root node found');\n  }\n  let newline = new Node('|');\n  let queue = [this.root, newline];\n  let string = '';\n  while(queue.length) {\n    let node = queue.shift();\n    string += node.data.toString() + ' ';\n    if(node === newline && queue.length) {\n      queue.push(newline);\n    }\n    for(let i = 0; i < node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  console.log(string.slice(0, -2).trim());\n};\nTree.prototype.printByLevel = function() {\n  if(!this.root) {\n    return console.log('No root node found');\n  }\n  let newline = new Node('\\n');\n  let queue = [this.root, newline];\n  let string = '';\n  while(queue.length) {\n    let node = queue.shift();\n    string += node.data.toString() + (node.data !== '\\n' ? ' ' : '');\n    if(node === newline && queue.length) {\n      queue.push(newline);\n    }\n    for(let i = 0; i < node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  console.log(string.trim());\n};\n\nlet tree = new Tree();\ntree.add('ceo');\ntree.add('cto', 'ceo');\ntree.add('dev1', 'cto');\ntree.add('dev2', 'cto');\ntree.add('dev3', 'cto');\ntree.add('cfo', 'ceo');\ntree.add('accountant', 'cfo');\ntree.add('cmo', 'ceo');\ntree.print(); // => ceo | cto cfo cmo | dev1 dev2 dev3 accountant\ntree.printByLevel();  // => ceo \\n cto cfo cmo \\n dev1 dev2 dev3 accountant\nconsole.log('tree contains dev1 is true:', tree.contains('dev1')); // => true\nconsole.log('tree contains dev4 is false:', tree.contains('dev4')); // => false\nconsole.log('--- BFS');\ntree.traverseBFS(function(node) { console.log(node.data); }); // => ceo cto cfo cmo dev1 dev2 dev3 accountant\nconsole.log('--- DFS preOrder');\ntree.traverseDFS(function(node) { console.log(node.data); }, 'preOrder'); // => ceo cto dev1 dev2 dev3 cfo accountant cmo\nconsole.log('--- DFS postOrder');\ntree.traverseDFS(function(node) { console.log(node.data); }, 'postOrder'); // => dev1 dev2 dev3 cto accountant cfo cmo ceo\ntree.remove('cmo');\ntree.print(); // => ceo | cto cfo | dev1 dev2 dev3 accountant\ntree.remove('cfo');\ntree.print(); // => ceo | cto | dev1 dev2 dev3",
                "position": {
                    "start": { "line": 1182, "column": 1, "offset": 39547 },
                    "end": { "line": 1338, "column": 51, "offset": 44356 },
                    "indent": [
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                    ]
                }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "text",
                        "value": "The Graph",
                        "position": {
                            "start": { "line": 1340, "column": 4, "offset": 44361 },
                            "end": { "line": 1340, "column": 13, "offset": 44370 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1340, "column": 1, "offset": 44358 }, "end": { "line": 1340, "column": 13, "offset": 44370 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "image",
                        "title": null,
                        "url": "https://cdn-images-1.medium.com/max/2000/0*q31mL1kjFWlIzw3l.gif",
                        "alt": null,
                        "position": {
                            "start": { "line": 1342, "column": 1, "offset": 44372 },
                            "end": { "line": 1342, "column": 69, "offset": 44440 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1342, "column": 1, "offset": 44372 }, "end": { "line": 1342, "column": 69, "offset": 44440 }, "indent": [] }
            },
            {
                "type": "heading",
                "depth": 2,
                "children": [
                    {
                        "type": "emphasis",
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": {
                                    "start": { "line": 1344, "column": 5, "offset": 44446 },
                                    "end": { "line": 1344, "column": 15, "offset": 44456 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 1344, "column": 4, "offset": 44445 },
                            "end": { "line": 1344, "column": 16, "offset": 44457 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1344, "column": 1, "offset": 44442 }, "end": { "line": 1344, "column": 16, "offset": 44457 }, "indent": [] }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Graph data structure consists of a finite (and possibly mutable) set of vertices or nodes or points, together with a set of unordered pairs of these vertices for an undirected Graph or a set of ordered pairs for a directed Graph. These pairs are known as edges, arcs, or lines for an undirected Graph and as arrows, directed edges, directed arcs, or directed lines for a directed Graph. The vertices may be part of the Graph structure, or may be external entities represented by integer indices or references. From Wikipedia",
                                        "position": {
                                            "start": { "line": 1346, "column": 4, "offset": 44462 },
                                            "end": { "line": 1346, "column": 530, "offset": 44988 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 1346, "column": 3, "offset": 44461 },
                                    "end": { "line": 1346, "column": 531, "offset": 44989 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 1346, "column": 3, "offset": 44461 },
                            "end": { "line": 1346, "column": 531, "offset": 44989 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1346, "column": 1, "offset": 44459 }, "end": { "line": 1346, "column": 531, "offset": 44989 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "A Graph data structure may also associate to each edge some edge value, such as a symbolic label or a numeric attribute (cost, capacity, length, etc.).",
                        "position": {
                            "start": { "line": 1348, "column": 1, "offset": 44991 },
                            "end": { "line": 1348, "column": 152, "offset": 45142 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1348, "column": 1, "offset": 44991 }, "end": { "line": 1348, "column": 152, "offset": 45142 }, "indent": [] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Representation\nThere are different ways of representing a graph, each of them with its own advantages and disadvantages. Here are the main 2:",
                        "position": {
                            "start": { "line": 1350, "column": 1, "offset": 45144 },
                            "end": { "line": 1351, "column": 127, "offset": 45285 },
                            "indent": [1]
                        }
                    }
                ],
                "position": { "start": { "line": 1350, "column": 1, "offset": 45144 }, "end": { "line": 1351, "column": 127, "offset": 45285 }, "indent": [1] }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Adjacency list: For every vertex a list of adjacent vertices is stored. This can be viewed as storing the list of edges. This data structure allows the storage of additional data on the vertices and edges.\nAdjacency matrix: Data are stored in a two-dimensional matrix, in which the rows represent source vertices and columns represent destination vertices. The data on the edges and vertices must be stored externally.\nComplexity\nAdjacency list\nStorage Add Vertex Add Edge Query\nO( V + E\nAdjacency matrix\nStorage Add Vertex Add Edge Query\nO( V ^2) O(",
                        "position": {
                            "start": { "line": 1353, "column": 1, "offset": 45287 },
                            "end": { "line": 1361, "column": 12, "offset": 45837 },
                            "indent": [1, 1, 1, 1, 1, 1, 1, 1]
                        }
                    }
                ],
                "position": {
                    "start": { "line": 1353, "column": 1, "offset": 45287 },
                    "end": { "line": 1361, "column": 12, "offset": 45837 },
                    "indent": [1, 1, 1, 1, 1, 1, 1, 1]
                }
            },
            {
                "type": "paragraph",
                "children": [
                    {
                        "type": "text",
                        "value": "Graph",
                        "position": {
                            "start": { "line": 1363, "column": 1, "offset": 45839 },
                            "end": { "line": 1363, "column": 6, "offset": 45844 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1363, "column": 1, "offset": 45839 }, "end": { "line": 1363, "column": 6, "offset": 45844 }, "indent": [] }
            },
            {
                "type": "blockquote",
                "children": [
                    {
                        "type": "paragraph",
                        "children": [
                            {
                                "type": "emphasis",
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The code",
                                        "position": {
                                            "start": { "line": 1365, "column": 4, "offset": 45849 },
                                            "end": { "line": 1365, "column": 12, "offset": 45857 },
                                            "indent": []
                                        }
                                    }
                                ],
                                "position": {
                                    "start": { "line": 1365, "column": 3, "offset": 45848 },
                                    "end": { "line": 1365, "column": 13, "offset": 45858 },
                                    "indent": []
                                }
                            }
                        ],
                        "position": {
                            "start": { "line": 1365, "column": 3, "offset": 45848 },
                            "end": { "line": 1365, "column": 13, "offset": 45858 },
                            "indent": []
                        }
                    }
                ],
                "position": { "start": { "line": 1365, "column": 1, "offset": 45846 }, "end": { "line": 1365, "column": 13, "offset": 45858 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": null,
                "meta": null,
                "value": "//below uses the adjacency list representation.",
                "position": { "start": { "line": 1367, "column": 1, "offset": 45860 }, "end": { "line": 1367, "column": 52, "offset": 45911 }, "indent": [] }
            },
            {
                "type": "code",
                "lang": "js",
                "meta": null,
                "value": "        function Graph() {\n          this.vertices = [];\n          this.edges = [];\n          this.numberOfEdges = 0;\n        }\n\n        Graph.prototype.addVertex = function(vertex) {\n          this.vertices.push(vertex);\n          this.edges[vertex] = [];\n        };\n        Graph.prototype.removeVertex = function(vertex) {\n          let index = this.vertices.indexOf(vertex);\n          if(~index) {\n            this.vertices.splice(index, 1);\n          }\n          while(this.edges[vertex].length) {\n            let adjacentVertex = this.edges[vertex].pop();\n            this.removeEdge(adjacentVertex, vertex);\n          }\n        };\n        Graph.prototype.addEdge = function(vertex1, vertex2) {\n          this.edges[vertex1].push(vertex2);\n          this.edges[vertex2].push(vertex1);\n          this.numberOfEdges++;\n        };\n        Graph.prototype.removeEdge = function(vertex1, vertex2) {\n          let index1 = this.edges[vertex1] ? this.edges[vertex1].indexOf(vertex2) : -1;\n          let index2 = this.edges[vertex2] ? this.edges[vertex2].indexOf(vertex1) : -1;\n          if(~index1) {\n            this.edges[vertex1].splice(index1, 1);\n            this.numberOfEdges--;\n          }\n          if(~index2) {\n            this.edges[vertex2].splice(index2, 1);\n          }\n        };\n        Graph.prototype.size = function() {\n          return this.vertices.length;\n        };\n        Graph.prototype.relations = function() {\n          return this.numberOfEdges;\n        };\n        Graph.prototype.traverseDFS = function(vertex, fn) {\n          if(!~this.vertices.indexOf(vertex)) {\n            return console.log('Vertex not found');\n          }\n          let visited = [];\n          this._traverseDFS(vertex, visited, fn);\n        };\n        Graph.prototype._traverseDFS = function(vertex, visited, fn) {\n          visited[vertex] = true;\n          if(this.edges[vertex] !== undefined) {\n            fn(vertex);\n          }\n          for(let i = 0; i < this.edges[vertex].length; i++) {\n            if(!visited[this.edges[vertex][i]]) {\n              this._traverseDFS(this.edges[vertex][i], visited, fn);\n            }\n          }\n        };\n        Graph.prototype.traverseBFS = function(vertex, fn) {\n          if(!~this.vertices.indexOf(vertex)) {\n            return console.log('Vertex not found');\n          }\n          let queue = [];\n          queue.push(vertex);\n          let visited = [];\n          visited[vertex] = true;\n\n          while(queue.length) {\n            vertex = queue.shift();\n            fn(vertex);\n            for(let i = 0; i < this.edges[vertex].length; i++) {\n              if(!visited[this.edges[vertex][i]]) {\n                visited[this.edges[vertex][i]] = true;\n                queue.push(this.edges[vertex][i]);\n              }\n            }\n          }\n        };\n        Graph.prototype.pathFromTo = function(vertexSource, vertexDestination) {\n          if(!~this.vertices.indexOf(vertexSource)) {\n            return console.log('Vertex not found');\n          }\n          let queue = [];\n          queue.push(vertexSource);\n          let visited = [];\n          visited[vertexSource] = true;\n          let paths = [];\n\n          while(queue.length) {\n            let vertex = queue.shift();\n            for(let i = 0; i < this.edges[vertex].length; i++) {\n              if(!visited[this.edges[vertex][i]]) {\n                visited[this.edges[vertex][i]] = true;\n                queue.push(this.edges[vertex][i]);\n                // save paths between vertices\n                paths[this.edges[vertex][i]] = vertex;\n              }\n            }\n          }\n          if(!visited[vertexDestination]) {\n            return undefined;\n          }\n\n          let path = [];\n          for(let j = vertexDestination; j != vertexSource; j = paths[j]) {\n            path.push(j);\n          }\n          path.push(j);\n          return path.reverse().join('-');\n        };\n        Graph.prototype.print = function() {\n          console.log(this.vertices.map(function(vertex) {\n            return (vertex + ' -> ' + this.edges[vertex].join(', ')).trim();\n          }, this).join(' | '));\n        };\n        ```\n        let graph = new Graph();\n        graph.addVertex(1);\n        graph.addVertex(2);\n        graph.addVertex(3);\n        graph.addVertex(4);\n        graph.addVertex(5);\n        graph.addVertex(6);\n        graph.print(); // 1 -> | 2 -> | 3 -> | 4 -> | 5 -> | 6 ->\n        graph.addEdge(1, 2);\n        graph.addEdge(1, 5);\n        graph.addEdge(2, 3);\n        graph.addEdge(2, 5);\n        graph.addEdge(3, 4);\n        graph.addEdge(4, 5);\n        graph.addEdge(4, 6);\n        graph.print(); // 1 -> 2, 5 | 2 -> 1, 3, 5 | 3 -> 2, 4 | 4 -> 3, 5, 6 | 5 -> 1, 2, 4 | 6 -> 4\n        console.log('graph size (number of vertices):', graph.size()); // => 6\n        console.log('graph relations (number of edges):', graph.relations()); // => 7\n        graph.traverseDFS(1, function(vertex) { console.log(vertex); }); // => 1 2 3 4 5 6\n        console.log('---');\n        graph.traverseBFS(1, function(vertex) { console.log(vertex); }); // => 1 2 5 3 4 6\n        graph.traverseDFS(0, function(vertex) { console.log(vertex); }); // => 'Vertex not found'\n        graph.traverseBFS(0, function(vertex) { console.log(vertex); }); // => 'Vertex not found'\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-5-1\n        console.log('path from 3 to 5:', graph.pathFromTo(3, 5)); // => 3-2-5\n        graph.removeEdge(1, 2);\n        graph.removeEdge(4, 5);\n        graph.removeEdge(10, 11);\n        console.log('graph relations (number of edges):', graph.relations()); // => 5\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-3-2-5-1\n        graph.addEdge(1, 2);\n        graph.addEdge(4, 5);\n        console.log('graph relations (number of edges):', graph.relations()); // => 7\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-5-1\n        graph.removeVertex(5);\n        console.log('graph size (number of vertices):', graph.size()); // => 5\n        console.log('graph relations (number of edges):', graph.relations()); // => 4\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-3-2-1",
                "position": {
                    "start": { "line": 1369, "column": 1, "offset": 45913 },
                    "end": { "line": 1526, "column": 5, "offset": 52148 },
                    "indent": [
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                    ]
                }
            }
        ],
        "position": { "start": { "line": 1, "column": 1, "offset": 0 }, "end": { "line": 1527, "column": 1, "offset": 52149 } }
    }
}
