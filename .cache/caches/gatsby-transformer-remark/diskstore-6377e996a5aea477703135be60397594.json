{"expireTime":9007200908516803000,"key":"transformer-remark-markdown-html-59066d7b7ee6a820217fc32fdbb08b0a-gatsby-remark-code-buttons-","val":"<h2><a href=\"https://leetcode.com/problems/valid-parentheses/description/\">20. Valid Parentheses</a></h2>\n<h3>Problem:</h3>\n<p>Given a string containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the input string is valid.</p>\n<p>An input string is valid if:</p>\n<ol>\n<li>Open brackets must be closed by the same type of brackets.</li>\n<li>Open brackets must be closed in the correct order.</li>\n</ol>\n<p>Note that an empty string is also considered valid.</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: \"()\"\nOutput: true\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: \"()[]{}\"\nOutput: true\n</code></pre>\n<p><strong>Example 3:</strong></p>\n<pre><code>Input: \"(]\"\nOutput: false\n</code></pre>\n<p><strong>Example 4:</strong></p>\n<pre><code>Input: \"([)]\"\nOutput: false\n</code></pre>\n<p><strong>Example 5:</strong></p>\n<pre><code>Input: \"{[]}\"\nOutput: true\n</code></pre>\n<h3>Solution:</h3>\n<p>Stack 101.</p>\n<p>Whenever we meet a close bracket, we want to compare it to the last open bracket.</p>\n<p>That is why we use stack to store open brackets: first in, last out.</p>\n<p>And since there is only bracket characters, the last open bracket happens to be the last character.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`/**\n * @param {string} s\n * @return {boolean}\n */\nlet isValid = function (s) {\n    const stack = [];\n    const pairs = {\n        '}': '{',\n        ']': '[',\n        ')': '('\n    };\n    for (const c of s) {\n        const open = pairs[c];\n        if (open) {\n            if (stack.pop() !== open) {\n                return false;\n            }\n        } else {\n            stack.push(c);\n        }\n    }\n    return stack.length <= 0;\n};`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre><code class=\"language-js\">/**\n * @param {string} s\n * @return {boolean}\n */\nlet isValid = function (s) {\n    const stack = [];\n    const pairs = {\n        '}': '{',\n        ']': '[',\n        ')': '('\n    };\n    for (const c of s) {\n        const open = pairs[c];\n        if (open) {\n            if (stack.pop() !== open) {\n                return false;\n            }\n        } else {\n            stack.push(c);\n        }\n    }\n    return stack.length &#x3C;= 0;\n};\n</code></pre>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>"}