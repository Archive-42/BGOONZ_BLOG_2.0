{"expireTime":9007200911206577000,"key":"transformer-remark-markdown-ast-89abccd0a7637170850babeb4e90678a-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"html","value":"<!--StartFragment-->","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":21,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"1. Array","position":{"start":{"line":4,"column":5,"offset":27},"end":{"line":4,"column":13,"offset":35},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":23},"end":{"line":4,"column":13,"offset":35},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The most basic of all data structures, an array stores data in memory for later use. Each array has a fixed number of cells decided on its creation, and each cell has a corresponding numeric index used to select its data. Whenever you’d like to use the array, all you need are the desired indices, and you can access any of the data within.","position":{"start":{"line":6,"column":1,"offset":37},"end":{"line":6,"column":341,"offset":377},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":37},"end":{"line":6,"column":341,"offset":377},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/ab40ae120edb6f03676fd5bd971feb1f59801ee43d90464c5f3c0ac7f5dc4c25/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f35313633353033373435373631323830","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/ab40ae120edb6f03676fd5bd971feb1f59801ee43d90464c5f3c0ac7f5dc4c25/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f35313633353033373435373631323830","alt":"alt-text","position":{"start":{"line":8,"column":2,"offset":380},"end":{"line":8,"column":279,"offset":657},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":379},"end":{"line":8,"column":546,"offset":924},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":379},"end":{"line":8,"column":546,"offset":924},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":10,"column":1,"offset":926},"end":{"line":10,"column":11,"offset":936},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":926},"end":{"line":10,"column":11,"offset":936},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Simple to create and use.","position":{"start":{"line":12,"column":5,"offset":942},"end":{"line":12,"column":30,"offset":967},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":942},"end":{"line":12,"column":30,"offset":967},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":938},"end":{"line":12,"column":30,"offset":967},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Foundational building block for complex data structures","position":{"start":{"line":13,"column":5,"offset":972},"end":{"line":13,"column":60,"offset":1027},"indent":[]}}],"position":{"start":{"line":13,"column":5,"offset":972},"end":{"line":13,"column":60,"offset":1027},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":968},"end":{"line":13,"column":60,"offset":1027},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":938},"end":{"line":13,"column":60,"offset":1027},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":15,"column":1,"offset":1029},"end":{"line":15,"column":14,"offset":1042},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1029},"end":{"line":15,"column":14,"offset":1042},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Fixed size","position":{"start":{"line":17,"column":5,"offset":1048},"end":{"line":17,"column":15,"offset":1058},"indent":[]}}],"position":{"start":{"line":17,"column":5,"offset":1048},"end":{"line":17,"column":15,"offset":1058},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1044},"end":{"line":17,"column":15,"offset":1058},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Expensive to insert/delete or resequence values","position":{"start":{"line":18,"column":5,"offset":1063},"end":{"line":18,"column":52,"offset":1110},"indent":[]}}],"position":{"start":{"line":18,"column":5,"offset":1063},"end":{"line":18,"column":52,"offset":1110},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1059},"end":{"line":18,"column":52,"offset":1110},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inefficient to sort","position":{"start":{"line":19,"column":5,"offset":1115},"end":{"line":19,"column":24,"offset":1134},"indent":[]}}],"position":{"start":{"line":19,"column":5,"offset":1115},"end":{"line":19,"column":24,"offset":1134},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1111},"end":{"line":19,"column":24,"offset":1134},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1044},"end":{"line":19,"column":24,"offset":1134},"indent":[1,1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications","children":[],"position":{"start":{"line":21,"column":6,"offset":1141},"end":{"line":21,"column":104,"offset":1239},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":21,"column":104,"offset":1239},"end":{"line":21,"column":116,"offset":1251},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1136},"end":{"line":21,"column":116,"offset":1251},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Basic spreadsheets","position":{"start":{"line":23,"column":5,"offset":1257},"end":{"line":23,"column":23,"offset":1275},"indent":[]}}],"position":{"start":{"line":23,"column":5,"offset":1257},"end":{"line":23,"column":23,"offset":1275},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1253},"end":{"line":23,"column":23,"offset":1275},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Within complex structures such as hash tables","position":{"start":{"line":24,"column":5,"offset":1280},"end":{"line":24,"column":50,"offset":1325},"indent":[]}}],"position":{"start":{"line":24,"column":5,"offset":1280},"end":{"line":24,"column":50,"offset":1325},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1276},"end":{"line":24,"column":50,"offset":1325},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1253},"end":{"line":24,"column":50,"offset":1325},"indent":[1]}},{"type":"paragraph","children":[{"type":"break","position":{"start":{"line":26,"column":1,"offset":1327},"end":{"line":27,"column":1,"offset":1329},"indent":[1]}},{"type":"text","value":"\\","position":{"start":{"line":27,"column":1,"offset":1329},"end":{"line":27,"column":2,"offset":1330},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1327},"end":{"line":27,"column":2,"offset":1330},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#2-queues","children":[],"position":{"start":{"line":29,"column":5,"offset":1336},"end":{"line":29,"column":99,"offset":1430},"indent":[]}},{"type":"text","value":"2. Queues","position":{"start":{"line":29,"column":99,"offset":1430},"end":{"line":29,"column":108,"offset":1439},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1332},"end":{"line":29,"column":108,"offset":1439},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Queues are conceptually similar to stacks; both are sequential structures, but queues process elements in the order they were entered rather than the most recent element.","position":{"start":{"line":31,"column":1,"offset":1441},"end":{"line":31,"column":171,"offset":1611},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1441},"end":{"line":31,"column":171,"offset":1611},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As a result, queues can be thought of as a FIFO (First In, First Out) version of stacks. These are helpful as a buffer for requests, storing each request in the order it was received until it can be processed.","position":{"start":{"line":33,"column":1,"offset":1613},"end":{"line":33,"column":210,"offset":1822},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1613},"end":{"line":33,"column":210,"offset":1822},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/0e19efa8b7251690191848de4d8538c36f7619aa1a69b46a306b16b19274edb0/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34363038323536343133353332313630","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/0e19efa8b7251690191848de4d8538c36f7619aa1a69b46a306b16b19274edb0/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34363038323536343133353332313630","alt":"alt-text","position":{"start":{"line":35,"column":2,"offset":1825},"end":{"line":35,"column":279,"offset":2102},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1824},"end":{"line":35,"column":546,"offset":2369},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1824},"end":{"line":35,"column":546,"offset":2369},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For a visual, consider a single-lane tunnel: the first car to enter is the first car to exit. If other cars should wish to exit, but the first stops, all cars will have to wait for the first to exit before they can proceed.","position":{"start":{"line":37,"column":1,"offset":2371},"end":{"line":37,"column":224,"offset":2594},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":2371},"end":{"line":37,"column":224,"offset":2594},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":39,"column":1,"offset":2596},"end":{"line":39,"column":11,"offset":2606},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":2596},"end":{"line":39,"column":11,"offset":2606},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Dynamic size","position":{"start":{"line":41,"column":5,"offset":2612},"end":{"line":41,"column":17,"offset":2624},"indent":[]}}],"position":{"start":{"line":41,"column":5,"offset":2612},"end":{"line":41,"column":17,"offset":2624},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2608},"end":{"line":41,"column":17,"offset":2624},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Orders data in the order it was received","position":{"start":{"line":42,"column":5,"offset":2629},"end":{"line":42,"column":45,"offset":2669},"indent":[]}}],"position":{"start":{"line":42,"column":5,"offset":2629},"end":{"line":42,"column":45,"offset":2669},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2625},"end":{"line":42,"column":45,"offset":2669},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Low runtime","position":{"start":{"line":43,"column":5,"offset":2674},"end":{"line":43,"column":16,"offset":2685},"indent":[]}}],"position":{"start":{"line":43,"column":5,"offset":2674},"end":{"line":43,"column":16,"offset":2685},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2670},"end":{"line":43,"column":16,"offset":2685},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2608},"end":{"line":43,"column":16,"offset":2685},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":45,"column":1,"offset":2687},"end":{"line":45,"column":14,"offset":2700},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2687},"end":{"line":45,"column":14,"offset":2700},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Can only retrieve the oldest element","position":{"start":{"line":47,"column":5,"offset":2706},"end":{"line":47,"column":41,"offset":2742},"indent":[]}}],"position":{"start":{"line":47,"column":5,"offset":2706},"end":{"line":47,"column":41,"offset":2742},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2702},"end":{"line":47,"column":41,"offset":2742},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2702},"end":{"line":47,"column":41,"offset":2742},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-1","children":[],"position":{"start":{"line":49,"column":6,"offset":2749},"end":{"line":49,"column":106,"offset":2849},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":49,"column":106,"offset":2849},"end":{"line":49,"column":118,"offset":2861},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2744},"end":{"line":49,"column":118,"offset":2861},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Effective as a buffer when receiving frequent data","position":{"start":{"line":51,"column":5,"offset":2867},"end":{"line":51,"column":55,"offset":2917},"indent":[]}}],"position":{"start":{"line":51,"column":5,"offset":2867},"end":{"line":51,"column":55,"offset":2917},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2863},"end":{"line":51,"column":55,"offset":2917},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Convenient way to store order-sensitive data such as stored voicemails","position":{"start":{"line":52,"column":5,"offset":2922},"end":{"line":52,"column":75,"offset":2992},"indent":[]}}],"position":{"start":{"line":52,"column":5,"offset":2922},"end":{"line":52,"column":75,"offset":2992},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2918},"end":{"line":52,"column":75,"offset":2992},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Ensures the oldest data is processed first","position":{"start":{"line":53,"column":5,"offset":2997},"end":{"line":53,"column":47,"offset":3039},"indent":[]}}],"position":{"start":{"line":53,"column":5,"offset":2997},"end":{"line":53,"column":47,"offset":3039},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":2993},"end":{"line":53,"column":47,"offset":3039},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2863},"end":{"line":53,"column":47,"offset":3039},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"break","position":{"start":{"line":55,"column":1,"offset":3041},"end":{"line":56,"column":1,"offset":3043},"indent":[1]}},{"type":"text","value":"\\","position":{"start":{"line":56,"column":1,"offset":3043},"end":{"line":56,"column":2,"offset":3044},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":3041},"end":{"line":56,"column":2,"offset":3044},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#3-linked-list","children":[],"position":{"start":{"line":58,"column":5,"offset":3050},"end":{"line":58,"column":104,"offset":3149},"indent":[]}},{"type":"text","value":"3. Linked List","position":{"start":{"line":58,"column":104,"offset":3149},"end":{"line":58,"column":118,"offset":3163},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":3046},"end":{"line":58,"column":118,"offset":3163},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Linked lists are a data structure which, unlike the previous three, does not use physical placement of data in memory. This means that, rather than indexes or positions, linked lists use a referencing system: elements are stored in nodes that contain a pointer to the next node, repeating until all nodes are linked.","position":{"start":{"line":60,"column":1,"offset":3165},"end":{"line":60,"column":317,"offset":3481},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":3165},"end":{"line":60,"column":317,"offset":3481},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This system allows efficient insertion and removal of items without the need for reorganization.","position":{"start":{"line":62,"column":1,"offset":3483},"end":{"line":62,"column":97,"offset":3579},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":3483},"end":{"line":62,"column":97,"offset":3579},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/c5b4f3b037de92da7118b3bbf05e9485a28507729cf9d9cffc2c17f37189971f/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34353336323436353035333038313630","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/c5b4f3b037de92da7118b3bbf05e9485a28507729cf9d9cffc2c17f37189971f/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34353336323436353035333038313630","alt":"alt-text","position":{"start":{"line":64,"column":2,"offset":3582},"end":{"line":64,"column":279,"offset":3859},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3581},"end":{"line":64,"column":546,"offset":4126},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3581},"end":{"line":64,"column":546,"offset":4126},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":66,"column":1,"offset":4128},"end":{"line":66,"column":11,"offset":4138},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":4128},"end":{"line":66,"column":11,"offset":4138},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Efficient insertion and removal of new elements","position":{"start":{"line":68,"column":5,"offset":4144},"end":{"line":68,"column":52,"offset":4191},"indent":[]}}],"position":{"start":{"line":68,"column":5,"offset":4144},"end":{"line":68,"column":52,"offset":4191},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":4140},"end":{"line":68,"column":52,"offset":4191},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Less complex than restructuring an array","position":{"start":{"line":69,"column":5,"offset":4196},"end":{"line":69,"column":45,"offset":4236},"indent":[]}}],"position":{"start":{"line":69,"column":5,"offset":4196},"end":{"line":69,"column":45,"offset":4236},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":4192},"end":{"line":69,"column":45,"offset":4236},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":4140},"end":{"line":69,"column":45,"offset":4236},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":71,"column":1,"offset":4238},"end":{"line":71,"column":14,"offset":4251},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":4238},"end":{"line":71,"column":14,"offset":4251},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Uses more memory than arrays","position":{"start":{"line":73,"column":5,"offset":4257},"end":{"line":73,"column":33,"offset":4285},"indent":[]}}],"position":{"start":{"line":73,"column":5,"offset":4257},"end":{"line":73,"column":33,"offset":4285},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":4253},"end":{"line":73,"column":33,"offset":4285},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inefficient to retrieve a specific element","position":{"start":{"line":74,"column":5,"offset":4290},"end":{"line":74,"column":47,"offset":4332},"indent":[]}}],"position":{"start":{"line":74,"column":5,"offset":4290},"end":{"line":74,"column":47,"offset":4332},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":4286},"end":{"line":74,"column":47,"offset":4332},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inefficient to traverse the list backward","position":{"start":{"line":75,"column":5,"offset":4337},"end":{"line":75,"column":46,"offset":4378},"indent":[]}}],"position":{"start":{"line":75,"column":5,"offset":4337},"end":{"line":75,"column":46,"offset":4378},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":4333},"end":{"line":75,"column":46,"offset":4378},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":4253},"end":{"line":75,"column":46,"offset":4378},"indent":[1,1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-2","children":[],"position":{"start":{"line":77,"column":6,"offset":4385},"end":{"line":77,"column":106,"offset":4485},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":77,"column":106,"offset":4485},"end":{"line":77,"column":118,"offset":4497},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":4380},"end":{"line":77,"column":118,"offset":4497},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Best used when data must be added and removed in quick succession from unknown locations","position":{"start":{"line":79,"column":5,"offset":4503},"end":{"line":79,"column":93,"offset":4591},"indent":[]}}],"position":{"start":{"line":79,"column":5,"offset":4503},"end":{"line":79,"column":93,"offset":4591},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":4499},"end":{"line":79,"column":93,"offset":4591},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":4499},"end":{"line":79,"column":93,"offset":4591},"indent":[]}},{"type":"paragraph","children":[{"type":"break","position":{"start":{"line":81,"column":1,"offset":4593},"end":{"line":82,"column":1,"offset":4595},"indent":[1]}},{"type":"text","value":"\\","position":{"start":{"line":82,"column":1,"offset":4595},"end":{"line":82,"column":2,"offset":4596},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":4593},"end":{"line":82,"column":2,"offset":4596},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#4-trees","children":[],"position":{"start":{"line":84,"column":5,"offset":4602},"end":{"line":84,"column":98,"offset":4695},"indent":[]}},{"type":"text","value":"4. Trees","position":{"start":{"line":84,"column":98,"offset":4695},"end":{"line":84,"column":106,"offset":4703},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":4598},"end":{"line":84,"column":106,"offset":4703},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Trees are another relation-based data structure, which specialize in representing hierarchical structures. Like a linked list, nodes contain both elements of data and pointers marking its relation to immediate nodes.","position":{"start":{"line":86,"column":1,"offset":4705},"end":{"line":86,"column":217,"offset":4921},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":4705},"end":{"line":86,"column":217,"offset":4921},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Each tree has a “root” node, off of which all other nodes branch. The root contains references to all elements directly below it, which are known as its “child nodes”. This continues, with each child node, branching off into more child nodes.","position":{"start":{"line":88,"column":1,"offset":4923},"end":{"line":88,"column":243,"offset":5165},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":4923},"end":{"line":88,"column":243,"offset":5165},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Nodes with linked child nodes are called internal nodes while those without child nodes are external nodes. A common type of tree is the “binary search tree” which is used to easily search stored data.","position":{"start":{"line":90,"column":1,"offset":5167},"end":{"line":90,"column":202,"offset":5368},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":5167},"end":{"line":90,"column":202,"offset":5368},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These search operations are highly efficient, as its search duration is dependent not on the number of nodes but on the number of levels down the tree.","position":{"start":{"line":92,"column":1,"offset":5370},"end":{"line":92,"column":152,"offset":5521},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":5370},"end":{"line":92,"column":152,"offset":5521},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/82cd3953e721f75e55b74c5854d64d3de002098592eba6338aa152f3ad1b4cc6/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34383630343534383739383837333630","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/82cd3953e721f75e55b74c5854d64d3de002098592eba6338aa152f3ad1b4cc6/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34383630343534383739383837333630","alt":"alt-text","position":{"start":{"line":94,"column":2,"offset":5524},"end":{"line":94,"column":279,"offset":5801},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":5523},"end":{"line":94,"column":546,"offset":6068},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":5523},"end":{"line":94,"column":546,"offset":6068},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This type of tree is defined by four strict rules:","position":{"start":{"line":96,"column":1,"offset":6070},"end":{"line":96,"column":51,"offset":6120},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":6070},"end":{"line":96,"column":51,"offset":6120},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The left subtree contains only nodes with elements lesser than the root.","position":{"start":{"line":98,"column":4,"offset":6125},"end":{"line":98,"column":76,"offset":6197},"indent":[]}}],"position":{"start":{"line":98,"column":4,"offset":6125},"end":{"line":98,"column":76,"offset":6197},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":6122},"end":{"line":98,"column":76,"offset":6197},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The right subtree contains only nodes with elements greater than the root.","position":{"start":{"line":99,"column":4,"offset":6201},"end":{"line":99,"column":78,"offset":6275},"indent":[]}}],"position":{"start":{"line":99,"column":4,"offset":6201},"end":{"line":99,"column":78,"offset":6275},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":6198},"end":{"line":99,"column":78,"offset":6275},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Left and right subtrees must also be a binary search tree. They must follow the above rules with the “root” of their tree.","position":{"start":{"line":100,"column":4,"offset":6279},"end":{"line":100,"column":126,"offset":6401},"indent":[]}}],"position":{"start":{"line":100,"column":4,"offset":6279},"end":{"line":100,"column":126,"offset":6401},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":6276},"end":{"line":100,"column":126,"offset":6401},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"There can be no duplicate nodes, i.e. no two nodes can have the same value.","position":{"start":{"line":101,"column":4,"offset":6405},"end":{"line":101,"column":79,"offset":6480},"indent":[]}}],"position":{"start":{"line":101,"column":4,"offset":6405},"end":{"line":101,"column":79,"offset":6480},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":6402},"end":{"line":101,"column":79,"offset":6480},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":6122},"end":{"line":101,"column":79,"offset":6480},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":103,"column":1,"offset":6482},"end":{"line":103,"column":11,"offset":6492},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":6482},"end":{"line":103,"column":11,"offset":6492},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Ideal for storing hierarchical relationships","position":{"start":{"line":105,"column":5,"offset":6498},"end":{"line":105,"column":49,"offset":6542},"indent":[]}}],"position":{"start":{"line":105,"column":5,"offset":6498},"end":{"line":105,"column":49,"offset":6542},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":6494},"end":{"line":105,"column":49,"offset":6542},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Dynamic size","position":{"start":{"line":106,"column":5,"offset":6547},"end":{"line":106,"column":17,"offset":6559},"indent":[]}}],"position":{"start":{"line":106,"column":5,"offset":6547},"end":{"line":106,"column":17,"offset":6559},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":6543},"end":{"line":106,"column":17,"offset":6559},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Quick at insert and delete operations","position":{"start":{"line":107,"column":5,"offset":6564},"end":{"line":107,"column":42,"offset":6601},"indent":[]}}],"position":{"start":{"line":107,"column":5,"offset":6564},"end":{"line":107,"column":42,"offset":6601},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":6560},"end":{"line":107,"column":42,"offset":6601},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In a binary search tree, inserted nodes are sequenced immediately.","position":{"start":{"line":108,"column":5,"offset":6606},"end":{"line":108,"column":71,"offset":6672},"indent":[]}}],"position":{"start":{"line":108,"column":5,"offset":6606},"end":{"line":108,"column":71,"offset":6672},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":6602},"end":{"line":108,"column":71,"offset":6672},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Binary search trees are efficient at searches; length is only O(height)O(height).","position":{"start":{"line":109,"column":5,"offset":6677},"end":{"line":109,"column":86,"offset":6758},"indent":[]}}],"position":{"start":{"line":109,"column":5,"offset":6677},"end":{"line":109,"column":86,"offset":6758},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":6673},"end":{"line":109,"column":86,"offset":6758},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":6494},"end":{"line":109,"column":86,"offset":6758},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":111,"column":1,"offset":6760},"end":{"line":111,"column":14,"offset":6773},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":6760},"end":{"line":111,"column":14,"offset":6773},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Slow to rearrange nodes","position":{"start":{"line":113,"column":5,"offset":6779},"end":{"line":113,"column":28,"offset":6802},"indent":[]}}],"position":{"start":{"line":113,"column":5,"offset":6779},"end":{"line":113,"column":28,"offset":6802},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":6775},"end":{"line":113,"column":28,"offset":6802},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Child nodes hold no information about their parent node","position":{"start":{"line":114,"column":5,"offset":6807},"end":{"line":114,"column":60,"offset":6862},"indent":[]}}],"position":{"start":{"line":114,"column":5,"offset":6807},"end":{"line":114,"column":60,"offset":6862},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":6803},"end":{"line":114,"column":60,"offset":6862},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Binary search trees are not as fast as the more complicated hash table","position":{"start":{"line":115,"column":5,"offset":6867},"end":{"line":115,"column":75,"offset":6937},"indent":[]}}],"position":{"start":{"line":115,"column":5,"offset":6867},"end":{"line":115,"column":75,"offset":6937},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":6863},"end":{"line":115,"column":75,"offset":6937},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Binary search trees can degenerate into linear search (scanning all elements) if not implemented with balanced subtrees.","position":{"start":{"line":116,"column":5,"offset":6942},"end":{"line":116,"column":125,"offset":7062},"indent":[]}}],"position":{"start":{"line":116,"column":5,"offset":6942},"end":{"line":116,"column":125,"offset":7062},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":6938},"end":{"line":116,"column":125,"offset":7062},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":6775},"end":{"line":116,"column":125,"offset":7062},"indent":[1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-3","children":[],"position":{"start":{"line":118,"column":6,"offset":7069},"end":{"line":118,"column":106,"offset":7169},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":118,"column":106,"offset":7169},"end":{"line":118,"column":118,"offset":7181},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":7064},"end":{"line":118,"column":118,"offset":7181},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Storing hierarchical data such as a file location.","position":{"start":{"line":120,"column":5,"offset":7187},"end":{"line":120,"column":55,"offset":7237},"indent":[]}}],"position":{"start":{"line":120,"column":5,"offset":7187},"end":{"line":120,"column":55,"offset":7237},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":7183},"end":{"line":120,"column":55,"offset":7237},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Binary search trees are excellent for tasks needing searching or ordering of data.","position":{"start":{"line":121,"column":5,"offset":7242},"end":{"line":121,"column":87,"offset":7324},"indent":[]}}],"position":{"start":{"line":121,"column":5,"offset":7242},"end":{"line":121,"column":87,"offset":7324},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":7238},"end":{"line":121,"column":87,"offset":7324},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":7183},"end":{"line":121,"column":87,"offset":7324},"indent":[1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"*","position":{"start":{"line":123,"column":5,"offset":7330},"end":{"line":123,"column":7,"offset":7332},"indent":[]}},{"type":"text","value":"Enjoying the article?","position":{"start":{"line":123,"column":7,"offset":7332},"end":{"line":123,"column":28,"offset":7353},"indent":[]}}],"position":{"start":{"line":123,"column":3,"offset":7328},"end":{"line":123,"column":30,"offset":7355},"indent":[]}},{"type":"text","value":" Scroll down to","position":{"start":{"line":123,"column":30,"offset":7355},"end":{"line":123,"column":45,"offset":7370},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":123,"column":45,"offset":7370},"end":{"line":123,"column":47,"offset":7372},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":123,"column":47,"offset":7372},"end":{"line":123,"column":48,"offset":7373},"indent":[]}},{"type":"emphasis","children":[{"type":"link","title":null,"url":"https://www.educative.io/blog/blog-newsletter-annoucement","children":[{"type":"text","value":"sign up","position":{"start":{"line":123,"column":50,"offset":7375},"end":{"line":123,"column":57,"offset":7382},"indent":[]}}],"position":{"start":{"line":123,"column":49,"offset":7374},"end":{"line":123,"column":117,"offset":7442},"indent":[]}}],"position":{"start":{"line":123,"column":48,"offset":7373},"end":{"line":123,"column":118,"offset":7443},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":123,"column":118,"offset":7443},"end":{"line":123,"column":119,"offset":7444},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"for our free, bi-monthly newsletter.","position":{"start":{"line":123,"column":120,"offset":7445},"end":{"line":123,"column":156,"offset":7481},"indent":[]}}],"position":{"start":{"line":123,"column":119,"offset":7444},"end":{"line":123,"column":157,"offset":7482},"indent":[]}}],"position":{"start":{"line":123,"column":3,"offset":7328},"end":{"line":123,"column":157,"offset":7482},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":7326},"end":{"line":123,"column":157,"offset":7482},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":125,"column":1,"offset":7484},"end":{"line":125,"column":2,"offset":7485},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":7484},"end":{"line":125,"column":2,"offset":7485},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#5-graphs","children":[],"position":{"start":{"line":127,"column":5,"offset":7491},"end":{"line":127,"column":99,"offset":7585},"indent":[]}},{"type":"text","value":"5. Graphs","position":{"start":{"line":127,"column":99,"offset":7585},"end":{"line":127,"column":108,"offset":7594},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":7487},"end":{"line":127,"column":108,"offset":7594},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Graphs are a relation-based data structure helpful for storing web-like relationships. Each node, or vertex, as they’re called in graphs, has a title (A, B, C, etc.), a value contained within, and a list of links (called edges) it has with other vertices.","position":{"start":{"line":129,"column":1,"offset":7596},"end":{"line":129,"column":256,"offset":7851},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":7596},"end":{"line":129,"column":256,"offset":7851},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/615c0612c32e8d319d2c79e596885e4aceb6ce7dc64ac235ede92637fac589f9/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34393132363931303737343437363830","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/615c0612c32e8d319d2c79e596885e4aceb6ce7dc64ac235ede92637fac589f9/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34393132363931303737343437363830","alt":"alt-text","position":{"start":{"line":131,"column":2,"offset":7854},"end":{"line":131,"column":279,"offset":8131},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":7853},"end":{"line":131,"column":546,"offset":8398},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":7853},"end":{"line":131,"column":546,"offset":8398},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the above example, each circle is a vertex, and each line is an edge. If produced in writing, this structure would look like:","position":{"start":{"line":133,"column":1,"offset":8400},"end":{"line":133,"column":129,"offset":8528},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":8400},"end":{"line":133,"column":129,"offset":8528},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"V = {a, b, c, d}","position":{"start":{"line":135,"column":2,"offset":8531},"end":{"line":135,"column":18,"offset":8547},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":8530},"end":{"line":135,"column":19,"offset":8548},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":8530},"end":{"line":135,"column":19,"offset":8548},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"E = {ab, ac, bc, cd}","position":{"start":{"line":137,"column":2,"offset":8551},"end":{"line":137,"column":22,"offset":8571},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":8550},"end":{"line":137,"column":23,"offset":8572},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":8550},"end":{"line":137,"column":23,"offset":8572},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While hard to visualize at first, this structure is invaluable in conveying relationship charts in textual form, anything from circuitry to train networks.","position":{"start":{"line":139,"column":1,"offset":8574},"end":{"line":139,"column":156,"offset":8729},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":8574},"end":{"line":139,"column":156,"offset":8729},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":141,"column":1,"offset":8731},"end":{"line":141,"column":11,"offset":8741},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":8731},"end":{"line":141,"column":11,"offset":8741},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Can quickly convey visuals over text","position":{"start":{"line":143,"column":5,"offset":8747},"end":{"line":143,"column":41,"offset":8783},"indent":[]}}],"position":{"start":{"line":143,"column":5,"offset":8747},"end":{"line":143,"column":41,"offset":8783},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":8743},"end":{"line":143,"column":41,"offset":8783},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Usable to model a diverse number of subjects so long as they contain a relational structure","position":{"start":{"line":144,"column":5,"offset":8788},"end":{"line":144,"column":96,"offset":8879},"indent":[]}}],"position":{"start":{"line":144,"column":5,"offset":8788},"end":{"line":144,"column":96,"offset":8879},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":8784},"end":{"line":144,"column":96,"offset":8879},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":8743},"end":{"line":144,"column":96,"offset":8879},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":146,"column":1,"offset":8881},"end":{"line":146,"column":14,"offset":8894},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":8881},"end":{"line":146,"column":14,"offset":8894},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"At a higher level, text can be time-consuming to convert to an image.","position":{"start":{"line":148,"column":5,"offset":8900},"end":{"line":148,"column":74,"offset":8969},"indent":[]}}],"position":{"start":{"line":148,"column":5,"offset":8900},"end":{"line":148,"column":74,"offset":8969},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":8896},"end":{"line":148,"column":74,"offset":8969},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It can be difficult to see the existing edges or how many edges a given vertex has connected to it","position":{"start":{"line":149,"column":5,"offset":8974},"end":{"line":149,"column":103,"offset":9072},"indent":[]}}],"position":{"start":{"line":149,"column":5,"offset":8974},"end":{"line":149,"column":103,"offset":9072},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":8970},"end":{"line":149,"column":103,"offset":9072},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":8896},"end":{"line":149,"column":103,"offset":9072},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-4","children":[],"position":{"start":{"line":151,"column":6,"offset":9079},"end":{"line":151,"column":106,"offset":9179},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":151,"column":106,"offset":9179},"end":{"line":151,"column":118,"offset":9191},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":9074},"end":{"line":151,"column":118,"offset":9191},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Network representations","position":{"start":{"line":153,"column":5,"offset":9197},"end":{"line":153,"column":28,"offset":9220},"indent":[]}}],"position":{"start":{"line":153,"column":5,"offset":9197},"end":{"line":153,"column":28,"offset":9220},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":9193},"end":{"line":153,"column":28,"offset":9220},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Modeling social networks, such as Facebook.","position":{"start":{"line":154,"column":5,"offset":9225},"end":{"line":154,"column":48,"offset":9268},"indent":[]}}],"position":{"start":{"line":154,"column":5,"offset":9225},"end":{"line":154,"column":48,"offset":9268},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":9221},"end":{"line":154,"column":48,"offset":9268},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":9193},"end":{"line":154,"column":48,"offset":9268},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":156,"column":1,"offset":9270},"end":{"line":156,"column":2,"offset":9271},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":9270},"end":{"line":156,"column":2,"offset":9271},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#6-hash-tables-map","children":[],"position":{"start":{"line":158,"column":5,"offset":9277},"end":{"line":158,"column":108,"offset":9380},"indent":[]}},{"type":"text","value":"6. Hash Tables (Map)","position":{"start":{"line":158,"column":108,"offset":9380},"end":{"line":158,"column":128,"offset":9400},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":9273},"end":{"line":158,"column":128,"offset":9400},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hash tables are a complex data structure capable of storing large amounts of information and retrieving specific elements efficiently. This data structure relies on the concept of key/value pairs, where the “key” is a searched string and the “value” is the data paired with that key.","position":{"start":{"line":160,"column":1,"offset":9402},"end":{"line":160,"column":284,"offset":9685},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":9402},"end":{"line":160,"column":284,"offset":9685},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://camo.githubusercontent.com/ed02956a5f707a017dc59966166c26835374fa0b48a9b6d0aaec06367d4dae10/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36373435393131313633303932393932","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/ed02956a5f707a017dc59966166c26835374fa0b48a9b6d0aaec06367d4dae10/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36373435393131313633303932393932","alt":"alt-text","position":{"start":{"line":162,"column":2,"offset":9688},"end":{"line":162,"column":279,"offset":9965},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":9687},"end":{"line":162,"column":546,"offset":10232},"indent":[]}},{"type":"text","value":" Each searched key is converted from its string form into a numerical value, called a hash, using a predefined hash function. This hash then points to a storage bucket – a smaller subgroup within the table. It then searches the bucket for the originally entered key and returns the value associated with that key.","position":{"start":{"line":162,"column":546,"offset":10232},"end":{"line":162,"column":859,"offset":10545},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":9687},"end":{"line":162,"column":859,"offset":10545},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Advantages","position":{"start":{"line":164,"column":1,"offset":10547},"end":{"line":164,"column":11,"offset":10557},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":10547},"end":{"line":164,"column":11,"offset":10557},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Key can be in any form, while array’s indices must be integers","position":{"start":{"line":166,"column":5,"offset":10563},"end":{"line":166,"column":67,"offset":10625},"indent":[]}}],"position":{"start":{"line":166,"column":5,"offset":10563},"end":{"line":166,"column":67,"offset":10625},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":10559},"end":{"line":166,"column":67,"offset":10625},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Highly efficient search function","position":{"start":{"line":167,"column":5,"offset":10630},"end":{"line":167,"column":37,"offset":10662},"indent":[]}}],"position":{"start":{"line":167,"column":5,"offset":10630},"end":{"line":167,"column":37,"offset":10662},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":10626},"end":{"line":167,"column":37,"offset":10662},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Constant number of operations for each search","position":{"start":{"line":168,"column":5,"offset":10667},"end":{"line":168,"column":50,"offset":10712},"indent":[]}}],"position":{"start":{"line":168,"column":5,"offset":10667},"end":{"line":168,"column":50,"offset":10712},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":10663},"end":{"line":168,"column":50,"offset":10712},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Constant cost for insertion or deletion operations","position":{"start":{"line":169,"column":5,"offset":10717},"end":{"line":169,"column":55,"offset":10767},"indent":[]}}],"position":{"start":{"line":169,"column":5,"offset":10717},"end":{"line":169,"column":55,"offset":10767},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":10713},"end":{"line":169,"column":55,"offset":10767},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":10559},"end":{"line":169,"column":55,"offset":10767},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":171,"column":1,"offset":10769},"end":{"line":171,"column":14,"offset":10782},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":10769},"end":{"line":171,"column":14,"offset":10782},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Collisions: an error caused when two keys convert to the same hash code or two hash codes point to the same value.","position":{"start":{"line":173,"column":5,"offset":10788},"end":{"line":173,"column":119,"offset":10902},"indent":[]}}],"position":{"start":{"line":173,"column":5,"offset":10788},"end":{"line":173,"column":119,"offset":10902},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":10784},"end":{"line":173,"column":119,"offset":10902},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"These errors can be common and often require an overhaul of the hash function.","position":{"start":{"line":174,"column":5,"offset":10907},"end":{"line":174,"column":83,"offset":10985},"indent":[]}}],"position":{"start":{"line":174,"column":5,"offset":10907},"end":{"line":174,"column":83,"offset":10985},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":10903},"end":{"line":174,"column":83,"offset":10985},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":10784},"end":{"line":174,"column":83,"offset":10985},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-5","children":[],"position":{"start":{"line":176,"column":6,"offset":10992},"end":{"line":176,"column":106,"offset":11092},"indent":[]}},{"type":"text","value":"Applications","position":{"start":{"line":176,"column":106,"offset":11092},"end":{"line":176,"column":118,"offset":11104},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":10987},"end":{"line":176,"column":118,"offset":11104},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Database storage","position":{"start":{"line":178,"column":5,"offset":11110},"end":{"line":178,"column":21,"offset":11126},"indent":[]}}],"position":{"start":{"line":178,"column":5,"offset":11110},"end":{"line":178,"column":21,"offset":11126},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":11106},"end":{"line":178,"column":21,"offset":11126},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Address lookups by name","position":{"start":{"line":179,"column":5,"offset":11131},"end":{"line":179,"column":28,"offset":11154},"indent":[]}}],"position":{"start":{"line":179,"column":5,"offset":11131},"end":{"line":179,"column":28,"offset":11154},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":11127},"end":{"line":179,"column":28,"offset":11154},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":11106},"end":{"line":179,"column":28,"offset":11154},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Each hash table can be very different, from the types of the keys and values, to the way their hash functions work. Due to these differences and the multi-layered aspects of a hash table, it is nearly impossible to encapsulate so generally.","position":{"start":{"line":181,"column":1,"offset":11156},"end":{"line":181,"column":241,"offset":11396},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":11156},"end":{"line":181,"column":241,"offset":11396},"indent":[]}},{"type":"paragraph","children":[{"type":"break","position":{"start":{"line":183,"column":1,"offset":11398},"end":{"line":184,"column":1,"offset":11400},"indent":[1]}},{"type":"text","value":"\\","position":{"start":{"line":184,"column":1,"offset":11400},"end":{"line":184,"column":2,"offset":11401},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":11398},"end":{"line":184,"column":2,"offset":11401},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#data-structure-interview-questions","children":[],"position":{"start":{"line":186,"column":5,"offset":11407},"end":{"line":186,"column":125,"offset":11527},"indent":[]}},{"type":"text","value":"Data structure interview questions","position":{"start":{"line":186,"column":125,"offset":11527},"end":{"line":186,"column":159,"offset":11561},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":11403},"end":{"line":186,"column":159,"offset":11561},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For many developers and programmers, data structures are most important for ","position":{"start":{"line":188,"column":1,"offset":11563},"end":{"line":188,"column":77,"offset":11639},"indent":[]}},{"type":"link","title":null,"url":"https://www.educative.io/blog/acing-the-javascript-interview-top-questions-explained","children":[{"type":"text","value":"cracking Javascript coding interviews","position":{"start":{"line":188,"column":78,"offset":11640},"end":{"line":188,"column":115,"offset":11677},"indent":[]}}],"position":{"start":{"line":188,"column":77,"offset":11639},"end":{"line":188,"column":202,"offset":11764},"indent":[]}},{"type":"text","value":". Questions and problems on data structures are fundamental to modern-day coding interviews. In fact, they have a lot to say over your hireability and entry-level rate as a candidate.","position":{"start":{"line":188,"column":202,"offset":11764},"end":{"line":188,"column":385,"offset":11947},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":11563},"end":{"line":188,"column":385,"offset":11947},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Today, we will be going over seven common coding interview questions for JavaScript data structures, one for each of the data structures we discussed above. Each will also discuss its time complexity based on the ","position":{"start":{"line":190,"column":1,"offset":11949},"end":{"line":190,"column":214,"offset":12162},"indent":[]}},{"type":"link","title":null,"url":"https://www.educative.io/blog/a-big-o-primer-for-beginning-devs","children":[{"type":"text","value":"BigO notation","position":{"start":{"line":190,"column":215,"offset":12163},"end":{"line":190,"column":228,"offset":12176},"indent":[]}}],"position":{"start":{"line":190,"column":214,"offset":12162},"end":{"line":190,"column":294,"offset":12242},"indent":[]}},{"type":"text","value":" theory.","position":{"start":{"line":190,"column":294,"offset":12242},"end":{"line":190,"column":302,"offset":12250},"indent":[]}}],"position":{"start":{"line":190,"column":1,"offset":11949},"end":{"line":190,"column":302,"offset":12250},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":192,"column":1,"offset":12252},"end":{"line":192,"column":2,"offset":12253},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":12252},"end":{"line":192,"column":2,"offset":12253},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#array-remove-all-even-integers-from-an-array","children":[],"position":{"start":{"line":194,"column":6,"offset":12260},"end":{"line":194,"column":136,"offset":12390},"indent":[]}},{"type":"text","value":"Array: Remove all even integers from an array","position":{"start":{"line":194,"column":136,"offset":12390},"end":{"line":194,"column":181,"offset":12435},"indent":[]}}],"position":{"start":{"line":194,"column":1,"offset":12255},"end":{"line":194,"column":181,"offset":12435},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":196,"column":3,"offset":12439},"end":{"line":196,"column":21,"offset":12457},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":12437},"end":{"line":196,"column":23,"offset":12459},"indent":[]}},{"type":"text","value":" Implement a function ","position":{"start":{"line":196,"column":23,"offset":12459},"end":{"line":196,"column":45,"offset":12481},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">removeEven(arr)</code>","position":{"start":{"line":196,"column":45,"offset":12481},"end":{"line":196,"column":62,"offset":12498},"indent":[]}},{"type":"text","value":", which takes an array arr in its input and removes all the even elements from a given array.","position":{"start":{"line":196,"column":62,"offset":12498},"end":{"line":196,"column":155,"offset":12591},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":12437},"end":{"line":196,"column":155,"offset":12591},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":198,"column":3,"offset":12595},"end":{"line":198,"column":9,"offset":12601},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":12593},"end":{"line":198,"column":11,"offset":12603},"indent":[]}},{"type":"text","value":" An array of random integers","position":{"start":{"line":198,"column":11,"offset":12603},"end":{"line":198,"column":39,"offset":12631},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":12593},"end":{"line":198,"column":39,"offset":12631},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":200,"column":1,"offset":12633},"end":{"line":202,"column":4,"offset":12641},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":204,"column":3,"offset":12645},"end":{"line":204,"column":10,"offset":12652},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":12643},"end":{"line":204,"column":12,"offset":12654},"indent":[]}},{"type":"text","value":" an array containing only odd integers","position":{"start":{"line":204,"column":12,"offset":12654},"end":{"line":204,"column":50,"offset":12692},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":12643},"end":{"line":204,"column":50,"offset":12692},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":206,"column":1,"offset":12694},"end":{"line":208,"column":4,"offset":12702},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There are two ways you could solve this coding problem in an interview. Let’s discuss each.","position":{"start":{"line":210,"column":1,"offset":12704},"end":{"line":210,"column":92,"offset":12795},"indent":[]}}],"position":{"start":{"line":210,"column":1,"offset":12704},"end":{"line":210,"column":92,"offset":12795},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":212,"column":1,"offset":12797},"end":{"line":212,"column":2,"offset":12798},"indent":[]}}],"position":{"start":{"line":212,"column":1,"offset":12797},"end":{"line":212,"column":2,"offset":12798},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Solution #1: Doing it “by hand”","position":{"start":{"line":214,"column":3,"offset":12802},"end":{"line":214,"column":34,"offset":12833},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":12800},"end":{"line":214,"column":36,"offset":12835},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":12800},"end":{"line":214,"column":36,"offset":12835},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"123456789function removeEven(arr) { var odds = ","position":{"start":{"line":216,"column":1,"offset":12837},"end":{"line":216,"column":48,"offset":12884},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":216,"column":48,"offset":12884},"end":{"line":216,"column":50,"offset":12886},"indent":[]}},{"type":"text","value":"] for (let number of arr) { if (number % 2 != 0) // Check if the item in the list is NOT even ('%' is the modulus symbol!) odds.push(number) //If it isn't even append it to the empty list } return odds // Return the new list}console.log(removeEven(","position":{"start":{"line":216,"column":50,"offset":12886},"end":{"line":216,"column":298,"offset":13134},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":216,"column":298,"offset":13134},"end":{"line":216,"column":300,"offset":13136},"indent":[]}},{"type":"text","value":"3, 2, 41, 3, 34]))Run","position":{"start":{"line":216,"column":300,"offset":13136},"end":{"line":216,"column":321,"offset":13157},"indent":[]}}],"position":{"start":{"line":216,"column":1,"offset":12837},"end":{"line":216,"column":321,"offset":13157},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This approach starts with the first element of the array. If that current element is not even, it pushes this element into a new array. If it is even, it will move to the next element, repeating until it reaches the end of the array. In regards to time complexity, since the entire array has to be iterated over, this solution is in ","position":{"start":{"line":218,"column":1,"offset":13159},"end":{"line":218,"column":334,"offset":13492},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(n)O(n).","position":{"start":{"line":218,"column":335,"offset":13493},"end":{"line":218,"column":344,"offset":13502},"indent":[]}}],"position":{"start":{"line":218,"column":334,"offset":13492},"end":{"line":218,"column":345,"offset":13503},"indent":[]}}],"position":{"start":{"line":218,"column":1,"offset":13159},"end":{"line":218,"column":345,"offset":13503},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":220,"column":1,"offset":13505},"end":{"line":220,"column":2,"offset":13506},"indent":[]}}],"position":{"start":{"line":220,"column":1,"offset":13505},"end":{"line":220,"column":2,"offset":13506},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Solution #2: Using filter() and lambda function","position":{"start":{"line":222,"column":3,"offset":13510},"end":{"line":222,"column":50,"offset":13557},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":13508},"end":{"line":222,"column":52,"offset":13559},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":13508},"end":{"line":222,"column":52,"offset":13559},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"1234function removeEven(arr) { return arr.filter((v => (v % 2) != 0))}console.log(removeEven(","position":{"start":{"line":224,"column":1,"offset":13561},"end":{"line":224,"column":94,"offset":13654},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":224,"column":94,"offset":13654},"end":{"line":224,"column":96,"offset":13656},"indent":[]}},{"type":"text","value":"3,2,41,3,34]))","position":{"start":{"line":224,"column":96,"offset":13656},"end":{"line":224,"column":110,"offset":13670},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":13561},"end":{"line":224,"column":110,"offset":13670},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This solution also begins with the first element and checks if it is even. If it is even, it filters out this element. If not, skips to the next element, repeating this process until it reaches the end of the array.","position":{"start":{"line":226,"column":1,"offset":13672},"end":{"line":226,"column":216,"offset":13887},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":13672},"end":{"line":226,"column":216,"offset":13887},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The filter function uses lambda or arrow functions, which use shorter, simpler syntax. The filter filters out the element for which the lambda function returns false. The time complexity of this is the same as the time complexity of the previous solution.","position":{"start":{"line":228,"column":1,"offset":13889},"end":{"line":228,"column":256,"offset":14144},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":13889},"end":{"line":228,"column":256,"offset":14144},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":230,"column":1,"offset":14146},"end":{"line":230,"column":2,"offset":14147},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":14146},"end":{"line":230,"column":2,"offset":14147},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#stack-check-for-balanced-parentheses-using-a-stack","children":[],"position":{"start":{"line":232,"column":6,"offset":14154},"end":{"line":232,"column":142,"offset":14290},"indent":[]}},{"type":"text","value":"Stack: Check for balanced parentheses using a stack","position":{"start":{"line":232,"column":142,"offset":14290},"end":{"line":232,"column":193,"offset":14341},"indent":[]}}],"position":{"start":{"line":232,"column":1,"offset":14149},"end":{"line":232,"column":193,"offset":14341},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":234,"column":3,"offset":14345},"end":{"line":234,"column":21,"offset":14363},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":14343},"end":{"line":234,"column":23,"offset":14365},"indent":[]}},{"type":"text","value":" Implement the ","position":{"start":{"line":234,"column":23,"offset":14365},"end":{"line":234,"column":38,"offset":14380},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">isBalanced()</code>","position":{"start":{"line":234,"column":38,"offset":14380},"end":{"line":234,"column":52,"offset":14394},"indent":[]}},{"type":"text","value":" function to take a string containing only curly ","position":{"start":{"line":234,"column":52,"offset":14394},"end":{"line":234,"column":101,"offset":14443},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">{}</code>","position":{"start":{"line":234,"column":101,"offset":14443},"end":{"line":234,"column":105,"offset":14447},"indent":[]}},{"type":"text","value":", square ","position":{"start":{"line":234,"column":105,"offset":14447},"end":{"line":234,"column":114,"offset":14456},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">[]</code>","position":{"start":{"line":234,"column":114,"offset":14456},"end":{"line":234,"column":118,"offset":14460},"indent":[]}},{"type":"text","value":", and round ","position":{"start":{"line":234,"column":118,"offset":14460},"end":{"line":234,"column":130,"offset":14472},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">()</code>","position":{"start":{"line":234,"column":130,"offset":14472},"end":{"line":234,"column":134,"offset":14476},"indent":[]}},{"type":"text","value":" parentheses. The function should tell us if all the parentheses in the string are balanced. This means that every opening parenthesis will have a closing one. For example, ","position":{"start":{"line":234,"column":134,"offset":14476},"end":{"line":234,"column":307,"offset":14649},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">{[]}</code>","position":{"start":{"line":234,"column":307,"offset":14649},"end":{"line":234,"column":313,"offset":14655},"indent":[]}},{"type":"text","value":" is balanced, but ","position":{"start":{"line":234,"column":313,"offset":14655},"end":{"line":234,"column":331,"offset":14673},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">{[}]</code>","position":{"start":{"line":234,"column":331,"offset":14673},"end":{"line":234,"column":337,"offset":14679},"indent":[]}},{"type":"text","value":" is not.","position":{"start":{"line":234,"column":337,"offset":14679},"end":{"line":234,"column":345,"offset":14687},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":14343},"end":{"line":234,"column":345,"offset":14687},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":236,"column":3,"offset":14691},"end":{"line":236,"column":9,"offset":14697},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":14689},"end":{"line":236,"column":11,"offset":14699},"indent":[]}},{"type":"text","value":" A string consisting solely of ","position":{"start":{"line":236,"column":11,"offset":14699},"end":{"line":236,"column":42,"offset":14730},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">(</code>","position":{"start":{"line":236,"column":42,"offset":14730},"end":{"line":236,"column":45,"offset":14733},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":236,"column":45,"offset":14733},"end":{"line":236,"column":47,"offset":14735},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">)</code>","position":{"start":{"line":236,"column":47,"offset":14735},"end":{"line":236,"column":50,"offset":14738},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":236,"column":50,"offset":14738},"end":{"line":236,"column":52,"offset":14740},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">{</code>","position":{"start":{"line":236,"column":52,"offset":14740},"end":{"line":236,"column":55,"offset":14743},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":236,"column":55,"offset":14743},"end":{"line":236,"column":57,"offset":14745},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">}</code>","position":{"start":{"line":236,"column":57,"offset":14745},"end":{"line":236,"column":60,"offset":14748},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":236,"column":60,"offset":14748},"end":{"line":236,"column":62,"offset":14750},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">[</code>","position":{"start":{"line":236,"column":62,"offset":14750},"end":{"line":236,"column":65,"offset":14753},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":236,"column":65,"offset":14753},"end":{"line":236,"column":70,"offset":14758},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">]</code>","position":{"start":{"line":236,"column":70,"offset":14758},"end":{"line":236,"column":73,"offset":14761},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":14689},"end":{"line":236,"column":73,"offset":14761},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":238,"column":1,"offset":14763},"end":{"line":240,"column":4,"offset":14771},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":242,"column":3,"offset":14775},"end":{"line":242,"column":10,"offset":14782},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":14773},"end":{"line":242,"column":12,"offset":14784},"indent":[]}},{"type":"text","value":" Returns ","position":{"start":{"line":242,"column":12,"offset":14784},"end":{"line":242,"column":21,"offset":14793},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">False</code>","position":{"start":{"line":242,"column":21,"offset":14793},"end":{"line":242,"column":28,"offset":14800},"indent":[]}},{"type":"text","value":" if the expression doesn’t have balanced parentheses. If it does, the function returns ","position":{"start":{"line":242,"column":28,"offset":14800},"end":{"line":242,"column":115,"offset":14887},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">True</code>","position":{"start":{"line":242,"column":115,"offset":14887},"end":{"line":242,"column":121,"offset":14893},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":242,"column":121,"offset":14893},"end":{"line":242,"column":122,"offset":14894},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":14773},"end":{"line":242,"column":122,"offset":14894},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":244,"column":1,"offset":14896},"end":{"line":246,"column":4,"offset":14904},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To solve this problem, we can simply use a stack of characters. Look below at the code to see how it works.","position":{"start":{"line":248,"column":1,"offset":14906},"end":{"line":248,"column":108,"offset":15013},"indent":[]}}],"position":{"start":{"line":248,"column":1,"offset":14906},"end":{"line":248,"column":108,"offset":15013},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsStack.js12345678910111213141516171819202122232425262728293031\"use strict\";module.exports = class Stack { constructor() { this.items = ","position":{"start":{"line":250,"column":1,"offset":15015},"end":{"line":250,"column":143,"offset":15157},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":250,"column":143,"offset":15157},"end":{"line":250,"column":145,"offset":15159},"indent":[]}},{"type":"text","value":"]; this.top = null; } getTop() { if (this.items.length == 0) return null; return this.top; } isEmpty() { return this.items.length == 0; } size() { return this.items.length; } push(element) { this.items.push(element); this.top = element; } pop() { if (this.items.length != 0) { if (this.items.length == 1) { this.top = null; return this.items.pop();Run","position":{"start":{"line":250,"column":145,"offset":15159},"end":{"line":250,"column":496,"offset":15510},"indent":[]}}],"position":{"start":{"line":250,"column":1,"offset":15015},"end":{"line":250,"column":496,"offset":15510},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This process will iterate over the string one character at a time. We can determine that the string is unbalanced based on two factors:","position":{"start":{"line":252,"column":1,"offset":15512},"end":{"line":252,"column":136,"offset":15647},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":15512},"end":{"line":252,"column":136,"offset":15647},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The stack is empty.","position":{"start":{"line":254,"column":4,"offset":15652},"end":{"line":254,"column":23,"offset":15671},"indent":[]}}],"position":{"start":{"line":254,"column":4,"offset":15652},"end":{"line":254,"column":23,"offset":15671},"indent":[]}}],"position":{"start":{"line":254,"column":1,"offset":15649},"end":{"line":254,"column":23,"offset":15671},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The top element in the stack is not the right type.","position":{"start":{"line":255,"column":4,"offset":15675},"end":{"line":255,"column":55,"offset":15726},"indent":[]}}],"position":{"start":{"line":255,"column":4,"offset":15675},"end":{"line":255,"column":55,"offset":15726},"indent":[]}}],"position":{"start":{"line":255,"column":1,"offset":15672},"end":{"line":255,"column":55,"offset":15726},"indent":[]}}],"position":{"start":{"line":254,"column":1,"offset":15649},"end":{"line":255,"column":55,"offset":15726},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"If either of these conditions is true, we return ","position":{"start":{"line":257,"column":1,"offset":15728},"end":{"line":257,"column":50,"offset":15777},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">False</code>","position":{"start":{"line":257,"column":50,"offset":15777},"end":{"line":257,"column":57,"offset":15784},"indent":[]}},{"type":"text","value":". If the parenthesis is an opening parenthesis, it is pushed into the stack. If by the end all are balanced, the stack will be empty. If it is not empty, we return ","position":{"start":{"line":257,"column":57,"offset":15784},"end":{"line":257,"column":221,"offset":15948},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">False</code>","position":{"start":{"line":257,"column":221,"offset":15948},"end":{"line":257,"column":228,"offset":15955},"indent":[]}},{"type":"text","value":". Since we traverse the string exp only once, the time complexity is ","position":{"start":{"line":257,"column":228,"offset":15955},"end":{"line":257,"column":297,"offset":16024},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(n)","position":{"start":{"line":257,"column":298,"offset":16025},"end":{"line":257,"column":302,"offset":16029},"indent":[]}}],"position":{"start":{"line":257,"column":297,"offset":16024},"end":{"line":257,"column":303,"offset":16030},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":257,"column":303,"offset":16030},"end":{"line":257,"column":304,"offset":16031},"indent":[]}}],"position":{"start":{"line":257,"column":1,"offset":15728},"end":{"line":257,"column":304,"offset":16031},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":259,"column":1,"offset":16033},"end":{"line":259,"column":2,"offset":16034},"indent":[]}}],"position":{"start":{"line":259,"column":1,"offset":16033},"end":{"line":259,"column":2,"offset":16034},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#queue-generate-binary-numbers-from-1-to-n","children":[],"position":{"start":{"line":261,"column":6,"offset":16041},"end":{"line":261,"column":133,"offset":16168},"indent":[]}},{"type":"text","value":"Queue: Generate Binary Numbers from 1 to n","position":{"start":{"line":261,"column":133,"offset":16168},"end":{"line":261,"column":175,"offset":16210},"indent":[]}}],"position":{"start":{"line":261,"column":1,"offset":16036},"end":{"line":261,"column":175,"offset":16210},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":263,"column":3,"offset":16214},"end":{"line":263,"column":21,"offset":16232},"indent":[]}}],"position":{"start":{"line":263,"column":1,"offset":16212},"end":{"line":263,"column":23,"offset":16234},"indent":[]}},{"type":"text","value":" Implement a function ","position":{"start":{"line":263,"column":23,"offset":16234},"end":{"line":263,"column":45,"offset":16256},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">findBin(n)</code>","position":{"start":{"line":263,"column":45,"offset":16256},"end":{"line":263,"column":57,"offset":16268},"indent":[]}},{"type":"text","value":", which will generate binary numbers from ","position":{"start":{"line":263,"column":57,"offset":16268},"end":{"line":263,"column":99,"offset":16310},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":263,"column":99,"offset":16310},"end":{"line":263,"column":102,"offset":16313},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":263,"column":102,"offset":16313},"end":{"line":263,"column":106,"offset":16317},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">n</code>","position":{"start":{"line":263,"column":106,"offset":16317},"end":{"line":263,"column":109,"offset":16320},"indent":[]}},{"type":"text","value":" in the form of a string using a queue.","position":{"start":{"line":263,"column":109,"offset":16320},"end":{"line":263,"column":148,"offset":16359},"indent":[]}}],"position":{"start":{"line":263,"column":1,"offset":16212},"end":{"line":263,"column":148,"offset":16359},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":265,"column":3,"offset":16363},"end":{"line":265,"column":9,"offset":16369},"indent":[]}}],"position":{"start":{"line":265,"column":1,"offset":16361},"end":{"line":265,"column":11,"offset":16371},"indent":[]}},{"type":"text","value":" A positive integer n","position":{"start":{"line":265,"column":11,"offset":16371},"end":{"line":265,"column":32,"offset":16392},"indent":[]}}],"position":{"start":{"line":265,"column":1,"offset":16361},"end":{"line":265,"column":32,"offset":16392},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":267,"column":1,"offset":16394},"end":{"line":269,"column":4,"offset":16402},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":271,"column":3,"offset":16406},"end":{"line":271,"column":10,"offset":16413},"indent":[]}}],"position":{"start":{"line":271,"column":1,"offset":16404},"end":{"line":271,"column":12,"offset":16415},"indent":[]}},{"type":"text","value":" Returns binary numbers in the form of strings from ","position":{"start":{"line":271,"column":12,"offset":16415},"end":{"line":271,"column":64,"offset":16467},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":271,"column":64,"offset":16467},"end":{"line":271,"column":67,"offset":16470},"indent":[]}},{"type":"text","value":" up to ","position":{"start":{"line":271,"column":67,"offset":16470},"end":{"line":271,"column":74,"offset":16477},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">n</code>","position":{"start":{"line":271,"column":74,"offset":16477},"end":{"line":271,"column":77,"offset":16480},"indent":[]}}],"position":{"start":{"line":271,"column":1,"offset":16404},"end":{"line":271,"column":77,"offset":16480},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":273,"column":1,"offset":16482},"end":{"line":275,"column":4,"offset":16490},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The easiest way to solve this problem is using a queue to generate new numbers from previous numbers. Let’s break that down.","position":{"start":{"line":277,"column":1,"offset":16492},"end":{"line":277,"column":125,"offset":16616},"indent":[]}}],"position":{"start":{"line":277,"column":1,"offset":16492},"end":{"line":277,"column":125,"offset":16616},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsQueue.js12345678910111213141516171819202122232425262728293031\"use strict\";module.exports = class Queue { constructor() { this.items = ","position":{"start":{"line":279,"column":1,"offset":16618},"end":{"line":279,"column":143,"offset":16760},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":279,"column":143,"offset":16760},"end":{"line":279,"column":145,"offset":16762},"indent":[]}},{"type":"text","value":"]; this.front = null; this.back = null; } isEmpty() { return this.items.length == 0; } getFront() { if (this.items.length != 0) { return this.items","position":{"start":{"line":279,"column":145,"offset":16762},"end":{"line":279,"column":292,"offset":16909},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":279,"column":292,"offset":16909},"end":{"line":279,"column":294,"offset":16911},"indent":[]}},{"type":"text","value":"0]; } else return null; } size() { return this.items.length; } enqueue(element) { this.items.push(element); }Run","position":{"start":{"line":279,"column":294,"offset":16911},"end":{"line":279,"column":406,"offset":17023},"indent":[]}}],"position":{"start":{"line":279,"column":1,"offset":16618},"end":{"line":279,"column":406,"offset":17023},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The key is to generate consecutive binary numbers by appending 0 and 1 to previous binary numbers. To clarify,","position":{"start":{"line":281,"column":1,"offset":17025},"end":{"line":281,"column":111,"offset":17135},"indent":[]}}],"position":{"start":{"line":281,"column":1,"offset":17025},"end":{"line":281,"column":111,"offset":17135},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"10 and 11 can be generated if 0 and 1 are appended to 1.","position":{"start":{"line":283,"column":5,"offset":17141},"end":{"line":283,"column":61,"offset":17197},"indent":[]}}],"position":{"start":{"line":283,"column":5,"offset":17141},"end":{"line":283,"column":61,"offset":17197},"indent":[]}}],"position":{"start":{"line":283,"column":1,"offset":17137},"end":{"line":283,"column":61,"offset":17197},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"100 and 101 are generated if 0 and 1 are appended to 10.","position":{"start":{"line":284,"column":5,"offset":17202},"end":{"line":284,"column":61,"offset":17258},"indent":[]}}],"position":{"start":{"line":284,"column":5,"offset":17202},"end":{"line":284,"column":61,"offset":17258},"indent":[]}}],"position":{"start":{"line":284,"column":1,"offset":17198},"end":{"line":284,"column":61,"offset":17258},"indent":[]}}],"position":{"start":{"line":283,"column":1,"offset":17137},"end":{"line":284,"column":61,"offset":17258},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Once we generate a binary number, it is then enqueued to a queue so that new binary numbers can be generated if we append 0 and 1 when that number will be enqueued.","position":{"start":{"line":286,"column":1,"offset":17260},"end":{"line":286,"column":165,"offset":17424},"indent":[]}}],"position":{"start":{"line":286,"column":1,"offset":17260},"end":{"line":286,"column":165,"offset":17424},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since a queue follows the ","position":{"start":{"line":288,"column":1,"offset":17426},"end":{"line":288,"column":27,"offset":17452},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"First-In First-Out","position":{"start":{"line":288,"column":28,"offset":17453},"end":{"line":288,"column":46,"offset":17471},"indent":[]}}],"position":{"start":{"line":288,"column":27,"offset":17452},"end":{"line":288,"column":47,"offset":17472},"indent":[]}},{"type":"text","value":" property, the enqueued binary numbers are dequeued so that the resulting array is mathematically correct.","position":{"start":{"line":288,"column":47,"offset":17472},"end":{"line":288,"column":153,"offset":17578},"indent":[]}}],"position":{"start":{"line":288,"column":1,"offset":17426},"end":{"line":288,"column":153,"offset":17578},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Look at the code above. On line 7, ","position":{"start":{"line":290,"column":1,"offset":17580},"end":{"line":290,"column":36,"offset":17615},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":290,"column":36,"offset":17615},"end":{"line":290,"column":39,"offset":17618},"indent":[]}},{"type":"text","value":" is enqueued. To generate the sequence of binary numbers, a number is dequeued and stored in the array ","position":{"start":{"line":290,"column":39,"offset":17618},"end":{"line":290,"column":142,"offset":17721},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">result</code>","position":{"start":{"line":290,"column":142,"offset":17721},"end":{"line":290,"column":150,"offset":17729},"indent":[]}},{"type":"text","value":". On lines 11-12, we append ","position":{"start":{"line":290,"column":150,"offset":17729},"end":{"line":290,"column":178,"offset":17757},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">0</code>","position":{"start":{"line":290,"column":178,"offset":17757},"end":{"line":290,"column":181,"offset":17760},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":290,"column":181,"offset":17760},"end":{"line":290,"column":186,"offset":17765},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":290,"column":186,"offset":17765},"end":{"line":290,"column":189,"offset":17768},"indent":[]}},{"type":"text","value":" to produce the next numbers.","position":{"start":{"line":290,"column":189,"offset":17768},"end":{"line":290,"column":218,"offset":17797},"indent":[]}}],"position":{"start":{"line":290,"column":1,"offset":17580},"end":{"line":290,"column":218,"offset":17797},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Those new numbers are also enqueued at lines 14-15. The queue will take integer values, so it converts the string to an integer as it is enqueued.","position":{"start":{"line":292,"column":1,"offset":17799},"end":{"line":292,"column":147,"offset":17945},"indent":[]}}],"position":{"start":{"line":292,"column":1,"offset":17799},"end":{"line":292,"column":147,"offset":17945},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The time complexity of this solution is in ","position":{"start":{"line":294,"column":1,"offset":17947},"end":{"line":294,"column":44,"offset":17990},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(n)O(n)","position":{"start":{"line":294,"column":45,"offset":17991},"end":{"line":294,"column":53,"offset":17999},"indent":[]}}],"position":{"start":{"line":294,"column":44,"offset":17990},"end":{"line":294,"column":54,"offset":18000},"indent":[]}},{"type":"text","value":" since constant-time operations are executed for n times.","position":{"start":{"line":294,"column":54,"offset":18000},"end":{"line":294,"column":111,"offset":18057},"indent":[]}}],"position":{"start":{"line":294,"column":1,"offset":17947},"end":{"line":294,"column":111,"offset":18057},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":296,"column":1,"offset":18059},"end":{"line":296,"column":2,"offset":18060},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":18059},"end":{"line":296,"column":2,"offset":18060},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#linked-list-reverse-a-linked-list","children":[],"position":{"start":{"line":298,"column":6,"offset":18067},"end":{"line":298,"column":125,"offset":18186},"indent":[]}},{"type":"text","value":"Linked List: Reverse a linked list","position":{"start":{"line":298,"column":125,"offset":18186},"end":{"line":298,"column":159,"offset":18220},"indent":[]}}],"position":{"start":{"line":298,"column":1,"offset":18062},"end":{"line":298,"column":159,"offset":18220},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":300,"column":3,"offset":18224},"end":{"line":300,"column":21,"offset":18242},"indent":[]}}],"position":{"start":{"line":300,"column":1,"offset":18222},"end":{"line":300,"column":23,"offset":18244},"indent":[]}},{"type":"text","value":" Write the ","position":{"start":{"line":300,"column":23,"offset":18244},"end":{"line":300,"column":34,"offset":18255},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">reverse</code>","position":{"start":{"line":300,"column":34,"offset":18255},"end":{"line":300,"column":43,"offset":18264},"indent":[]}},{"type":"text","value":" function to take a singly linked list and reverse it in place.","position":{"start":{"line":300,"column":43,"offset":18264},"end":{"line":300,"column":106,"offset":18327},"indent":[]}}],"position":{"start":{"line":300,"column":1,"offset":18222},"end":{"line":300,"column":106,"offset":18327},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":302,"column":3,"offset":18331},"end":{"line":302,"column":9,"offset":18337},"indent":[]}}],"position":{"start":{"line":302,"column":1,"offset":18329},"end":{"line":302,"column":11,"offset":18339},"indent":[]}},{"type":"text","value":" a singly linked list","position":{"start":{"line":302,"column":11,"offset":18339},"end":{"line":302,"column":32,"offset":18360},"indent":[]}}],"position":{"start":{"line":302,"column":1,"offset":18329},"end":{"line":302,"column":32,"offset":18360},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":304,"column":1,"offset":18362},"end":{"line":306,"column":4,"offset":18370},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":308,"column":3,"offset":18374},"end":{"line":308,"column":10,"offset":18381},"indent":[]}}],"position":{"start":{"line":308,"column":1,"offset":18372},"end":{"line":308,"column":12,"offset":18383},"indent":[]}},{"type":"text","value":" a reverse linked list","position":{"start":{"line":308,"column":12,"offset":18383},"end":{"line":308,"column":34,"offset":18405},"indent":[]}}],"position":{"start":{"line":308,"column":1,"offset":18372},"end":{"line":308,"column":34,"offset":18405},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":310,"column":1,"offset":18407},"end":{"line":312,"column":4,"offset":18415},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The easiest way to solve this problem is by using iterative pointer manipulation. Let’s take a look.","position":{"start":{"line":314,"column":1,"offset":18417},"end":{"line":314,"column":101,"offset":18517},"indent":[]}}],"position":{"start":{"line":314,"column":1,"offset":18417},"end":{"line":314,"column":101,"offset":18517},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsLinkedList.jsNode.js12345678910111213141516171819202122232425262728293031\"use strict\";const Node = require('./Node.js');module.exports = class LinkedList { constructor() { this.head = null; } //Insertion At Head insertAtHead(newData) { let tempNode = new Node(newData); tempNode.nextElement = this.head; this.head = tempNode; return this; //returning the updated list } isEmpty() { return (this.head == null); } //function to print the linked list printList() { if (this.isEmpty()) { console.log(\"Empty List\"); return false; } else { let temp = this.head; while (temp != null) { process.stdout.write(String(temp.data)); process.stdout.write(\" -> \"); temp = temp.nextElement;Run","position":{"start":{"line":316,"column":1,"offset":18519},"end":{"line":316,"column":686,"offset":19204},"indent":[]}}],"position":{"start":{"line":316,"column":1,"offset":18519},"end":{"line":316,"column":686,"offset":19204},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We use a loop to iterate through the input list. For a ","position":{"start":{"line":318,"column":1,"offset":19206},"end":{"line":318,"column":56,"offset":19261},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">current</code>","position":{"start":{"line":318,"column":56,"offset":19261},"end":{"line":318,"column":65,"offset":19270},"indent":[]}},{"type":"text","value":" node, its link with the ","position":{"start":{"line":318,"column":65,"offset":19270},"end":{"line":318,"column":90,"offset":19295},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">previous</code>","position":{"start":{"line":318,"column":90,"offset":19295},"end":{"line":318,"column":100,"offset":19305},"indent":[]}},{"type":"text","value":" node is reversed. then, ","position":{"start":{"line":318,"column":100,"offset":19305},"end":{"line":318,"column":125,"offset":19330},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">next</code>","position":{"start":{"line":318,"column":125,"offset":19330},"end":{"line":318,"column":131,"offset":19336},"indent":[]}},{"type":"text","value":" stores the next node in the list. Let’s break that down by line.","position":{"start":{"line":318,"column":131,"offset":19336},"end":{"line":318,"column":196,"offset":19401},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":19206},"end":{"line":318,"column":196,"offset":19401},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 22- Store the ","position":{"start":{"line":320,"column":5,"offset":19407},"end":{"line":320,"column":24,"offset":19426},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">current</code>","position":{"start":{"line":320,"column":24,"offset":19426},"end":{"line":320,"column":33,"offset":19435},"indent":[]}},{"type":"text","value":" node’s ","position":{"start":{"line":320,"column":33,"offset":19435},"end":{"line":320,"column":41,"offset":19443},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">nextElement</code>","position":{"start":{"line":320,"column":41,"offset":19443},"end":{"line":320,"column":54,"offset":19456},"indent":[]}},{"type":"text","value":" in ","position":{"start":{"line":320,"column":54,"offset":19456},"end":{"line":320,"column":58,"offset":19460},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">next</code>","position":{"start":{"line":320,"column":58,"offset":19460},"end":{"line":320,"column":64,"offset":19466},"indent":[]}}],"position":{"start":{"line":320,"column":5,"offset":19407},"end":{"line":320,"column":64,"offset":19466},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":19403},"end":{"line":320,"column":64,"offset":19466},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 23 - Set ","position":{"start":{"line":321,"column":5,"offset":19471},"end":{"line":321,"column":19,"offset":19485},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">current</code>","position":{"start":{"line":321,"column":19,"offset":19485},"end":{"line":321,"column":28,"offset":19494},"indent":[]}},{"type":"text","value":" node’s ","position":{"start":{"line":321,"column":28,"offset":19494},"end":{"line":321,"column":36,"offset":19502},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">nextElement</code>","position":{"start":{"line":321,"column":36,"offset":19502},"end":{"line":321,"column":49,"offset":19515},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":321,"column":49,"offset":19515},"end":{"line":321,"column":53,"offset":19519},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">previous</code>","position":{"start":{"line":321,"column":53,"offset":19519},"end":{"line":321,"column":63,"offset":19529},"indent":[]}}],"position":{"start":{"line":321,"column":5,"offset":19471},"end":{"line":321,"column":63,"offset":19529},"indent":[]}}],"position":{"start":{"line":321,"column":1,"offset":19467},"end":{"line":321,"column":63,"offset":19529},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 24 - Make the ","position":{"start":{"line":322,"column":5,"offset":19534},"end":{"line":322,"column":24,"offset":19553},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">current</code>","position":{"start":{"line":322,"column":24,"offset":19553},"end":{"line":322,"column":33,"offset":19562},"indent":[]}},{"type":"text","value":" node the new ","position":{"start":{"line":322,"column":33,"offset":19562},"end":{"line":322,"column":47,"offset":19576},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">previous</code>","position":{"start":{"line":322,"column":47,"offset":19576},"end":{"line":322,"column":57,"offset":19586},"indent":[]}},{"type":"text","value":" for the next iteration","position":{"start":{"line":322,"column":57,"offset":19586},"end":{"line":322,"column":80,"offset":19609},"indent":[]}}],"position":{"start":{"line":322,"column":5,"offset":19534},"end":{"line":322,"column":80,"offset":19609},"indent":[]}}],"position":{"start":{"line":322,"column":1,"offset":19530},"end":{"line":322,"column":80,"offset":19609},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 25 - Use ","position":{"start":{"line":323,"column":5,"offset":19614},"end":{"line":323,"column":19,"offset":19628},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">next</code>","position":{"start":{"line":323,"column":19,"offset":19628},"end":{"line":323,"column":25,"offset":19634},"indent":[]}},{"type":"text","value":" to go to the next node","position":{"start":{"line":323,"column":25,"offset":19634},"end":{"line":323,"column":48,"offset":19657},"indent":[]}}],"position":{"start":{"line":323,"column":5,"offset":19614},"end":{"line":323,"column":48,"offset":19657},"indent":[]}}],"position":{"start":{"line":323,"column":1,"offset":19610},"end":{"line":323,"column":48,"offset":19657},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Line 29 - We reset the ","position":{"start":{"line":324,"column":5,"offset":19662},"end":{"line":324,"column":28,"offset":19685},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">head</code>","position":{"start":{"line":324,"column":28,"offset":19685},"end":{"line":324,"column":34,"offset":19691},"indent":[]}},{"type":"text","value":" pointer to point at the last node","position":{"start":{"line":324,"column":34,"offset":19691},"end":{"line":324,"column":68,"offset":19725},"indent":[]}}],"position":{"start":{"line":324,"column":5,"offset":19662},"end":{"line":324,"column":68,"offset":19725},"indent":[]}}],"position":{"start":{"line":324,"column":1,"offset":19658},"end":{"line":324,"column":68,"offset":19725},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":19403},"end":{"line":324,"column":68,"offset":19725},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Since the list is traversed only once, the algorithm runs in ","position":{"start":{"line":326,"column":1,"offset":19727},"end":{"line":326,"column":62,"offset":19788},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(n)","position":{"start":{"line":326,"column":63,"offset":19789},"end":{"line":326,"column":67,"offset":19793},"indent":[]}}],"position":{"start":{"line":326,"column":62,"offset":19788},"end":{"line":326,"column":68,"offset":19794},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":326,"column":68,"offset":19794},"end":{"line":326,"column":69,"offset":19795},"indent":[]}}],"position":{"start":{"line":326,"column":1,"offset":19727},"end":{"line":326,"column":69,"offset":19795},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":328,"column":1,"offset":19797},"end":{"line":328,"column":2,"offset":19798},"indent":[]}}],"position":{"start":{"line":328,"column":1,"offset":19797},"end":{"line":328,"column":2,"offset":19798},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#tree-find-the-minimum-value-in-a-binary-search-tree","children":[],"position":{"start":{"line":330,"column":6,"offset":19805},"end":{"line":330,"column":143,"offset":19942},"indent":[]}},{"type":"text","value":"Tree: Find the Minimum Value in a Binary Search Tree","position":{"start":{"line":330,"column":143,"offset":19942},"end":{"line":330,"column":195,"offset":19994},"indent":[]}}],"position":{"start":{"line":330,"column":1,"offset":19800},"end":{"line":330,"column":195,"offset":19994},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":332,"column":3,"offset":19998},"end":{"line":332,"column":21,"offset":20016},"indent":[]}}],"position":{"start":{"line":332,"column":1,"offset":19996},"end":{"line":332,"column":23,"offset":20018},"indent":[]}},{"type":"text","value":" Use the ","position":{"start":{"line":332,"column":23,"offset":20018},"end":{"line":332,"column":32,"offset":20027},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">findMin(root)</code>","position":{"start":{"line":332,"column":32,"offset":20027},"end":{"line":332,"column":47,"offset":20042},"indent":[]}},{"type":"text","value":" function to find the minimum value in a Binary Search Tree.","position":{"start":{"line":332,"column":47,"offset":20042},"end":{"line":332,"column":107,"offset":20102},"indent":[]}}],"position":{"start":{"line":332,"column":1,"offset":19996},"end":{"line":332,"column":107,"offset":20102},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":334,"column":3,"offset":20106},"end":{"line":334,"column":9,"offset":20112},"indent":[]}}],"position":{"start":{"line":334,"column":1,"offset":20104},"end":{"line":334,"column":11,"offset":20114},"indent":[]}},{"type":"text","value":" a root node for a binary search tree","position":{"start":{"line":334,"column":11,"offset":20114},"end":{"line":334,"column":48,"offset":20151},"indent":[]}}],"position":{"start":{"line":334,"column":1,"offset":20104},"end":{"line":334,"column":48,"offset":20151},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":336,"column":1,"offset":20153},"end":{"line":338,"column":4,"offset":20161},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":340,"column":3,"offset":20165},"end":{"line":340,"column":10,"offset":20172},"indent":[]}}],"position":{"start":{"line":340,"column":1,"offset":20163},"end":{"line":340,"column":12,"offset":20174},"indent":[]}},{"type":"text","value":" the smallest integer value from that binary search tree","position":{"start":{"line":340,"column":12,"offset":20174},"end":{"line":340,"column":68,"offset":20230},"indent":[]}}],"position":{"start":{"line":340,"column":1,"offset":20163},"end":{"line":340,"column":68,"offset":20230},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":342,"column":1,"offset":20232},"end":{"line":344,"column":4,"offset":20240},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s look at an easy solution for this problem.","position":{"start":{"line":346,"column":1,"offset":20242},"end":{"line":346,"column":49,"offset":20290},"indent":[]}}],"position":{"start":{"line":346,"column":1,"offset":20242},"end":{"line":346,"column":49,"offset":20290},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":348,"column":1,"offset":20292},"end":{"line":348,"column":2,"offset":20293},"indent":[]}}],"position":{"start":{"line":348,"column":1,"offset":20292},"end":{"line":348,"column":2,"offset":20293},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Solution: Iterative ","position":{"start":{"line":350,"column":3,"offset":20297},"end":{"line":350,"column":23,"offset":20317},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">findMin( )</code>","position":{"start":{"line":350,"column":23,"offset":20317},"end":{"line":350,"column":35,"offset":20329},"indent":[]}}],"position":{"start":{"line":350,"column":1,"offset":20295},"end":{"line":350,"column":37,"offset":20331},"indent":[]}}],"position":{"start":{"line":350,"column":1,"offset":20295},"end":{"line":350,"column":37,"offset":20331},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This solution begins by checking if the root is ","position":{"start":{"line":352,"column":1,"offset":20333},"end":{"line":352,"column":49,"offset":20381},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">null</code>","position":{"start":{"line":352,"column":49,"offset":20381},"end":{"line":352,"column":55,"offset":20387},"indent":[]}},{"type":"text","value":". It returns ","position":{"start":{"line":352,"column":55,"offset":20387},"end":{"line":352,"column":68,"offset":20400},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">null</code>","position":{"start":{"line":352,"column":68,"offset":20400},"end":{"line":352,"column":74,"offset":20406},"indent":[]}},{"type":"text","value":" if so. It then moves to the left subtree and continues with each node’s left child until the left-most child is reached.","position":{"start":{"line":352,"column":74,"offset":20406},"end":{"line":352,"column":195,"offset":20527},"indent":[]}}],"position":{"start":{"line":352,"column":1,"offset":20333},"end":{"line":352,"column":195,"offset":20527},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsBinarySearchTree.jsNode.js12345678910111213141516171819202122232425262728293031\"use strict\";const Node = require('./Node.js');module.exports = class BinarySearchTree { constructor(rootValue) { this.root = new Node(rootValue); } insert(currentNode, newValue) { if (currentNode === null) { currentNode = new Node(newValue); } else if (newValue < currentNode.val) { currentNode.leftChild = this.insert(currentNode.leftChild, newValue); } else { currentNode.rightChild = this.insert(currentNode.rightChild, newValue); } return currentNode; } insertBST(newValue) { if(this.root==null){ this.root=new Node(newValue); return; } this.insert(this.root, newValue); } preOrderPrint(currentNode) { if (currentNode !== null) { console.log(currentNode.val); this.preOrderPrint(currentNode.leftChild);Run\\","position":{"start":{"line":354,"column":1,"offset":20529},"end":{"line":354,"column":799,"offset":21327},"indent":[]}}],"position":{"start":{"line":354,"column":1,"offset":20529},"end":{"line":354,"column":799,"offset":21327},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#graph-remove-edge","children":[],"position":{"start":{"line":356,"column":6,"offset":21334},"end":{"line":356,"column":109,"offset":21437},"indent":[]}},{"type":"text","value":"Graph: Remove Edge","position":{"start":{"line":356,"column":109,"offset":21437},"end":{"line":356,"column":127,"offset":21455},"indent":[]}}],"position":{"start":{"line":356,"column":1,"offset":21329},"end":{"line":356,"column":127,"offset":21455},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":358,"column":3,"offset":21459},"end":{"line":358,"column":21,"offset":21477},"indent":[]}}],"position":{"start":{"line":358,"column":1,"offset":21457},"end":{"line":358,"column":23,"offset":21479},"indent":[]}},{"type":"text","value":" Implement the removeEdge function to take a source and a destination as arguments. It should detect if an edge exists between them.","position":{"start":{"line":358,"column":23,"offset":21479},"end":{"line":358,"column":155,"offset":21611},"indent":[]}}],"position":{"start":{"line":358,"column":1,"offset":21457},"end":{"line":358,"column":155,"offset":21611},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":360,"column":3,"offset":21615},"end":{"line":360,"column":9,"offset":21621},"indent":[]}}],"position":{"start":{"line":360,"column":1,"offset":21613},"end":{"line":360,"column":11,"offset":21623},"indent":[]}},{"type":"text","value":" A graph, a source, and a destination","position":{"start":{"line":360,"column":11,"offset":21623},"end":{"line":360,"column":48,"offset":21660},"indent":[]}}],"position":{"start":{"line":360,"column":1,"offset":21613},"end":{"line":360,"column":48,"offset":21660},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md","children":[{"type":"image","title":null,"url":"","alt":"alt-text","position":{"start":{"line":362,"column":2,"offset":21663},"end":{"line":362,"column":15,"offset":21676},"indent":[]}}],"position":{"start":{"line":362,"column":1,"offset":21662},"end":{"line":362,"column":99,"offset":21760},"indent":[]}},{"type":"link","title":null,"url":"https://camo.githubusercontent.com/428156ffac3c84ccdc035827728a34648c3fb537f5967696fff27d5625f9fc18/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/428156ffac3c84ccdc035827728a34648c3fb537f5967696fff27d5625f9fc18/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634","alt":"widget","position":{"start":{"line":362,"column":100,"offset":21761},"end":{"line":362,"column":453,"offset":22114},"indent":[]}}],"position":{"start":{"line":362,"column":99,"offset":21760},"end":{"line":362,"column":798,"offset":22459},"indent":[]}},{"type":"link","title":null,"url":"https://camo.githubusercontent.com/bab248d2d24b5387823fe7b0259e5ce89b5b38e322500cae5fe67b5a379dad90/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/bab248d2d24b5387823fe7b0259e5ce89b5b38e322500cae5fe67b5a379dad90/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634","alt":"widget","position":{"start":{"line":362,"column":799,"offset":22460},"end":{"line":362,"column":1162,"offset":22823},"indent":[]}}],"position":{"start":{"line":362,"column":798,"offset":22459},"end":{"line":362,"column":1517,"offset":23178},"indent":[]}}],"position":{"start":{"line":362,"column":1,"offset":21662},"end":{"line":362,"column":1517,"offset":23178},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":364,"column":3,"offset":23182},"end":{"line":364,"column":10,"offset":23189},"indent":[]}}],"position":{"start":{"line":364,"column":1,"offset":23180},"end":{"line":364,"column":12,"offset":23191},"indent":[]}},{"type":"text","value":" A graph with the edge between the source and the destination removed.","position":{"start":{"line":364,"column":12,"offset":23191},"end":{"line":364,"column":82,"offset":23261},"indent":[]}}],"position":{"start":{"line":364,"column":1,"offset":23180},"end":{"line":364,"column":82,"offset":23261},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":366,"column":1,"offset":23263},"end":{"line":368,"column":4,"offset":23271},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md","children":[{"type":"image","title":null,"url":"","alt":"alt-text","position":{"start":{"line":370,"column":2,"offset":23274},"end":{"line":370,"column":15,"offset":23287},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":23273},"end":{"line":370,"column":99,"offset":23371},"indent":[]}},{"type":"link","title":null,"url":"https://camo.githubusercontent.com/3c66578e7e5a92a7e8bbe6957356049a8d4206d6d9a91ed2fd6460c7b9fb8ff5/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/3c66578e7e5a92a7e8bbe6957356049a8d4206d6d9a91ed2fd6460c7b9fb8ff5/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034","alt":"widget","position":{"start":{"line":370,"column":100,"offset":23372},"end":{"line":370,"column":453,"offset":23725},"indent":[]}}],"position":{"start":{"line":370,"column":99,"offset":23371},"end":{"line":370,"column":798,"offset":24070},"indent":[]}},{"type":"link","title":null,"url":"https://camo.githubusercontent.com/da5b513fd1a1678e0b6d6209a9673acb5555e3a7f863eb1580ff38d71f6bbfed/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034","children":[{"type":"image","title":null,"url":"https://camo.githubusercontent.com/da5b513fd1a1678e0b6d6209a9673acb5555e3a7f863eb1580ff38d71f6bbfed/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034","alt":"widget","position":{"start":{"line":370,"column":799,"offset":24071},"end":{"line":370,"column":1162,"offset":24434},"indent":[]}}],"position":{"start":{"line":370,"column":798,"offset":24070},"end":{"line":370,"column":1517,"offset":24789},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":23273},"end":{"line":370,"column":1517,"offset":24789},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The solution to this problem is fairly simple: we use Indexing and deletion. Take a look","position":{"start":{"line":372,"column":1,"offset":24791},"end":{"line":372,"column":89,"offset":24879},"indent":[]}}],"position":{"start":{"line":372,"column":1,"offset":24791},"end":{"line":372,"column":89,"offset":24879},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"index.jsGraph.jsLinkedList.jsNode.js12345678910111213141516171819202122232425262728293031\"use strict\";const LinkedList = require('./LinkedList.js');const Node = require('./Node.js');module.exports = class Graph { constructor(vertices) { this.vertices = vertices; this.list = ","position":{"start":{"line":374,"column":1,"offset":24881},"end":{"line":374,"column":276,"offset":25156},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":374,"column":276,"offset":25156},"end":{"line":374,"column":278,"offset":25158},"indent":[]}},{"type":"text","value":"]; var it; for (it = 0; it < vertices; it++) { let temp = new LinkedList(); this.list.push(temp); } } addEdge(source, destination) { if (source < this.vertices && destination < this.vertices) this.list","position":{"start":{"line":374,"column":278,"offset":25158},"end":{"line":374,"column":479,"offset":25359},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":374,"column":479,"offset":25359},"end":{"line":374,"column":481,"offset":25361},"indent":[]}},{"type":"text","value":"source].insertAtHead(destination); return this; } printGraph() { console.log(\">>Adjacency List of Directed Graph<<\"); var i; for (i = 0; i < this.list.length; i++) { process.stdout.write(\"|\" + String(i) + \"| => \");Run","position":{"start":{"line":374,"column":481,"offset":25361},"end":{"line":374,"column":698,"offset":25578},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":24881},"end":{"line":374,"column":698,"offset":25578},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since our vertices are stored in an array, we can access the ","position":{"start":{"line":376,"column":1,"offset":25580},"end":{"line":376,"column":62,"offset":25641},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">source</code>","position":{"start":{"line":376,"column":62,"offset":25641},"end":{"line":376,"column":70,"offset":25649},"indent":[]}},{"type":"text","value":" linked list. We then call the ","position":{"start":{"line":376,"column":70,"offset":25649},"end":{"line":376,"column":101,"offset":25680},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">delete</code>","position":{"start":{"line":376,"column":101,"offset":25680},"end":{"line":376,"column":109,"offset":25688},"indent":[]}},{"type":"text","value":" function for linked lists. The time complexity for this solution is O(E) since we may have to traverse E edges.","position":{"start":{"line":376,"column":109,"offset":25688},"end":{"line":376,"column":221,"offset":25800},"indent":[]}}],"position":{"start":{"line":376,"column":1,"offset":25580},"end":{"line":376,"column":221,"offset":25800},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\\","position":{"start":{"line":378,"column":1,"offset":25802},"end":{"line":378,"column":2,"offset":25803},"indent":[]}}],"position":{"start":{"line":378,"column":1,"offset":25802},"end":{"line":378,"column":2,"offset":25803},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#hash-table-convert-max-heap-to-min-heap","children":[],"position":{"start":{"line":380,"column":6,"offset":25810},"end":{"line":380,"column":131,"offset":25935},"indent":[]}},{"type":"text","value":"Hash Table: Convert Max-Heap to Min-Heap","position":{"start":{"line":380,"column":131,"offset":25935},"end":{"line":380,"column":171,"offset":25975},"indent":[]}}],"position":{"start":{"line":380,"column":1,"offset":25805},"end":{"line":380,"column":171,"offset":25975},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":382,"column":3,"offset":25979},"end":{"line":382,"column":21,"offset":25997},"indent":[]}}],"position":{"start":{"line":382,"column":1,"offset":25977},"end":{"line":382,"column":23,"offset":25999},"indent":[]}},{"type":"text","value":" Implement the function ","position":{"start":{"line":382,"column":23,"offset":25999},"end":{"line":382,"column":47,"offset":26023},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">convertMax(maxHeap)</code>","position":{"start":{"line":382,"column":47,"offset":26023},"end":{"line":382,"column":68,"offset":26044},"indent":[]}},{"type":"text","value":" to convert a binary max-heap into a binary min-heap. ","position":{"start":{"line":382,"column":68,"offset":26044},"end":{"line":382,"column":122,"offset":26098},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">maxHeap</code>","position":{"start":{"line":382,"column":122,"offset":26098},"end":{"line":382,"column":131,"offset":26107},"indent":[]}},{"type":"text","value":" should be an array in the ","position":{"start":{"line":382,"column":131,"offset":26107},"end":{"line":382,"column":158,"offset":26134},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">maxHeap</code>","position":{"start":{"line":382,"column":158,"offset":26134},"end":{"line":382,"column":167,"offset":26143},"indent":[]}},{"type":"text","value":" format, i.e the parent is greater than its children.","position":{"start":{"line":382,"column":167,"offset":26143},"end":{"line":382,"column":220,"offset":26196},"indent":[]}}],"position":{"start":{"line":382,"column":1,"offset":25977},"end":{"line":382,"column":220,"offset":26196},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Input:","position":{"start":{"line":384,"column":3,"offset":26200},"end":{"line":384,"column":9,"offset":26206},"indent":[]}}],"position":{"start":{"line":384,"column":1,"offset":26198},"end":{"line":384,"column":11,"offset":26208},"indent":[]}},{"type":"text","value":" a Max-Heap","position":{"start":{"line":384,"column":11,"offset":26208},"end":{"line":384,"column":22,"offset":26219},"indent":[]}}],"position":{"start":{"line":384,"column":1,"offset":26198},"end":{"line":384,"column":22,"offset":26219},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":386,"column":1,"offset":26221},"end":{"line":388,"column":4,"offset":26229},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Output:","position":{"start":{"line":390,"column":3,"offset":26233},"end":{"line":390,"column":10,"offset":26240},"indent":[]}}],"position":{"start":{"line":390,"column":1,"offset":26231},"end":{"line":390,"column":12,"offset":26242},"indent":[]}},{"type":"text","value":" returns the converted array","position":{"start":{"line":390,"column":12,"offset":26242},"end":{"line":390,"column":40,"offset":26270},"indent":[]}}],"position":{"start":{"line":390,"column":1,"offset":26231},"end":{"line":390,"column":40,"offset":26270},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","position":{"start":{"line":392,"column":1,"offset":26272},"end":{"line":394,"column":4,"offset":26280},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To solve this problem, we must min heapify all parent nodes. Take a look.","position":{"start":{"line":396,"column":1,"offset":26282},"end":{"line":396,"column":74,"offset":26355},"indent":[]}}],"position":{"start":{"line":396,"column":1,"offset":26282},"end":{"line":396,"column":74,"offset":26355},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"123456789101112131415161718192021222324252627function minHeapify(heap, index) { var left = index ","position":{"start":{"line":398,"column":1,"offset":26357},"end":{"line":398,"column":98,"offset":26454},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":398,"column":98,"offset":26454},"end":{"line":398,"column":100,"offset":26456},"indent":[]}},{"type":"text","value":" 2; var right = (index ","position":{"start":{"line":398,"column":100,"offset":26456},"end":{"line":398,"column":123,"offset":26479},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":398,"column":123,"offset":26479},"end":{"line":398,"column":125,"offset":26481},"indent":[]}},{"type":"text","value":" 2) + 1; var smallest = index; if ((heap.length > left) && (heap","position":{"start":{"line":398,"column":125,"offset":26481},"end":{"line":398,"column":189,"offset":26545},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":189,"offset":26545},"end":{"line":398,"column":191,"offset":26547},"indent":[]}},{"type":"text","value":"smallest] > heap","position":{"start":{"line":398,"column":191,"offset":26547},"end":{"line":398,"column":207,"offset":26563},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":207,"offset":26563},"end":{"line":398,"column":209,"offset":26565},"indent":[]}},{"type":"text","value":"left])) { smallest = left } if ((heap.length > right) && (heap","position":{"start":{"line":398,"column":209,"offset":26565},"end":{"line":398,"column":271,"offset":26627},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":271,"offset":26627},"end":{"line":398,"column":273,"offset":26629},"indent":[]}},{"type":"text","value":"smallest] > heap","position":{"start":{"line":398,"column":273,"offset":26629},"end":{"line":398,"column":289,"offset":26645},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":289,"offset":26645},"end":{"line":398,"column":291,"offset":26647},"indent":[]}},{"type":"text","value":"right])) smallest = right if (smallest != index) { var tmp = heap","position":{"start":{"line":398,"column":291,"offset":26647},"end":{"line":398,"column":356,"offset":26712},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":356,"offset":26712},"end":{"line":398,"column":358,"offset":26714},"indent":[]}},{"type":"text","value":"smallest] heap","position":{"start":{"line":398,"column":358,"offset":26714},"end":{"line":398,"column":372,"offset":26728},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":372,"offset":26728},"end":{"line":398,"column":374,"offset":26730},"indent":[]}},{"type":"text","value":"smallest] = heap","position":{"start":{"line":398,"column":374,"offset":26730},"end":{"line":398,"column":390,"offset":26746},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":390,"offset":26746},"end":{"line":398,"column":392,"offset":26748},"indent":[]}},{"type":"text","value":"index] heap","position":{"start":{"line":398,"column":392,"offset":26748},"end":{"line":398,"column":403,"offset":26759},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":403,"offset":26759},"end":{"line":398,"column":405,"offset":26761},"indent":[]}},{"type":"text","value":"index] = tmp minHeapify(heap, smallest) } return heap;}function convertMax(maxHeap) { for (var i = Math.floor((maxHeap.length) / 2); i > -1; i--) maxHeap = minHeapify(maxHeap, i) return maxHeap}var maxHeap = ","position":{"start":{"line":398,"column":405,"offset":26761},"end":{"line":398,"column":613,"offset":26969},"indent":[]}},{"type":"text","value":"[","position":{"start":{"line":398,"column":613,"offset":26969},"end":{"line":398,"column":615,"offset":26971},"indent":[]}},{"type":"text","value":"9,4,7,1,-2,6,5]console.log(convertMax(maxHeap))Run","position":{"start":{"line":398,"column":615,"offset":26971},"end":{"line":398,"column":665,"offset":27021},"indent":[]}}],"position":{"start":{"line":398,"column":1,"offset":26357},"end":{"line":398,"column":665,"offset":27021},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We consider ","position":{"start":{"line":400,"column":1,"offset":27023},"end":{"line":400,"column":13,"offset":27035},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">maxHeap</code>","position":{"start":{"line":400,"column":13,"offset":27035},"end":{"line":400,"column":22,"offset":27044},"indent":[]}},{"type":"text","value":" to be a regular array and reorder it to accurately represent a min-heap. You can see this done in the code above. The ","position":{"start":{"line":400,"column":22,"offset":27044},"end":{"line":400,"column":141,"offset":27163},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">convertMax()</code>","position":{"start":{"line":400,"column":141,"offset":27163},"end":{"line":400,"column":155,"offset":27177},"indent":[]}},{"type":"text","value":" function then restores the heap property on all nodes from the lowest parent node by calling the ","position":{"start":{"line":400,"column":155,"offset":27177},"end":{"line":400,"column":253,"offset":27275},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">minHeapify()</code>","position":{"start":{"line":400,"column":253,"offset":27275},"end":{"line":400,"column":267,"offset":27289},"indent":[]}},{"type":"text","value":" function. In regards to time complexity, this solution takes ","position":{"start":{"line":400,"column":267,"offset":27289},"end":{"line":400,"column":329,"offset":27351},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"O(nlog(n))O(nlog(n))","position":{"start":{"line":400,"column":330,"offset":27352},"end":{"line":400,"column":350,"offset":27372},"indent":[]}}],"position":{"start":{"line":400,"column":329,"offset":27351},"end":{"line":400,"column":351,"offset":27373},"indent":[]}},{"type":"text","value":" time.","position":{"start":{"line":400,"column":351,"offset":27373},"end":{"line":400,"column":357,"offset":27379},"indent":[]}}],"position":{"start":{"line":400,"column":1,"offset":27023},"end":{"line":400,"column":357,"offset":27379},"indent":[]}},{"type":"html","value":"<!--EndFragment-->","position":{"start":{"line":402,"column":1,"offset":27381},"end":{"line":402,"column":19,"offset":27399},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":403,"column":1,"offset":27400}}}}